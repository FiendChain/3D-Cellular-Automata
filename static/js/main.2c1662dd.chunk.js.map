{"version":3,"sources":["gl/Renderer.js","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","shaders/border.js","gl/CubeData.js","app/BoundingBox.js","app/Border.js","ui/AdjustableValues.js","app/renderers/Renderer.js","shaders/volume.js","app/renderers/VolumeRenderer.js","shaders/fragment_shader.js","shaders/vertex_shader.js","app/renderers/PointCloudRenderer.js","app/renderers/VoxelRenderer.js","app/ShaderManager.js","simulation/Rule3D.js","simulation/Neighbours3D.js","app/RuleReader.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/AdjustableValueViews.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","ui/Randomiser.jsx","ui/BorderControls.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","cells_buffer","neighbours","Uint8Array","should_update","Set","should_update_buffer","remove_queue","listeners","current_slice","slice_size","total_steps","listener","fill","recieve","completed_blocks","total_blocks","rule","x","y","z","i","xyz_to_i","state","is_neighbour","on_location_update","size","complete","sliced_step","next","done","res","start","performance","now","cell_count","completed","total","slice_start","i_to_xyz","count_neighbours","next_state","get_next_state","push","e","tmp","length","pop","delete","tmp_update","end","dt","frame_time","floor","Texture3D","data","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","randomiser_browser","total_cells","running","total_queued_steps","data_updated","create_data","sim","listen_rerender","update_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","get_selected_entry","selected_randomiser","randomise","seed_updates","step","stop","local","items","neighbour_config","max_neighbours","total_items","min","texSubImage3D","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","warn","useProgram","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","layout","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","cube_optimized","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","push_attribute","add_vertex_buffer","add_uniform","vec4","draw","AdjustableValue","value","_value","notify","Toggle","val","Slider","max","clamp","Dropdown","options","props","params","key","loc","uniform1i","create_frag_shader","colouring","volume_shader","vert_src","frag_src","xyz","layer","radius","neighbour","neighbour_and_alive","VolumeRenderer","create_volume_data","ibo","add_params","Object","keys","occlusion","create_shader","listen","colour","current_option","add_uniforms","uniform1f","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","PointCloudRenderer","point_type","brightness","scaling_enabled","quad","create_quad_data","tri","create_triangle_data","current_data","drawElementsInstanced","VoxelRenderer","shading_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","fog_near","fog_far","sun_strength","sky_strength","global_params","shading","shading_keys","update_props","light_position","create_cube_data","load_params","ShaderManager","renderers","volume","point","voxel","renderer_type","values","forEach","current_renderer","update_params","Rule3D","remain_alive","become_alive","alive_state","dead_state","alive_threshold","dead_threshold","is_alive","is_dead","pos_mod","n","m","NeighbourRules","total_neighbours","xoff","yoff","zoff","offsets","dim","off","RuleReader","string","substrings","replace","neighbour_type","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Randomiser","SeedCrystal","density","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","randomiser_manager","entries","add_entry","RuleEntry","select_entry","selected_entry","randomiser","select_randomiser","entry","ca_string","description","rule_reader","Statistics","store","dispatch","setTimeout","undefined","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","selected_index","instance","filter","rand","adjustable","select","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","show_border","show_render","requestAnimationFrame","loop","on_update","SimulationView","canvas_ref","React","createRef","rotating","zooming","mouse_start_pos","vec2","total_touches","touch_start_pos","touch_zoom_distance","touch_list","canvas","current","getContext","init_stats","rules_browser","init_app","app","reducers","combineReducers","action","toggle","browser","manager","select_renderer","set_params","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","touches","touch","zoom_touches","calculate_touch_distance","first","second","pos_start","pos_end","on_touch_rotate","on_touch_zoom","distance","touch_a","touch_b","dist_a","dist_b","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","Component","Controls","is_running","useSelector","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","render_entry","RenderAdjustableValue","valueChanged","slider","toFixed","onChange","SliderView","checked","ToggleView","dropdown","option","DropdownView","ShaderMenu","ShaderSettings","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","onSubmit","event","preventDefault","on_size_change","progress","RandomiserMenu","randomiser_options","SeedCrystalEditor","param_options","new_params","change_param","BorderControls","createStore","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c1662dd.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Float32Array(this.count);\r\n        this.cells_buffer = new Float32Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n        this.total_steps = 0;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n        this.total_steps = 0;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        });\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        this.should_update.clear();\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n                    let state = this.cells[i];\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (rule.is_neighbour(state)) {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: this.should_update.size\r\n        });\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            while (!this.current_slice.next().done) {\r\n\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_blocks: total\r\n        });\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 16) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({completed_blocks: completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.total_steps += 1;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_steps: this.total_steps,\r\n        });\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({frame_time: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, randomiser_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.randomiser_browser = randomiser_browser;\r\n\r\n    this.data_updated = false;\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let randomiser = this.randomiser_browser.selected_randomiser;\r\n    // this.clear();\r\n    randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let neighbour_config = rule.neighbours;\r\n    let max_neighbours = neighbour_config.max_neighbours;\r\n\r\n    let total_items = 0;\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, max_neighbours)/max_neighbours * 255);\r\n      total_items += 1;\r\n    }\r\n\r\n    this.data_updated = this.data_updated || (total_items > 0);\r\n\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    // this.cell_data_texture.bind();\r\n    if (this.data_updated) {\r\n      gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n      this.data_updated = false;\r\n    }\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n\r\n    this.shader_manager.on_render();\r\n    // gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n    // gl.drawElementsInstanced(gl.POINTS, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","class AdjustableValue {\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this._value = value;\r\n    this.listeners = new Set();\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.notify();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  listen(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  unlisten(listener) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  notify() {\r\n    for (let listener of this.listeners) {\r\n      listener(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Toggle extends AdjustableValue {\r\n  constructor(value) {\r\n    super('toggle', value);\r\n  }\r\n\r\n  // javascript doesnt extend accessors\r\n  set value(val) {\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Slider extends AdjustableValue {\r\n  constructor(min, max, value) {\r\n    super('slider', value);\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}\r\n\r\nexport class Dropdown extends AdjustableValue {\r\n  constructor(options, index=0) {\r\n    super('dropdown', index);\r\n    this.options = options;\r\n  }\r\n\r\n  set value(index) {\r\n    index = Math.min(index, this.options.length-1);\r\n    super.value = index;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  get current_option() {\r\n    let option = this.options[this.value];\r\n    return option;\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class Renderer {\r\n    constructor(gl, props) {\r\n        this.gl = gl;\r\n        this.props = {\r\n            size: vec3.create(),\r\n            ...props};\r\n        this.params = {};\r\n    }\r\n\r\n    // arbitary values\r\n    update_props(props) {\r\n        this.props = {...this.props, ...props};\r\n    } \r\n\r\n    add_params(params) {\r\n        this.params = {...this.params, ...params};\r\n    }\r\n\r\n    // adjustable values\r\n    update_params(params) {\r\n        for (let key in params) {\r\n            let param = this.params[key];\r\n            param.value = params[key];\r\n        }\r\n        this.params = {...this.params};\r\n    }\r\n\r\n    // base uniforms\r\n    add_uniforms(shader) {\r\n        let gl = this.gl;\r\n        // camera data\r\n        shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.props.camera.model));\r\n        shader.add_uniform(\"uView\", new UniformMat4f(gl, this.props.camera.view));\r\n        shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.props.camera.projection));\r\n        shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.props.camera.view_position));\r\n        shader.add_uniform(\"uGridSize\", new Uniform(loc => gl.uniform3f(loc, this.props.size[0], this.props.size[1], this.props.size[2])));\r\n        // default texture slots\r\n        shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n        shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n        shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    }\r\n\r\n    bind() {\r\n\r\n    }\r\n\r\n    on_render() {\r\n\r\n    }\r\n}","const vert_shader = (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 position;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\n\r\nuniform vec3 uGridSize;\r\n\r\nout vec3 vPosition;\r\nout vec3 vTexturePosition;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    vec3 vertex_pos = position * uGridSize;\r\n    vec4 pos = MVP * vec4(vertex_pos, 1.0);\r\n    vPosition = (uModel * vec4(vertex_pos, 1.0)).xyz;\r\n    vTexturePosition = position;\r\n    gl_Position = pos;\r\n}\r\n`\r\n);\r\n\r\nconst create_frag_shader = (colouring) => (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 vPosition;\r\nin vec3 vTexturePosition;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nuniform sampler3D uStateTexture;\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\n\r\nuniform float uOcclusion;\r\n\r\nout vec4 vFragColour;\r\n\r\nvoid main() {\r\n    vec3 view_direction = uViewPosition - vPosition;\r\n    vec3 step_size = normalize(view_direction)/uGridSize;\r\n    vec3 tex_coords = vTexturePosition;\r\n    while (true) {\r\n        vec4 cell = texture(uStateTexture, tex_coords);\r\n        float state = cell[0];\r\n        float neighbours = cell[1];\r\n        float lighting = 1.0-neighbours*uOcclusion;\r\n        vec4 state_colour = texture(uStateColourTexture, vec2(state, 0.0));\r\n        vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n        ${colouring}\r\n        tex_coords -= step_size;\r\n        if (tex_coords.x < 0.0 || tex_coords.x > 1.0 || \r\n            tex_coords.y < 0.0 || tex_coords.y > 1.0 ||\r\n            tex_coords.z < 0.0 || tex_coords.z > 1.0) \r\n        {\r\n            break;\r\n        }\r\n    }\r\n    vFragColour = vec4(0, 0, 0, 0);\r\n}\r\n`\r\n);\r\n\r\nconst state_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst xyz_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(tex_coords*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst layer_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = mod(radius/10.0, 1.0); \r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst radius_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = length(distance) * 2.0;\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_colouring = create_frag_shader(\r\n`if (neighbour_colour.a != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_and_alive_colouring = create_frag_shader(\r\n`float alpha = state_colour.a * neighbour_colour.a;\r\nif (alpha != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, alpha);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\n\r\nexport const volume_shader = {\r\n    vert_src: vert_shader,\r\n    frag_src: {\r\n        state: state_colouring,\r\n        xyz: xyz_colouring, \r\n        layer: layer_colouring,\r\n        radius: radius_colouring,\r\n        neighbour: neighbour_colouring,\r\n        neighbour_and_alive: neighbour_and_alive_colouring,\r\n    },\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { cube_optimized } from \"../../gl/CubeData\";\r\nimport { volume_shader } from \"../../shaders/volume\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\n\r\nexport class VolumeRenderer extends Renderer {\r\n    constructor(gl, props) {\r\n        super(gl, props);\r\n        [this.vao, this.ibo, this.index_data] = create_volume_data(gl);\r\n        this.add_params({\r\n            colouring: new Dropdown(Object.keys(volume_shader.frag_src)),\r\n            occlusion: new Slider(0, 1, 0.65)\r\n        });\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => {\r\n            this.create_shader();\r\n        })\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = volume_shader.vert_src;\r\n        let frag_src = volume_shader.frag_src[colour];\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\nconst create_volume_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  \r\n  let vertex_data = cube_optimized.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube_optimized.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: create_no_shader\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain - y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nfloat lighting = 1.0-(neighbours*uOcclusion);\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\nuniform float uOcclusion;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\n\r\nimport { Dropdown, Slider, Toggle } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\nimport { Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class PointCloudRenderer extends Renderer {\r\n    constructor(gl, props) {\r\n        super(gl, props);\r\n        this.add_params({\r\n            colouring: new Dropdown(Object.keys(vertex_shader_src)),\r\n            point_type: new Dropdown(['quad', 'tri']),\r\n            brightness: new Slider(0, 1, 1),\r\n            occlusion: new Slider(0, 1, 0.65),\r\n            scaling_enabled: new Toggle(0),\r\n        });\r\n        this.data = {\r\n            quad: create_quad_data(gl),\r\n            tri: create_triangle_data(gl),\r\n        };\r\n        this.create_shader();\r\n        this.params.colouring.listen(colouring => {\r\n            this.create_shader();\r\n        });\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = vertex_shader_src[colour](true);\r\n        let frag_src = fragment_shader_src.no_shading(true);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n    }\r\n\r\n    get current_data() {\r\n        return this.data[this.params.point_type.current_option];\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        let data = this.current_data;\r\n        data.vao.bind();\r\n        data.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let data = this.current_data;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, data.ibo.count, gl.UNSIGNED_INT, data.index_data, total_cells); \r\n    }\r\n}\r\n\r\n// square for each point\r\nconst create_quad_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                        1, 1, 0.5,\r\n                                        0, 0, 0.5,\r\n                                        1, 0, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}\r\n\r\n// triangle for each point\r\nconst create_triangle_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                        1.5, -0.5, 0.5,\r\n                                        0.5, -1.5, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { cube } from \"../../gl/CubeData\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport class VoxelRenderer extends Renderer {\r\n    constructor(gl, props) {\r\n        super(gl, props);\r\n        this.shading_params = {\r\n            ambient_strength: new Slider(0, 1, 0.4),\r\n            diffuse_strength: new Slider(0, 1, 0.95),\r\n            specular_strength: new Slider(0, 1, 0.6),\r\n            specular_power_factor: new Slider(0, 128.0, 4.0),\r\n            scaling_enabled: new Toggle(0),\r\n            fog_near: new Slider(0, 1, 0),\r\n            fog_far: new Slider(0, 1, 0),\r\n            sun_strength: new Slider(0, 1, 0.95),\r\n            sky_strength: new Slider(0, 1, 0.25),\r\n            brightness: new Slider(0, 1, 1.0),\r\n            occlusion: new Slider(0, 1, 0.0),\r\n        };\r\n\r\n        this.global_params = {\r\n            colouring: new Dropdown(Object.keys(vertex_shader_src)),\r\n            shading: new Dropdown(Object.keys(fragment_shader_src)),\r\n        };\r\n\r\n        this.shading_keys = {\r\n          basic: ['occlusion', 'sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n          basic_alternate: ['occlusion', 'ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n          no_shading: ['occlusion', 'brightness', 'scaling_enabled']\r\n        };\r\n\r\n        this.update_props({\r\n            light_position: vec3.create()\r\n        });\r\n        [this.vao, this.ibo, this.index_data] = create_cube_data(gl);\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => this.create_shader());\r\n        this.params.shading.listen(() => this.create_shader());\r\n    }\r\n\r\n    create_shader() {\r\n        this.load_params();\r\n        let colour = this.global_params.colouring.current_option;\r\n        let shading = this.global_params.shading.current_option;\r\n        let vert_src = vertex_shader_src[colour](false);\r\n        let frag_src = fragment_shader_src[shading](false);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    // depending on shading type, we get different parameters to configure\r\n    load_params() {\r\n        let params = {};\r\n        let shading = this.global_params.shading.current_option;\r\n        let keys = this.shading_keys[shading];\r\n        for (let key of keys) {\r\n            params[key] = this.shading_params[key];\r\n        }\r\n        this.params = {...this.global_params, ...params};\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        // lighting\r\n        shader.add_uniform('light.position', new UniformVec3f(gl, this.props.light_position));\r\n        shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n        // // lighting params\r\n        shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.ambient_strength.value)));\r\n        shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.diffuse_strength.value)));\r\n        shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_strength.value)));\r\n        shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_power_factor.value)));\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        // post processing\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n        shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_near.value)));\r\n        shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_far.value)));\r\n        shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sun_strength.value)));\r\n        shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sky_strength.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, this.index_data, total_cells); \r\n    }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","import { vec3 } from 'gl-matrix';\r\n\r\nimport { Dropdown } from '../ui/AdjustableValues';\r\nimport { VolumeRenderer } from './renderers/VolumeRenderer';\r\nimport { PointCloudRenderer } from './renderers/PointCloudRenderer';\r\nimport { VoxelRenderer } from './renderers/VoxelRenderer';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    let props = {\r\n      size: this.size,\r\n      camera: this.camera\r\n    };\r\n\r\n    this.renderers = {\r\n      volume: new VolumeRenderer(gl, props),\r\n      point: new PointCloudRenderer(gl, props),\r\n      voxel: new VoxelRenderer(gl, props),\r\n    };\r\n\r\n    this.renderer_type = new Dropdown(Object.keys(this.renderers));\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    Object.values(this.renderers).forEach(renderer => {\r\n      renderer.update_props({size: size});\r\n    })\r\n  }\r\n\r\n  get current_renderer() {\r\n    let key = this.renderer_type.current_option;\r\n    return this.renderers[key];\r\n  }\r\n\r\n  select_renderer(index) {\r\n    this.renderer_type.value = index;\r\n  }\r\n\r\n  get params() {\r\n    return this.current_renderer.params;\r\n  }\r\n\r\n  update_params(params) {\r\n    this.current_renderer.update_params(params);\r\n  }\r\n\r\n  bind() {\r\n    this.current_renderer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    this.current_renderer.on_render();\r\n  }\r\n\r\n\r\n}\r\n","export class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        // this.alive_state = this.total_states-1;\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n        this.delta = (this.alive_state-this.dead_state)/(this.total_states-1);\r\n\r\n        this.alive_threshold = this.alive_state-this.delta/2.0;\r\n        this.dead_threshold = this.delta/2.0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // alive to dead\r\n        if (this.is_alive(state)) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-this.delta;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (this.is_dead(state)) {\r\n            if (this.become_alive(neighbours)) {\r\n                return this.alive_state;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // refractory\r\n        return state-this.delta;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n\r\n    is_alive(state) {\r\n        return (state > this.alive_threshold);\r\n    }\r\n\r\n    is_dead(state) {\r\n        return (state < this.dead_threshold);\r\n    }\r\n}","export class MooreNeighbour {\r\n    constructor() {\r\n        this.max_neighbours = 26;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n        this.max_neighbours = 6;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nexport class RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","import  { Slider } from '../ui/AdjustableValues';\r\n\r\nclass Randomiser {\r\n    constructor(params={}) {\r\n        this.params = params;\r\n    }\r\n\r\n    update(params) {\r\n        for (let key in params) {\r\n            let value = params[key];\r\n            this.params[key].value = value;\r\n        }\r\n\r\n        this.params = {...this.params};\r\n    }\r\n}\r\n\r\nexport class SeedCrystal extends Randomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 0.5, radius)\r\n        });\r\n        this.type = 'Seed Crystal';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density = this.params.density.value; \r\n\r\n        let [lower, upper] = [\r\n            Math.max(0.5-radius, 0.0),  \r\n            Math.min(0.5+radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute extends Randomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 100, radius)\r\n        });\r\n        this.type = 'Seed Crystal Absolute';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density =  this.params.density.value;\r\n\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-radius, 0), Math.min(X+radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-radius, 0), Math.min(Y+radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-radius, 0), Math.min(Z+radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { RuleReader } from './RuleReader';\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor(randomiser_manager) {\r\n    this.entries = [];\r\n    this.randomiser_manager = randomiser_manager;\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.select_entry(0);\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n    let randomiser = this.get_selected_entry().randomiser;\r\n    this.randomiser_manager.select_randomiser(randomiser);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystal());\r\n        this.add_randomiser(new SeedCrystalAbsolute());\r\n\r\n        this.selected_index = 0;\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push({\r\n            name: randomiser.type,\r\n            instance: randomiser\r\n        });\r\n    }\r\n\r\n    select_randomiser(randomiser) {\r\n        let entries = this.entries.map((v, i) => [v, i]);\r\n        let matching_entries = entries.filter(([entry, i]) => entry.instance.type === randomiser.type);\r\n        let other_rands = matching_entries.map(([entry, i]) => [entry.instance, i]);\r\n        other_rands.forEach(([rand, i]) => {\r\n            let params = {};\r\n            Object.entries(randomiser.params).forEach(([key, adjustable]) => {\r\n                params[key] = adjustable.value;\r\n            });\r\n            rand.update(params);\r\n            this.select(i);\r\n        });\r\n    }\r\n\r\n    select(index) {\r\n        this.selected_index = index;\r\n    }\r\n\r\n    set_params(params) {\r\n        let randomiser = this.selected_randomiser;\r\n        randomiser.update(params);\r\n    }\r\n\r\n    get selected_randomiser() {\r\n        return this.entries[this.selected_index].instance;\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.rule_browser = new RuleBrowser(this.randomiser_manager);\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 100;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.show_border = new Toggle(true);\r\n    this.show_render = new Toggle(true);\r\n\r\n    // select amoeba with layer colouring\r\n    this.rule_browser.select_entry(2);\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.randomiser_manager, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim.on_render();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer, randomiser_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={800}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}\r\n        onTouchStart={ev => this.on_touch_start(ev)}\r\n        onTouchMove={ev => this.on_touch_move(ev)}\r\n        onTouchEnd={ev => this.on_touch_end(ev)}></canvas>\r\n    );\r\n  }\r\n}","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_renderer':\r\n                manager.select_renderer(action.value);\r\n                break;\r\n            case 'shader.update_params':\r\n                manager.update_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.set_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    case 'dropdown':\r\n      return DropdownView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label>{name}: {slider.value.toFixed(2)}</label>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className='form-check' key={key}>\r\n      <input \r\n        type='checkbox' className='form-check-input'\r\n        checked={toggle.value}\r\n        onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      <label className='form-check-label'>{name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownView(dropdown, key, name, valueChanged) {\r\n  let onChange = ev => valueChanged(Number(ev.target.value));\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label className='mr-2'>{name} </label>\r\n      <select className='custom-select custom-select-sm' value={dropdown.value} onChange={onChange}>\r\n        {dropdown.options.map((option, i) => (\r\n          <option value={i} key={`${name}_${key}_${i}`}>{option}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type);\r\n  const current_renderer_type = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className='card-header'>Shaders</div>\r\n      <div className=\"card-body\">\r\n        <form className='form-inline'>\r\n          {RenderAdjustableValue(renderer_type, 0, 'Renderer', value => {\r\n            dispatch({type:'shader.select_renderer', value:value});\r\n          })}\r\n        </form>\r\n        <hr></hr>\r\n        <ShaderSettings></ShaderSettings>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const params = useSelector(state => state.shader_manager.params);\r\n\r\n  return (\r\n    <form>{Object.entries(params).map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        let data = {};\r\n        data[name] = value;\r\n        dispatch({type: 'shader.update_params', value: data}) \r\n      })\r\n    })}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <form className='form-group' onSubmit={(event) => on_size_change(event)}>\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <button type=\"submit\" className='btn btn-primary'>Apply</button>\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Statistics</div>\r\n      <div className='card-body'>\r\n        <div>Total Steps: {total_steps}</div>\r\n        <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n        <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let selected_index = useSelector(state => state.randomiser.selected_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch({type: 'randomiser.select', value: index});\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.name}</option>);\r\n  })\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Randomiser</div>\r\n      <div className='card-body'>\r\n        <form>\r\n          <div className='form-inline'>\r\n            <label className='mr-2'>Randomiser</label>\r\n            <select className='custom-select custom-select-sm' value={selected_index} onChange={select_randomiser}>\r\n              {randomiser_options}\r\n            </select>\r\n          </div>\r\n       </form>\r\n       <hr></hr>\r\n        <SeedCrystalEditor></SeedCrystalEditor>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.selected_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    let new_params = {};\r\n    new_params[name] = Number(value);\r\n    dispatch({\r\n      type: 'randomiser.update', \r\n      value: new_params\r\n    });\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const show_border = useSelector(state => state.app.show_border);\r\n  const show_render = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(show_border, 0, 'Show Border', value => {\r\n        dispatch({type: 'app.show_border', value: value});\r\n      })}\r\n      {RenderAdjustableValue(show_render, 1, 'Show Render', value => {\r\n        dispatch({type: 'app.show_render', value: value});\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\nimport { RandomiserMenu } from './ui/Randomiser';\r\nimport { BorderControls } from './ui/BorderControls';\r\n\r\nexport const store = createStore(\r\n  () => {}, \r\n  compose(\r\n    applyMiddleware(thunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  )\r\n);\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className='col-sm'>\r\n        <Controls></Controls>\r\n        <SizeChanger></SizeChanger>\r\n        <BorderControls></BorderControls>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return <RulesBrowser></RulesBrowser>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? render_left_panel() : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">{render_right_panel()}</div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}