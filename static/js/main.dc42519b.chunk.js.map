{"version":3,"sources":["ui/Controls.jsx","gl/Renderer.js","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","shaders/border.js","gl/CubeData.js","app/BoundingBox.js","app/Border.js","ui/AdjustableValues.js","app/renderers/Renderer.js","shaders/volume.js","app/renderers/VolumeRenderer.js","shaders/fragment_shader.js","shaders/vertex_shader.js","app/renderers/PointCloudRenderer.js","app/renderers/VoxelRenderer.js","app/ShaderManager.js","simulation/Rule3D.js","simulation/Neighbours3D.js","app/RuleReader.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/reducers/app.js","ui/SimulationView/MouseController.js","ui/SimulationView/TouchScreenController.js","ui/SimulationView/Canvas.jsx","ui/SimulationView/SimulationView.jsx","ui/RulesBrowser.jsx","ui/AdjustableValueViews.jsx","ui/BorderControls.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","ui/Randomiser.jsx","App.jsx","index.jsx"],"names":["Controls","is_running","useSelector","state","app","sim","running","dispatch","useDispatch","on_off","run_btn","className","onClick","type","Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","cells_buffer","neighbours","Uint8Array","should_update","Set","should_update_buffer","remove_queue","listeners","current_slice","slice_size","total_steps","listener","fill","recieve","completed_blocks","total_blocks","rule","x","y","z","i","xyz_to_i","is_neighbour","on_location_update","size","complete","sliced_step","next","done","res","start","performance","now","cell_count","completed","total","slice_start","i_to_xyz","count_neighbours","next_state","get_next_state","push","e","tmp","length","pop","delete","tmp_update","end","dt","frame_time","floor","Texture3D","data","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","randomiser_browser","total_cells","total_queued_steps","data_updated","create_data","listen_rerender","update_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","get_selected_entry","selected_randomiser","randomise","seed_updates","step","stop","local","items","neighbour_config","max_neighbours","total_items","min","texSubImage3D","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","warn","useProgram","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","layout","attributes","attribute","enableVertexAttribArray","index","has","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","cube_optimized","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","push_attribute","add_vertex_buffer","add_uniform","vec4","draw","AdjustableValue","value","_value","notify","Toggle","val","Slider","max","clamp","Dropdown","options","props","params","key","loc","uniform1i","create_frag_shader","colouring","volume_shader","vert_src","frag_src","xyz","layer","radius","neighbour","neighbour_and_alive","VolumeRenderer","create_volume_data","ibo","add_params","occlusion","step_factor","create_shader","listen","colour","current_option","add_uniforms","uniform1f","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","PointCloudRenderer","point_type","brightness","scaling_enabled","quad","create_quad_data","tri","create_triangle_data","current_data","drawElementsInstanced","VoxelRenderer","shading_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","fog_near","fog_far","sun_strength","sky_strength","global_params","shading","Object","keys","shading_keys","update_props","light_position","create_cube_data","load_params","ShaderManager","renderers","volume","point","voxel","renderer_type","values","forEach","current_renderer","update_params","Rule3D","remain_alive","become_alive","alive_state","dead_state","alive_threshold","dead_threshold","is_alive","is_dead","pos_mod","n","m","NeighbourRules","total_neighbours","xoff","yoff","zoff","offsets","dim","off","RuleReader","string","substrings","replace","neighbour_type","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Randomiser","SeedCrystal","density","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","randomiser_manager","entries","add_entry","RuleEntry","select_entry","selected_entry","randomiser","select_randomiser","entry","ca_string","description","rule_reader","Statistics","store","setTimeout","undefined","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","selected_index","instance","filter","rand","adjustable","select","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","show_border","show_render","distance","min_index","list","min_i","min_val","argmin","requestAnimationFrame","loop","on_update","canvas","width","clientWidth","height","clientHeight","viewport","resize","gui_reducer","init","default_settings","fullscreen","settings","action","MouseController","onMouseDown","ev","on_mouse_down","onMouseUp","on_mouse_up","onMouseMove","on_mouse_move","onWheel","on_wheel","rotating","zooming","mouse_start_pos","vec2","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","TouchScreenController","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","total_touches","touch_start_pos","touch_zoom_distance","touch_list","touches","touch","zoom_touches","calculate_touch_distance","on_touch_rotate","on_touch_zoom","touch_a","touch_b","dist_a","dist_b","first","second","pos_start","pos_end","Canvas","mouse_controller","touch_controller","current","getContext","create_app","getState","init_stats","rules_browser","init_app","reducers","combineReducers","toggle","browser","manager","select_renderer","set_params","gui","replaceReducer","run","ref","React","Component","SimulationView","useStore","style","zIndex","position","alignSelf","FullScreenButton","font","RulesBrowser","rule_items","class_name","render_entry","href","data-toggle","role","aria-expanded","aria-controls","id","RenderAdjustableValue","valueChanged","slider","toFixed","onChange","SliderView","checked","ToggleView","dropdown","option","DropdownView","BorderControls","ShaderMenu","card_body","ShaderSettings","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","size_changer_form","onSubmit","event","preventDefault","on_size_change","progress","RandomiserMenu","randomiser_options","SeedCrystalEditor","param_options","new_params","change_param","createStore","compose","applyMiddleware","thunk","createRef","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc42519b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Float32Array(this.count);\r\n        this.cells_buffer = new Float32Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n        this.total_steps = 0;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n        this.total_steps = 0;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        });\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        this.should_update.clear();\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n                    let state = this.cells[i];\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (rule.is_neighbour(state)) {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: this.should_update.size\r\n        });\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            while (!this.current_slice.next().done) {\r\n\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_blocks: total\r\n        });\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 16) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({completed_blocks: completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.total_steps += 1;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_steps: this.total_steps,\r\n        });\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({frame_time: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, randomiser_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.randomiser_browser = randomiser_browser;\r\n\r\n    this.data_updated = false;\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let randomiser = this.randomiser_browser.selected_randomiser;\r\n    // this.clear();\r\n    randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let neighbour_config = rule.neighbours;\r\n    let max_neighbours = neighbour_config.max_neighbours;\r\n\r\n    let total_items = 0;\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, max_neighbours)/max_neighbours * 255);\r\n      total_items += 1;\r\n    }\r\n\r\n    this.data_updated = this.data_updated || (total_items > 0);\r\n\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    // this.cell_data_texture.bind();\r\n    if (this.data_updated) {\r\n      gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n      this.data_updated = false;\r\n    }\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n\r\n    this.shader_manager.on_render();\r\n    // gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n    // gl.drawElementsInstanced(gl.POINTS, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","class AdjustableValue {\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this._value = value;\r\n    this.listeners = new Set();\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.notify();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  listen(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  unlisten(listener) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  notify() {\r\n    for (let listener of this.listeners) {\r\n      listener(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Toggle extends AdjustableValue {\r\n  constructor(value) {\r\n    super('toggle', value);\r\n  }\r\n\r\n  // javascript doesnt extend accessors\r\n  set value(val) {\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Slider extends AdjustableValue {\r\n  constructor(min, max, value) {\r\n    super('slider', value);\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}\r\n\r\nexport class Dropdown extends AdjustableValue {\r\n  constructor(options, index=0) {\r\n    super('dropdown', index);\r\n    this.options = options;\r\n  }\r\n\r\n  set value(index) {\r\n    index = Math.min(index, this.options.length-1);\r\n    super.value = index;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  get current_option() {\r\n    let option = this.options[this.value];\r\n    return option;\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class Renderer {\r\n    constructor(gl, props, params) {\r\n        this.gl = gl;\r\n        this.props = {\r\n            size: vec3.create(),\r\n            ...props};\r\n        this.params = params;\r\n    }\r\n\r\n    // arbitary values\r\n    update_props(props) {\r\n        this.props = {...this.props, ...props};\r\n    } \r\n\r\n    add_params(params) {\r\n        this.params = {...this.params, ...params};\r\n    }\r\n\r\n    // adjustable values\r\n    update_params(params) {\r\n        for (let key in params) {\r\n            let param = this.params[key];\r\n            param.value = params[key];\r\n        }\r\n        this.params = {...this.params};\r\n    }\r\n\r\n    // base uniforms\r\n    add_uniforms(shader) {\r\n        let gl = this.gl;\r\n        // camera data\r\n        shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.props.camera.model));\r\n        shader.add_uniform(\"uView\", new UniformMat4f(gl, this.props.camera.view));\r\n        shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.props.camera.projection));\r\n        // shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.props.camera.view_position));\r\n        shader.add_uniform(\"uViewPosition\", new Uniform(loc => gl.uniform3f(loc, ...this.props.camera.view_position)));\r\n        shader.add_uniform(\"uGridSize\", new Uniform(loc => gl.uniform3f(loc, this.props.size[0], this.props.size[1], this.props.size[2])));\r\n        // default texture slots\r\n        shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n        shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n        shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    }\r\n\r\n    bind() {\r\n\r\n    }\r\n\r\n    on_render() {\r\n\r\n    }\r\n}","const vert_shader = (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 position;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\n\r\nuniform vec3 uGridSize;\r\n\r\nout vec3 vPosition;\r\nout vec3 vTexturePosition;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    vec3 vertex_pos = position * uGridSize;\r\n    vec4 pos = MVP * vec4(vertex_pos, 1.0);\r\n    vPosition = (uModel * vec4(vertex_pos, 1.0)).xyz;\r\n    vTexturePosition = position;\r\n    gl_Position = pos;\r\n}\r\n`\r\n);\r\n\r\nconst create_frag_shader = (colouring) => (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 vPosition;\r\nin vec3 vTexturePosition;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nuniform sampler3D uStateTexture;\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\n\r\nuniform float uOcclusion;\r\nuniform float uStepFactor;\r\n\r\nout vec4 vFragColour;\r\n\r\nvoid main() {\r\n    vec3 view_direction = uViewPosition - vPosition;\r\n    vec3 step_size = normalize(view_direction);\r\n    // vec3 resize = abs(step_size);\r\n    // step_size /= max(resize.x, max(resize.y, resize.z));\r\n    step_size = step_size / uGridSize * uStepFactor;\r\n\r\n    vec3 tex_coords = vTexturePosition;\r\n    while (true) {\r\n        vec4 cell = texture(uStateTexture, tex_coords);\r\n        float state = cell[0];\r\n        float neighbours = cell[1];\r\n        float lighting = 1.0-neighbours*uOcclusion;\r\n        vec4 state_colour = texture(uStateColourTexture, vec2(state, 0.0));\r\n        vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n        ${colouring}\r\n        tex_coords -= step_size;\r\n        if (tex_coords.x < 0.0 || tex_coords.x > 1.0 || \r\n            tex_coords.y < 0.0 || tex_coords.y > 1.0 ||\r\n            tex_coords.z < 0.0 || tex_coords.z > 1.0) \r\n        {\r\n            break;\r\n        }\r\n    }\r\n    vFragColour = vec4(0, 0, 0, 0);\r\n}\r\n`\r\n);\r\n\r\nconst state_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst xyz_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(tex_coords*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst layer_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = mod(radius/10.0, 1.0); \r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst radius_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = length(distance) * 2.0;\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_colouring = create_frag_shader(\r\n`if (neighbour_colour.a != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_and_alive_colouring = create_frag_shader(\r\n`float alpha = state_colour.a * neighbour_colour.a;\r\nif (alpha != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, alpha);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\n\r\nexport const volume_shader = {\r\n    vert_src: vert_shader,\r\n    frag_src: {\r\n        state: state_colouring,\r\n        xyz: xyz_colouring, \r\n        layer: layer_colouring,\r\n        radius: radius_colouring,\r\n        neighbour: neighbour_colouring,\r\n        neighbour_and_alive: neighbour_and_alive_colouring,\r\n    },\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { cube_optimized } from \"../../gl/CubeData\";\r\nimport { volume_shader } from \"../../shaders/volume\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\n\r\nexport class VolumeRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        [this.vao, this.ibo, this.index_data] = create_volume_data(gl);\r\n        this.add_params({\r\n            occlusion: new Slider(0, 1, 0.65),\r\n            step_factor: new Slider(0.1, 2, 1)\r\n        });\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => {\r\n            this.create_shader();\r\n        })\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = volume_shader.vert_src;\r\n        let frag_src = volume_shader.frag_src[colour];\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uStepFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.step_factor.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\nconst create_volume_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  \r\n  let vertex_data = cube_optimized.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube_optimized.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: create_no_shader\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain - y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nfloat lighting = 1.0-(neighbours*uOcclusion);\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\nuniform float uOcclusion;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\n\r\nimport { Dropdown, Slider, Toggle } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\nimport { Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class PointCloudRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        this.add_params({\r\n            point_type: new Dropdown(['quad', 'tri']),\r\n            brightness: new Slider(0, 1, 1),\r\n            occlusion: new Slider(0, 1, 0.65),\r\n            scaling_enabled: new Toggle(0),\r\n        });\r\n        this.data = {\r\n            quad: create_quad_data(gl),\r\n            tri: create_triangle_data(gl),\r\n        };\r\n        this.create_shader();\r\n        this.params.colouring.listen(colouring => {\r\n            this.create_shader();\r\n        });\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = vertex_shader_src[colour](true);\r\n        let frag_src = fragment_shader_src.no_shading(true);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n    }\r\n\r\n    get current_data() {\r\n        return this.data[this.params.point_type.current_option];\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        let data = this.current_data;\r\n        data.vao.bind();\r\n        data.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let data = this.current_data;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, data.ibo.count, gl.UNSIGNED_INT, data.index_data, total_cells); \r\n    }\r\n}\r\n\r\n// square for each point\r\nconst create_quad_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                        1, 1, 0.5,\r\n                                        0, 0, 0.5,\r\n                                        1, 0, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}\r\n\r\n// triangle for each point\r\nconst create_triangle_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                        1.5, -0.5, 0.5,\r\n                                        0.5, -1.5, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { cube } from \"../../gl/CubeData\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport class VoxelRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, {});\r\n        this.shading_params = {\r\n            ambient_strength: new Slider(0, 1, 0.4),\r\n            diffuse_strength: new Slider(0, 1, 0.95),\r\n            specular_strength: new Slider(0, 1, 0.6),\r\n            specular_power_factor: new Slider(0, 128.0, 4.0),\r\n            scaling_enabled: new Toggle(0),\r\n            fog_near: new Slider(0, 1, 0),\r\n            fog_far: new Slider(0, 1, 0),\r\n            sun_strength: new Slider(0, 1, 0.95),\r\n            sky_strength: new Slider(0, 1, 0.25),\r\n            brightness: new Slider(0, 1, 1.0),\r\n            occlusion: new Slider(0, 1, 0.0),\r\n        };\r\n\r\n        this.global_params = {\r\n            ...params,\r\n            shading: new Dropdown(Object.keys(fragment_shader_src)),\r\n        };\r\n\r\n        this.shading_keys = {\r\n          basic: ['occlusion', 'sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n          basic_alternate: ['occlusion', 'ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n          no_shading: ['occlusion', 'brightness', 'scaling_enabled']\r\n        };\r\n\r\n        this.update_props({\r\n            light_position: vec3.create()\r\n        });\r\n        [this.vao, this.ibo, this.index_data] = create_cube_data(gl);\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => this.create_shader());\r\n        this.params.shading.listen(() => this.create_shader());\r\n    }\r\n\r\n    create_shader() {\r\n        this.load_params();\r\n        let colour = this.global_params.colouring.current_option;\r\n        let shading = this.global_params.shading.current_option;\r\n        let vert_src = vertex_shader_src[colour](false);\r\n        let frag_src = fragment_shader_src[shading](false);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    // depending on shading type, we get different parameters to configure\r\n    load_params() {\r\n        let params = {};\r\n        let shading = this.global_params.shading.current_option;\r\n        let keys = this.shading_keys[shading];\r\n        for (let key of keys) {\r\n            params[key] = this.shading_params[key];\r\n        }\r\n        this.params = {...this.global_params, ...params};\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        // lighting\r\n        shader.add_uniform('light.position', new UniformVec3f(gl, this.props.light_position));\r\n        shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n        // // lighting params\r\n        shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.ambient_strength.value)));\r\n        shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.diffuse_strength.value)));\r\n        shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_strength.value)));\r\n        shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_power_factor.value)));\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        // post processing\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n        shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_near.value)));\r\n        shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_far.value)));\r\n        shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sun_strength.value)));\r\n        shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sky_strength.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, this.index_data, total_cells); \r\n    }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","import { vec3 } from 'gl-matrix';\r\n\r\nimport { Dropdown } from '../ui/AdjustableValues';\r\nimport { VolumeRenderer } from './renderers/VolumeRenderer';\r\nimport { PointCloudRenderer } from './renderers/PointCloudRenderer';\r\nimport { VoxelRenderer } from './renderers/VoxelRenderer';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    let props = {\r\n      size: this.size,\r\n      camera: this.camera\r\n    };\r\n\r\n    this.global_params = {\r\n      colouring: new Dropdown(Object.keys(vertex_shader_src)),\r\n    };\r\n\r\n    this.renderers = {\r\n      volume: new VolumeRenderer(gl, props, this.global_params),\r\n      point: new PointCloudRenderer(gl, props, this.global_params),\r\n      voxel: new VoxelRenderer(gl, props, this.global_params),\r\n    };\r\n\r\n    this.renderer_type = new Dropdown(Object.keys(this.renderers));\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    Object.values(this.renderers).forEach(renderer => {\r\n      renderer.update_props({size: size});\r\n    })\r\n  }\r\n\r\n  get current_renderer() {\r\n    let key = this.renderer_type.current_option;\r\n    return this.renderers[key];\r\n  }\r\n\r\n  select_renderer(index) {\r\n    this.renderer_type.value = index;\r\n  }\r\n\r\n  get params() {\r\n    return this.current_renderer.params;\r\n  }\r\n\r\n  update_params(params) {\r\n    this.current_renderer.update_params(params);\r\n  }\r\n\r\n  bind() {\r\n    this.current_renderer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    this.current_renderer.on_render();\r\n  }\r\n\r\n\r\n}\r\n","export class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        // this.alive_state = this.total_states-1;\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n        this.delta = (this.alive_state-this.dead_state)/(this.total_states-1);\r\n\r\n        this.alive_threshold = this.alive_state-this.delta/2.0;\r\n        this.dead_threshold = this.delta/2.0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // alive to dead\r\n        if (this.is_alive(state)) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-this.delta;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (this.is_dead(state)) {\r\n            if (this.become_alive(neighbours)) {\r\n                return this.alive_state;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // refractory\r\n        return state-this.delta;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n\r\n    is_alive(state) {\r\n        return (state > this.alive_threshold);\r\n    }\r\n\r\n    is_dead(state) {\r\n        return (state < this.dead_threshold);\r\n    }\r\n}","export class MooreNeighbour {\r\n    constructor() {\r\n        this.max_neighbours = 26;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n        this.max_neighbours = 6;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nexport class RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","import  { Slider } from '../ui/AdjustableValues';\r\n\r\nclass Randomiser {\r\n    constructor(params={}) {\r\n        this.params = params;\r\n    }\r\n\r\n    update(params) {\r\n        for (let key in params) {\r\n            let value = params[key];\r\n            this.params[key].value = value;\r\n        }\r\n\r\n        this.params = {...this.params};\r\n    }\r\n}\r\n\r\nexport class SeedCrystal extends Randomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 0.5, radius)\r\n        });\r\n        this.type = 'Seed Crystal';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density = this.params.density.value; \r\n\r\n        let [lower, upper] = [\r\n            Math.max(0.5-radius, 0.0),  \r\n            Math.min(0.5+radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute extends Randomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 100, radius)\r\n        });\r\n        this.type = 'Seed Crystal Absolute';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density =  this.params.density.value;\r\n\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-radius, 0), Math.min(X+radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-radius, 0), Math.min(Y+radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-radius, 0), Math.min(Z+radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { RuleReader } from './RuleReader';\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor(randomiser_manager) {\r\n    this.entries = [];\r\n    this.randomiser_manager = randomiser_manager;\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.select_entry(0);\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n    let randomiser = this.get_selected_entry().randomiser;\r\n    this.randomiser_manager.select_randomiser(randomiser);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystal());\r\n        this.add_randomiser(new SeedCrystalAbsolute());\r\n\r\n        this.selected_index = 0;\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push({\r\n            name: randomiser.type,\r\n            instance: randomiser\r\n        });\r\n    }\r\n\r\n    select_randomiser(randomiser) {\r\n        let entries = this.entries.map((v, i) => [v, i]);\r\n        let matching_entries = entries.filter(([entry, i]) => entry.instance.type === randomiser.type);\r\n        let other_rands = matching_entries.map(([entry, i]) => [entry.instance, i]);\r\n        other_rands.forEach(([rand, i]) => {\r\n            let params = {};\r\n            Object.entries(randomiser.params).forEach(([key, adjustable]) => {\r\n                params[key] = adjustable.value;\r\n            });\r\n            rand.update(params);\r\n            this.select(i);\r\n        });\r\n    }\r\n\r\n    select(index) {\r\n        this.selected_index = index;\r\n    }\r\n\r\n    set_params(params) {\r\n        let randomiser = this.selected_randomiser;\r\n        randomiser.update(params);\r\n    }\r\n\r\n    get selected_randomiser() {\r\n        return this.entries[this.selected_index].instance;\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.rule_browser = new RuleBrowser(this.randomiser_manager);\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 100;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.show_border = new Toggle(true);\r\n    this.show_render = new Toggle(true);\r\n\r\n    // select amoeba with layer colouring\r\n    this.rule_browser.select_entry(2);\r\n    this.shader_manager.update_params({colouring: 2});\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.randomiser_manager, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    // zoom along minimum axis\r\n    // zoom by maximum axis\r\n    let distance = Math.max(...size);\r\n    let min_index = argmin([...size]); \r\n\r\n    this.camera.view_position = vec3.create();\r\n    this.camera.view_position[min_index] = distance*1.5;\r\n    // glitchy around y axis due to euler angle rotation, so add offset\r\n    if (min_index === 1) {\r\n      this.camera.view_position[2] = 1;\r\n    }\r\n    // vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    // vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  resize() {\r\n    let gl = this.gl;\r\n    let canvas = gl.canvas;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    if (width === canvas.width && height === canvas.height)\r\n      return;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    gl.viewport(0, 0, width, height);\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.resize();\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim.on_render();\r\n    }\r\n  }\r\n}\r\n\r\nfunction argmin(list) {\r\n  let min_i = 0;\r\n  let min_val = list[0];\r\n  for (let i = 1; i < list.length; i++) {\r\n    let val = list[i];\r\n    if (val < min_val) {\r\n      min_val = val;\r\n      min_i = i;\r\n    }\r\n  } \r\n  return min_i;\r\n}\r\n\r\n\r\n\r\n","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_renderer':\r\n                manager.select_renderer(action.value);\r\n                break;\r\n            case 'shader.update_params':\r\n                manager.update_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.set_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}\r\n\r\nexport function gui_reducer(init) {\r\n    let default_settings = init ? init : {\r\n        fullscreen: false,\r\n    };\r\n    const reducer = (settings=default_settings, action) => {\r\n        switch (action.type) {\r\n            case 'fullscreen':\r\n                return {...settings, fullscreen: action.value};\r\n            default:\r\n                break;\r\n        }\r\n        return settings;\r\n    }\r\n    return reducer;\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class MouseController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n    this.listeners = {\r\n      onMouseDown: ev => this.on_mouse_down(ev),\r\n      onMouseUp: ev => this.on_mouse_up(ev),\r\n      onMouseMove: ev => this.on_mouse_move(ev),\r\n      onWheel: ev => this.on_wheel(ev)\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.rotating = false;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class TouchScreenController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n\r\n    this.listeners = {\r\n      onTouchStart: ev => this.on_touch_start(ev), \r\n      onTouchMove: ev => this.on_touch_move(ev),\r\n      onTouchEnd: ev => this.on_touch_end(ev),\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n}","import React from 'react';\r\nimport { App } from '../../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer, randomiser_reducer, gui_reducer } from '../reducers/app';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport { MouseController } from './MouseController';\r\nimport { TouchScreenController } from './TouchScreenController';\r\n\r\nexport class Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouse_controller = new MouseController();\r\n    this.touch_controller = new TouchScreenController();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.props.canvas.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n    let app = this.create_app(gl);\r\n    let camera = app.camera;\r\n    this.mouse_controller.camera = camera;\r\n    this.touch_controller.camera = camera;\r\n  }\r\n\r\n  create_app(gl) {\r\n    let store = this.props.store;\r\n    let app = store.getState().app;\r\n    if (app) {\r\n      return app;\r\n    }\r\n\r\n    app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n      gui: gui_reducer(store.gui),\r\n    });\r\n    store.replaceReducer(reducers);\r\n    app.run();\r\n    return app;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        className=\"w-100 h-100\" ref={this.props.canvas} \r\n        {...this.mouse_controller.listeners} {...this.touch_controller.listeners}></canvas>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Controls } from '../Controls';\r\nimport { useSelector, useStore, useDispatch } from 'react-redux';\r\nimport { Canvas } from './Canvas';\r\n\r\nexport function SimulationView(props) {\r\n  const store = useStore();\r\n  const app = useSelector(store => store.app);\r\n\r\n  function render_float_controls() {\r\n    return (\r\n      <div style={{zIndex:1, position:'absolute', bottom:'1.5rem', alignSelf:'center'}}>\r\n        <div>\r\n          <Controls></Controls>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_fullscreen_button() {\r\n    return (\r\n      <div style={{zIndex:2, position:'absolute', top:'3.5rem', right:'1.5rem'}}>\r\n        <FullScreenButton></FullScreenButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"card shadow\" style={{height:'calc(100vh - 1.0rem)'}}>\r\n      <div className=\"card-header\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Render</h6>\r\n      </div>\r\n      <Canvas store={store} canvas={props.canvas}></Canvas>\r\n      {app ? render_float_controls() : <div></div>}\r\n      {render_fullscreen_button()}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FullScreenButton() {\r\n  const dispatch = useDispatch();\r\n  const fullscreen = useSelector(state => state.gui.fullscreen);\r\n\r\n  const font = !fullscreen ? 'arrows-alt' : 'compress-arrows-alt';\r\n\r\n  const onClick = () => dispatch({type:'fullscreen', value: !fullscreen});\r\n\r\n  return (\r\n    <button className={`btn btn-secondary`} onClick={onClick}>\r\n      <i className={`fas fa-${font} fa-sm`}></i>\r\n    </button>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRulesBrowser\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRulesBrowser\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Rules</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRulesBrowser\">\r\n        <ul className=\"list-group\">{rule_items}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    case 'dropdown':\r\n      return DropdownView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label>{name}: {slider.value.toFixed(2)}</label>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className='form-check' key={key}>\r\n      <input \r\n        type='checkbox' className='form-check-input'\r\n        checked={toggle.value}\r\n        onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      <label className='form-check-label'>{name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownView(dropdown, key, name, valueChanged) {\r\n  let onChange = ev => valueChanged(Number(ev.target.value));\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label className='mr-2'>{name} </label>\r\n      <select className='custom-select custom-select-sm' value={dropdown.value} onChange={onChange}>\r\n        {dropdown.options.map((option, i) => (\r\n          <option value={i} key={`${name}_${key}_${i}`}>{option}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const show_border = useSelector(state => state.app.show_border);\r\n  const show_render = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(show_border, 0, 'Show Border', value => {\r\n        dispatch({type: 'app.show_border', value: value});\r\n      })}\r\n      {RenderAdjustableValue(show_render, 1, 'Show Render', value => {\r\n        dispatch({type: 'app.show_render', value: value});\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\nimport { BorderControls } from './BorderControls';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type);\r\n  const current_renderer_type = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  const card_body = (\r\n    <div>\r\n      <form className='form-inline'>\r\n        {RenderAdjustableValue(renderer_type, 0, 'Renderer', value => {\r\n          dispatch({type:'shader.select_renderer', value:value});\r\n        })}\r\n      </form>\r\n      <BorderControls></BorderControls>\r\n      <hr></hr>\r\n      <ShaderSettings></ShaderSettings>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseGraphicsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseGraphicsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Graphics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseGraphicsMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const params = useSelector(state => state.shader_manager.params);\r\n\r\n  return (\r\n    <form>{Object.entries(params).map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        let data = {};\r\n        data[name] = value;\r\n        dispatch({type: 'shader.update_params', value: data}) \r\n      })\r\n    })}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  const size_changer_form = (\r\n    <form onSubmit={(event) => on_size_change(event)}>\r\n      <div className=\"input-group mb-0\">\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <div className=\"input-group-append\">\r\n          <button type=\"submit\" className='btn btn-primary btn-sm' role=\"button\">Apply</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseSizeChanger\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseSizeChanger\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Size Controls</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseSizeChanger\">\r\n        <div className=\"card-body\">\r\n          {size_changer_form}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  const stats = (\r\n    <div>\r\n      <div>Total Steps: {total_steps}</div>\r\n      <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <a href=\"#collapseStatsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseStatsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Statistics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseStatsMenu\">\r\n        <div className=\"card-body\">\r\n          {stats}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let selected_index = useSelector(state => state.randomiser.selected_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch({type: 'randomiser.select', value: index});\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.name}</option>);\r\n  });\r\n\r\n  const card_body = (\r\n    <div>\r\n      <form>\r\n        <div className='form-inline'>\r\n          <label className='mr-2'>Randomiser</label>\r\n          <select className='custom-select custom-select-sm' value={selected_index} onChange={select_randomiser}>\r\n            {randomiser_options}\r\n          </select>\r\n        </div>\r\n      </form>\r\n      <hr></hr>\r\n      <SeedCrystalEditor></SeedCrystalEditor>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRandomiserMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRandomiserMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Randomiser</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRandomiserMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.selected_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    let new_params = {};\r\n    new_params[name] = Number(value);\r\n    dispatch({\r\n      type: 'randomiser.update', \r\n      value: new_params\r\n    });\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView/SimulationView';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\nimport { RandomiserMenu } from './ui/Randomiser';\r\nimport { gui_reducer } from './ui/reducers/app';\r\n\r\nexport function App() {\r\n  const [store, setStore] = useState(\r\n    createStore(\r\n      () => ({\r\n        gui: gui_reducer()\r\n      }), \r\n      compose(\r\n        applyMiddleware(thunk),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n      )\r\n    )\r\n  );\r\n\r\n  const [canvas, setCanvas] = useState(React.createRef());\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Main canvas={canvas}></Main>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nfunction Main(props) {\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className='col-sm-3'>\r\n        <SizeChanger></SizeChanger>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return (\r\n      <div className=\"col-sm-3\">\r\n        <RulesBrowser></RulesBrowser>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const canvas = <SimulationView canvas={props.canvas}></SimulationView>;\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        {app && !fullscreen ? render_left_panel() : <div></div>}\r\n        <div className=\"col\">{canvas}</div>\r\n        {app && !fullscreen ? render_right_panel() : <div></div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App></App>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}