{"version":3,"sources":["simulation/worker.js","ui/reducers/gui.js","ui/actions/index.js","ui/components/Controls.jsx","gl/Renderer.js","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/rendering/SimulationRenderer.js","app/rendering/ColourMaps.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","app/rendering/shaders/border.js","gl/CubeData.js","app/rendering/BoundingBox.js","app/rendering/Border.js","ui/util/AdjustableValues.js","app/rendering/renderers/Renderer.js","app/rendering/shaders/volume.js","app/rendering/renderers/VolumeRenderer.js","app/rendering/shaders/fragment_shader.js","app/rendering/shaders/vertex_shader.js","app/rendering/renderers/PointCloudRenderer.js","app/rendering/renderers/VoxelRenderer.js","app/rendering/ShaderManager.js","simulation/Serialised.js","app/RuleReader.js","app/entry_browser/Entry.js","app/entry_browser/DefaultEntryBrowser.js","app/entry_browser/StoredEntryBrowser.js","app/entry_browser/EntryBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/components/SimulationView/MouseController.js","ui/components/SimulationView/TouchScreenController.js","ui/components/SimulationView/Canvas.jsx","ui/reducers/index.js","ui/reducers/randomiser_manager.js","ui/reducers/statistics.js","ui/reducers/shader_manager.js","ui/reducers/entry_manager.js","ui/reducers/app.js","ui/components/SimulationView/FullScreenButton.jsx","ui/components/SimulationView/SimulationView.jsx","ui/components/EntryBrowser/EntryEditor.jsx","ui/components/EntryBrowser/Entry.jsx","ui/components/EntryBrowser/AddButton.jsx","ui/components/EntryBrowser/EntryBrowser.jsx","ui/util/Help.jsx","ui/util/AdjustableValueViews.jsx","ui/components/BorderControls.jsx","ui/components/ShaderMenu.jsx","ui/components/SizeChanger.jsx","ui/components/Statistics.jsx","ui/components/Randomiser.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Worker","gui_reducer","init","default_settings","fullscreen","focused","settings","action","type","value","sim","Controls","is_running","useSelector","state","app","dispatch","useDispatch","on_off","run_btn","className","onClick","Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","stats","worker","promise_id","addEventListener","event","msg","data","error","console","recieve","notify","grid","local","ev","message","listeners","Set","listener","set_grid","delete","size","use_worker","rule","randomiser","stop","start","transferables","id","postMessage","Texture3D","shape","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","shader_manager","max_neighbours","data_updated","listen_available_frame","unprocessed_blocks","update_texture_buffer","total_cells","create_textures","state_colour_texture","state_colours_data","Uint8Array","i","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","items","render_updates","cells","neighbours","total_items","performance","now","width","neighbour","floor","min","end","texSubImage3D","request_frame","load_texture_data","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","length","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","layout","attributes","attribute","enableVertexAttribArray","index","has","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","cube_optimized","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","x","y","z","create_cube","centre","Border","renderer","camera","adjusted_size","offset_vec","border","border_shader","push_attribute","add_vertex_buffer","add_uniform","vec4","draw","AdjustableValue","help","_value","Toggle","val","Slider","max","clamp","Dropdown","options","undefined","props","params","key","loc","uniform1i","create_frag_shader","colouring","volume_shader","vert_src","frag_src","xyz","layer","radius","neighbour_and_alive","VolumeRenderer","create_volume_data","ibo","add_params","occlusion","step_factor","create_shader","listen","colour","current_option","add_uniforms","uniform1f","enable","CULL_FACE","n","abs","position","cullFace","FRONT","BACK","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","PointCloudRenderer","point_type","brightness","scaling_enabled","quad","create_quad_data","tri","create_triangle_data","current_data","drawElementsInstanced","VoxelRenderer","shading_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","fog_near","fog_far","sun_strength","sky_strength","global_params","shading","Object","keys","shading_keys","update_props","light_position","create_cube_data","load_params","ShaderManager","renderers","volume","point","voxel","renderer_type","values","forEach","current_renderer","update_params","SerializedRandomiser","SeedCrystalSerialized","density","SeedCrystalAbsoluteSerialized","RuleSerialized","remain","become","NeighbourSerialized","NeighbourRules","RuleReader","string","substrings","replace","remain_alive","become_alive","convert_to_number","retrieve_rule","number_range","N","Array","fill","numbers","number","assert_number","word","isNaN","Number","Entry","ca_string","description","DefaultEntryBrowser","entries","add_entry","select","entry","current_index","selected_entry","StoredEntryBrowser","db_cfg","store","db_request","window","indexedDB","open","onerror","onsuccess","db","result","on_db_load","onupgradeneeded","createObjectStore","keyPath","autoIncrement","createIndex","unique","cfg","transaction","objectStore","corrupted_ids","openCursor","cursor","StoredEntry","ex","continue","purge_corrupted_ids","ids","original","put","Promise","resolve","reject","oncomplete","request","EntryBrowser","browsers","current_browser_key","listen_select","selected_browser","then","err","String","stored","edit","Statistics","completed_blocks","frame_time","total_blocks","total_steps","texture_data_update","texture_data_upload","draw_time","cooldown","setTimeout","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","other","current_randomiser","App","DEPTH_TEST","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","show_border","show_render","randomiser_manager","entry_browser","sim_renderer","set_size","set_randomiser","to_json","update_randomiser","set_rule","randomise","distance","min_index","list","min_i","min_val","argmin","requestAnimationFrame","loop","on_update","canvas","clientWidth","height","clientHeight","viewport","resize","MouseController","onMouseDown","on_mouse_down","onMouseUp","on_mouse_up","onMouseMove","on_mouse_move","onWheel","on_wheel","rotating","zooming","mouse_start_pos","vec2","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","TouchScreenController","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","total_touches","touch_start_pos","touch_zoom_distance","touch_list","touches","touch","zoom_touches","calculate_touch_distance","on_touch_rotate","on_touch_zoom","touch_a","touch_b","dist_a","dist_b","first","second","pos_start","pos_end","Canvas","mouse_controller","touch_controller","current","getContext","create_app","focus_timeout","create_focus_timeout","clearTimeout","delay","change_focus","getState","gui","set_focused","reducer","init_stats","init_app","combineReducers","step","toggle","browser","manager","select_renderer","update_current","create_reducer","replaceReducer","run","ref","React","Component","FullScreenButton","font","is_fullscreen","e","document","documentElement","d","request_fullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancel_fullscreen","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","set_fullscreen","action_fullscreen","SimulationView","useStore","float_controls","style","zIndex","alignSelf","EntryEditor","useState","set_name","set_ca_string","show_actions","set_show_actions","onSubmit","onExit","errors","on_submit","preventDefault","err_fmt","form","onKeyDown","keyCode","onChange","data-toggle","data-placement","data-html","title","str","lines","line","render_errors","actions","onMouseOver","role","onMouseEnter","onMouseLeave","editing","set_editing","set_errors","on_error","edit_entry","on_exit","EntryView","selected","onEdit","copy_success","set_copy_success","del","copy","on_delete","delete_entry","on_copy","navigator","permissions","query","res","clipboard","writeText","on_edit","render_copy_button","select_entry","AddButton","create_entry","textAlign","selected_browser_key","selected_index","browser_key","set_browser_key","get_entries","is_user","browser_keys","render_controls","Help","text","RenderAdjustableValue","adjustable","valueChanged","slider","toFixed","SliderView","checked","ToggleView","dropdown","option","DropdownView","BorderControls","border_checkbox","render_checkbox","ShaderMenu","card_body","ShaderSettings","href","aria-expanded","aria-controls","update_shader_params","SizeChanger","app_size","set_x","set_y","set_z","clamped","size_changer_form","X","Y","Z","on_size_change","progress","RandomiserMenu","randomiser_options","select_randomiser","SeedCrystalEditor","param_options","change_param","createStore","compose","applyMiddleware","thunk","createRef","Main","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6fed5038.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"9c903fdfe86c1905cd1c.worker.js\");\n};","export function gui_reducer(init) {\r\n    let default_settings = {\r\n        fullscreen: false, \r\n        focused: true,\r\n        ...init\r\n    };\r\n    const reducer = (settings=default_settings, action) => {\r\n        switch (action.type) {\r\n            case 'gui.fullscreen':\r\n                return {...settings, fullscreen: action.value};\r\n            case 'gui.focused':\r\n                return {...settings, focused: action.value};\r\n            default:\r\n                break;\r\n        }\r\n        return settings;\r\n    }\r\n    return reducer;\r\n}","// app controls\r\nexport const show_render = is_render => ({\r\n    type: 'app.show_render', value: is_render\r\n})\r\n\r\nexport const show_border = has_border => ({\r\n    type: 'app.show_border', value: has_border\r\n})\r\n\r\nexport const set_size = size => ({\r\n    type: 'app.set_size', value: size\r\n})\r\n\r\n// sim controls\r\nexport const sim = {\r\n    step:       () => ({type: 'step'}),\r\n    randomise:  () => ({type: 'randomise'}),\r\n    clear:      () => ({type: 'clear'}),\r\n    toggle:     () => ({type: 'toggle'}),\r\n    start:      () => ({type: 'start'}),\r\n    stop:       () => ({type: 'stop'}),\r\n}\r\n\r\n// entries\r\nexport const refresh_entries = () => ({\r\n    type: 'entry.refresh'\r\n})\r\n\r\nexport const select_entry = (browser, index) => ({\r\n    type: 'entry.select', value: {key: browser, index}\r\n})\r\n\r\nexport const create_entry = (name, ca_string, on_error) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.create(name, ca_string)\r\n        .then(() => {\r\n            on_error(false);\r\n            dispatch(refresh_entries());\r\n        }, (err) => {\r\n            on_error(err);\r\n        }); \r\n}\r\n\r\nexport const edit_entry = (browser, index, name, ca_string, on_error) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.edit(browser, index, name, ca_string)\r\n        .then(() => {\r\n            on_error(false);\r\n            dispatch(refresh_entries());\r\n        }, (err) => {\r\n            on_error(err);\r\n        });\r\n}\r\n\r\nexport const delete_entry = (browser, index) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.delete(browser, index)\r\n        .then(() => {\r\n            dispatch(refresh_entries());\r\n        })\r\n}\r\n\r\n// randomiser\r\nexport const select_randomiser = index => ({\r\n    type: 'randomiser.select', value: index\r\n})\r\n\r\nexport const update_randomiser = (name, value) => ({\r\n    type: 'randomiser.update', name: name, value: value \r\n})\r\n\r\n// shader\r\nexport const select_renderer = index => ({\r\n    type: 'shader.select_renderer', value: index\r\n})\r\n\r\nexport const update_shader_params = params => ({\r\n    type: 'shader.update_params', value: params\r\n})\r\n\r\n// statistics\r\nexport const update_statistics = stats => ({\r\n    type: 'stats.update', value: stats\r\n})\r\n\r\n// gui\r\nexport const set_fullscreen = fullscreen => ({\r\n    type: 'gui.fullscreen', value: fullscreen\r\n})\r\n\r\nexport const set_focused = focused => ({\r\n    type: 'gui.focused', value: focused\r\n})\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { sim } from '../actions';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.is_running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch(sim.step())}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch(sim.randomise())}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch(sim.clear())}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch(sim.toggle())}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","import worker from 'worker-loader!./worker.js'; // eslint-disable-line import/no-webpack-loader-syntax \r\nimport { Grid3D } from './Grid3D';\r\n\r\n/**\r\n * Frontend to communicate with the web worker\r\n */\r\nexport class CellularAutomaton3D {\r\n    constructor(stats) {\r\n        this.stats = stats;\r\n\r\n        this.worker = worker();\r\n        this.promise_id = 0;\r\n        this.is_running = false;\r\n\r\n        this.worker.addEventListener('message', (event) => {\r\n            let msg = event.data;\r\n\r\n            if (msg.error) {\r\n                // throw msg.error;\r\n                console.error(msg);\r\n                return;\r\n            }\r\n\r\n            switch (msg.action) {\r\n                case 'stats':\r\n                    this.stats.recieve(msg.data);\r\n                    return;\r\n                case 'grid':\r\n                    this.notify(msg.grid, msg.local);\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.worker.addEventListener('error', ev => {\r\n            console.error(ev.message, ev);\r\n        })\r\n\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    notify(grid, local) {\r\n        for (let listener of this.listeners) {\r\n            listener(grid, local);\r\n        }\r\n        this.set_grid(grid);\r\n    }\r\n\r\n    listen_available_frame(listener) {\r\n        return this.listeners.add(listener);\r\n    }\r\n\r\n    unlisten_available_frame(listener) {\r\n        return this.listeners.delete(listener);\r\n    }\r\n\r\n    set_size(size) {\r\n        this.use_worker('set_size', size);\r\n    }\r\n\r\n    set_rule(rule) {\r\n        this.use_worker('set_rule', rule);\r\n    }\r\n\r\n    set_randomiser(randomiser) {\r\n        this.use_worker('set_randomiser', randomiser);\r\n    }\r\n\r\n    clear() {\r\n        this.use_worker('clear');\r\n    }\r\n\r\n    randomise() {\r\n        this.use_worker('randomise');\r\n    }\r\n\r\n    step() {\r\n        this.use_worker('step');\r\n    }\r\n\r\n    start() {\r\n        this.use_worker('start');\r\n        this.is_running = true;\r\n    }\r\n\r\n    stop() {\r\n        this.use_worker('stop');\r\n        this.is_running = false;\r\n    }\r\n\r\n    toggle() {\r\n        this.is_running ? this.stop() : this.start();\r\n    }\r\n\r\n    set_grid(grid) {\r\n        this.use_worker('set_grid', grid, grid.transferables);\r\n    }\r\n\r\n    request_frame() {\r\n        this.use_worker('request_frame');\r\n    }\r\n\r\n    use_worker(action, data={}, transferables=[]) {\r\n\r\n        let id = this.promise_id;\r\n        this.promise_id += 1;\r\n\r\n        this.worker.postMessage({action, id, data}, transferables);\r\n    }\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { Texture3D } from '../../gl/Texture3D';\r\nimport { create_states_texture, create_radius_texture } from './ColourMaps';\r\n\r\n/**\r\n * Collect data from simulation and render it\r\n */\r\nexport class SimulationRenderer {\r\n  constructor(gl, sim, shader_manager, stats) {\r\n    this.gl = gl;\r\n\r\n    this.sim = sim;\r\n    this.shader_manager = shader_manager;\r\n    this.stats = stats;\r\n    this.max_neighbours = 26;\r\n\r\n    this.data_updated = false;\r\n\r\n    this.sim.listen_available_frame((grid, unprocessed_blocks, local) => {\r\n      this.update_texture_buffer(grid, unprocessed_blocks, local);\r\n    });\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n    this.create_textures();\r\n  }\r\n\r\n  create_textures() {\r\n    let gl = this.gl;\r\n\r\n    // colour maps for states and distances\r\n    this.state_colour_texture = create_states_texture(gl);\r\n    this.radius_colour_texture = create_radius_texture(gl);\r\n\r\n    // create 3d texture for rendering cell data\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  \r\n\r\n  // from the transferred grid from webworker, update the texture's buffer\r\n  // we use a rgba buffer, with 8 bits for each channel\r\n  // r = state, g = neighbours, b/a = unused\r\n  update_texture_buffer(grid, local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? grid.render_updates : range(0, grid.count);\r\n    // once updates all rendered, clear it\r\n    if (local) grid.render_updates = new Set();\r\n\r\n    let cells = grid.cells;\r\n    let neighbours = grid.neighbours;\r\n\r\n    let total_items = 0;\r\n\r\n    let start = performance.now();\r\n    const width = this.cell_data_width;\r\n    let cell_data = this.cell_data;\r\n    for (let i of items) {\r\n      let offset = i*width;\r\n      let state = cells[i];\r\n      let neighbour = neighbours[i];\r\n      cell_data[offset+0] = state;\r\n      cell_data[offset+1] = Math.floor(Math.min(neighbour, this.max_neighbours)/this.max_neighbours * 255);\r\n      total_items += 1;\r\n    }\r\n    let end = performance.now();\r\n    this.stats.recieve('texture_data_update', end-start);\r\n\r\n    // data mutated if more than one item\r\n    this.data_updated = this.data_updated || (total_items > 0);\r\n  }\r\n\r\n  // open gl requires us to load data to gpu when texture changed\r\n  load_texture_data() {\r\n    let gl = this.gl;\r\n    if (!this.data_updated) {\r\n      return;\r\n    }\r\n    let start = performance.now();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n    let end = performance.now();\r\n    this.stats.recieve('texture_data_upload', end-start);\r\n    this.data_updated = false;\r\n  }\r\n\r\n  // render the 3d grid\r\n  on_render() {\r\n    let gl = this.gl;\r\n\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.sim.request_frame();\r\n    this.load_texture_data();\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n    {\r\n      let start = performance.now();\r\n      this.shader_manager.on_render();\r\n      let end = performance.now();\r\n      this.stats.recieve('draw_time', end-start);\r\n    }\r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n\r\n","import { Texture2D } from '../../gl/Texture2D';\r\nimport colorsys from 'colorsys';\r\n\r\nexport function create_states_texture(gl) {\r\n  let total_states = 40;\r\n  let state_colours_data = new Uint8Array(4*total_states)\r\n  for (let i = 0; i < total_states-1; i++) {\r\n    let offset = (i+1)*4;\r\n    \r\n    const hue_range = 200;\r\n    let hue = hue_range*(1.0-i/total_states);\r\n    let saturation = 100;\r\n    let value = 100;\r\n    let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n    state_colours_data[offset+0] = r;\r\n    state_colours_data[offset+1] = g;\r\n    state_colours_data[offset+2] = b;\r\n    state_colours_data[offset+3] = 255;\r\n  }\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    state_colours_data[i] = 0;\r\n  }\r\n\r\n  return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n}\r\n\r\nexport function create_radius_texture(gl) {\r\n  let total_states = 360;\r\n  let state_colours_data = new Uint8Array(4*total_states)\r\n  for (let i = 0; i < total_states; i++) {\r\n    let offset = (i)*4;\r\n    \r\n    const hue_range = 360;\r\n    let hue = hue_range*(1.0-i/total_states);\r\n    let saturation = 100;\r\n    let value = 100;\r\n    let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n    state_colours_data[offset+0] = r;\r\n    state_colours_data[offset+1] = g;\r\n    state_colours_data[offset+2] = b;\r\n    state_colours_data[offset+3] = 255;\r\n  }\r\n  \r\n  return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n}","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from './shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","class AdjustableValue {\r\n  constructor(type, value, help) {\r\n    this.type = type;\r\n    this.help = help;\r\n    this._value = value;\r\n    this.listeners = new Set();\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.notify();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  listen(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  unlisten(listener) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  notify() {\r\n    for (let listener of this.listeners) {\r\n      listener(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Toggle extends AdjustableValue {\r\n  constructor(value, help) {\r\n    super('toggle', value, help);\r\n  }\r\n\r\n  // javascript doesnt extend accessors\r\n  set value(val) {\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Slider extends AdjustableValue {\r\n  constructor(min, max, value, help) {\r\n    super('slider', value, help);\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}\r\n\r\nexport class Dropdown extends AdjustableValue {\r\n  constructor(options, index=0, help=undefined) {\r\n    super('dropdown', index, help);\r\n    this.options = options;\r\n  }\r\n\r\n  set value(index) {\r\n    index = Math.min(index, this.options.length-1);\r\n    super.value = index;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  get current_option() {\r\n    let option = this.options[this.value];\r\n    return option;\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../../gl/Uniform\";\r\n\r\n/**\r\n * Given a 3D point cloud, render it\r\n */\r\nexport class Renderer {\r\n    constructor(gl, props, params) {\r\n        this.gl = gl;\r\n        this.props = {\r\n            size: vec3.create(),\r\n            ...props};\r\n        this.params = params;\r\n    }\r\n\r\n    // arbitary values\r\n    update_props(props) {\r\n        this.props = {...this.props, ...props};\r\n    } \r\n\r\n    add_params(params) {\r\n        this.params = {...this.params, ...params};\r\n    }\r\n\r\n    // adjustable values\r\n    update_params(params) {\r\n        for (let key in params) {\r\n            let param = this.params[key];\r\n            param.value = params[key];\r\n        }\r\n        this.params = {...this.params};\r\n    }\r\n\r\n    // base uniforms\r\n    add_uniforms(shader) {\r\n        let gl = this.gl;\r\n        // camera data\r\n        shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.props.camera.model));\r\n        shader.add_uniform(\"uView\", new UniformMat4f(gl, this.props.camera.view));\r\n        shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.props.camera.projection));\r\n        // shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.props.camera.view_position));\r\n        shader.add_uniform(\"uViewPosition\", new Uniform(loc => gl.uniform3f(loc, ...this.props.camera.view_position)));\r\n        shader.add_uniform(\"uGridSize\", new Uniform(loc => gl.uniform3f(loc, this.props.size[0], this.props.size[1], this.props.size[2])));\r\n        // default texture slots\r\n        shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n        shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n        shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    }\r\n\r\n    bind() {\r\n\r\n    }\r\n\r\n    on_render() {\r\n\r\n    }\r\n}","const vert_shader = (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 position;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nout vec3 vPosition;\r\nout vec3 vTexturePosition;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    vec3 vertex_pos = position * uGridSize;\r\n    vec4 pos = MVP * vec4(vertex_pos, 1.0);\r\n    // camera centered around (0,0,0)\r\n    // box has size uGridSize\r\n    vec3 camera_box = abs(uViewPosition);\r\n    vec3 volume_box = abs(uGridSize)/2.0;\r\n\r\n    // determine where to start ray trace if camera is inside the volume\r\n    if (camera_box.x < volume_box.x && camera_box.y < volume_box.y && camera_box.z < volume_box.z) {\r\n        vTexturePosition = uViewPosition/(uGridSize/2.0);\r\n        vTexturePosition += vec3(1.0,1.0,1.0);\r\n        vTexturePosition /= 2.0;\r\n    } else {\r\n        vTexturePosition = position;\r\n    }\r\n\r\n    vPosition = (uModel * vec4(vertex_pos, 1.0)).xyz;\r\n    gl_Position = pos;\r\n}\r\n`\r\n);\r\n\r\nconst create_frag_shader = (colouring) => (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 vPosition;\r\nin vec3 vTexturePosition;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nuniform sampler3D uStateTexture;\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\n\r\nuniform float uOcclusion;\r\nuniform float uStepFactor;\r\n\r\nout vec4 vFragColour;\r\n\r\nvoid main() {\r\n    vec3 view_direction = uViewPosition - vPosition;\r\n    vec3 step_size = normalize(view_direction);\r\n    // vec3 resize = abs(step_size);\r\n    // step_size /= max(resize.x, max(resize.y, resize.z));\r\n    step_size = step_size / uGridSize * uStepFactor;\r\n\r\n    vec3 tex_coords = vTexturePosition;\r\n    while (true) {\r\n        vec4 cell = texture(uStateTexture, tex_coords);\r\n        float state = cell[0];\r\n        float neighbours = cell[1];\r\n        float lighting = 1.0-neighbours*uOcclusion;\r\n        vec4 state_colour = texture(uStateColourTexture, vec2(state, 0.0));\r\n        vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n        ${colouring}\r\n        tex_coords -= step_size;\r\n        if (tex_coords.x < 0.0 || tex_coords.x > 1.0 || \r\n            tex_coords.y < 0.0 || tex_coords.y > 1.0 ||\r\n            tex_coords.z < 0.0 || tex_coords.z > 1.0) \r\n        {\r\n            break;\r\n        }\r\n    }\r\n    vFragColour = vec4(0, 0, 0, 0);\r\n}\r\n`\r\n);\r\n\r\nconst state_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst xyz_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(tex_coords*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst layer_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = mod(radius/10.0, 1.0); \r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst radius_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = length(distance) * 2.0;\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_colouring = create_frag_shader(\r\n`if (neighbour_colour.a != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_and_alive_colouring = create_frag_shader(\r\n`float alpha = state_colour.a * neighbour_colour.a;\r\nif (alpha != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, alpha);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\n\r\nexport const volume_shader = {\r\n    vert_src: vert_shader,\r\n    frag_src: {\r\n        state: state_colouring,\r\n        xyz: xyz_colouring, \r\n        layer: layer_colouring,\r\n        radius: radius_colouring,\r\n        neighbour: neighbour_colouring,\r\n        neighbour_and_alive: neighbour_and_alive_colouring,\r\n    },\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../../gl/Uniform\";\r\nimport { cube_optimized } from \"../../../gl/CubeData\";\r\nimport { volume_shader } from \"../shaders/volume\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../../ui/util/AdjustableValues\";\r\n\r\nexport class VolumeRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        [this.vao, this.ibo, this.index_data] = create_volume_data(gl);\r\n        this.add_params({\r\n            occlusion: new Slider(0, 1, 0.65, \"Amount that nearby cells darken the center cell\"),\r\n            step_factor: new Slider(0.1, 2, 1, \"Decrease to increase quality of volume render\")\r\n        });\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => {\r\n            this.create_shader();\r\n        })\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = volume_shader.vert_src;\r\n        let frag_src = volume_shader.frag_src[colour];\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uStepFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.step_factor.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        gl.enable(gl.CULL_FACE);\r\n        // perform culling check depending on whether camera is inside the viewing box\r\n        let size = this.props.size.map(n => Math.abs(n/2));\r\n        let position = this.props.camera.view_position.map(Math.abs);\r\n        if (position[0] < size[0] && position[1] < size[1] && position[2] < size[2]) {\r\n            gl.cullFace(gl.FRONT);\r\n        } else {\r\n            gl.cullFace(gl.BACK);\r\n        }\r\n\r\n        gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\nconst create_volume_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  \r\n  let vertex_data = cube_optimized.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube_optimized.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: create_no_shader\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain - y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nfloat lighting = 1.0-(neighbours*uOcclusion);\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\nuniform float uOcclusion;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\n\r\nimport { Dropdown, Slider, Toggle } from \"../../../ui/util/AdjustableValues\";\r\nimport { Uniform } from \"../../../gl/Uniform\";\r\n\r\nimport { fragment_shader_src } from \"../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../shaders/vertex_shader\";\r\n\r\nexport class PointCloudRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        this.add_params({\r\n            point_type: new Dropdown(['quad', 'tri'], 0, \"Render quad or triangle for each point\"),\r\n            brightness: new Slider(0, 1, 1, \"Global brightness\"),\r\n            occlusion: new Slider(0, 1, 0.65, \"Amount nearby cells darken the center cell\"),\r\n            scaling_enabled: new Toggle(0, \"Size of cell varies with its value\"),\r\n        });\r\n        this.data = {\r\n            quad: create_quad_data(gl),\r\n            tri: create_triangle_data(gl),\r\n        };\r\n        this.create_shader();\r\n        this.params.colouring.listen(colouring => {\r\n            this.create_shader();\r\n        });\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = vertex_shader_src[colour](true);\r\n        let frag_src = fragment_shader_src.no_shading(true);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n    }\r\n\r\n    get current_data() {\r\n        return this.data[this.params.point_type.current_option];\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        let data = this.current_data;\r\n        data.vao.bind();\r\n        data.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let data = this.current_data;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.drawElementsInstanced(gl.TRIANGLES, data.ibo.count, gl.UNSIGNED_INT, data.index_data, total_cells); \r\n    }\r\n}\r\n\r\n// square for each point\r\nconst create_quad_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                        1, 1, 0.5,\r\n                                        0, 0, 0.5,\r\n                                        1, 0, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}\r\n\r\n// triangle for each point\r\nconst create_triangle_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                        1.5, -0.5, 0.5,\r\n                                        0.5, -1.5, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../../gl/Uniform\";\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\nimport { cube } from \"../../../gl/CubeData\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../../ui/util/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../shaders/vertex_shader\";\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport class VoxelRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, {});\r\n        this.shading_params = {\r\n            ambient_strength: new Slider(0, 1, 0.4, \"Amount of global lighting\"),\r\n            diffuse_strength: new Slider(0, 1, 0.95, \"Amount of light scattering\"),\r\n            specular_strength: new Slider(0, 1, 0.6, \"Amount of light reflection\"),\r\n            specular_power_factor: new Slider(0, 128.0, 4.0, \"Strength of the light reflection\"),\r\n            scaling_enabled: new Toggle(0, \"Change size of cell depending on its value (state or total neighbours)\"),\r\n            fog_near: new Slider(0, 1, 0, \"Minimum distance of fog\"),\r\n            fog_far: new Slider(0, 1, 0, \"Maximum distance of fog\"),\r\n            sun_strength: new Slider(0, 1, 0.95, \"Strength of the sun\"),\r\n            sky_strength: new Slider(0, 1, 0.25, \"Strength of sky lighting\"),\r\n            brightness: new Slider(0, 1, 1.0, \"Amount of global lighting\"),\r\n            occlusion: new Slider(0, 1, 0.0, \"Amount nearby cells darken the center cell\"),\r\n        };\r\n\r\n        this.global_params = {\r\n            ...params,\r\n            shading: new Dropdown(Object.keys(fragment_shader_src), 0, \"Different methods of rendering\"),\r\n        };\r\n\r\n        this.shading_keys = {\r\n          basic: ['occlusion', 'sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n          basic_alternate: ['occlusion', 'ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n          no_shading: ['occlusion', 'brightness', 'scaling_enabled']\r\n        };\r\n\r\n        this.update_props({\r\n            light_position: vec3.create()\r\n        });\r\n        [this.vao, this.ibo, this.index_data] = create_cube_data(gl);\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => this.create_shader());\r\n        this.params.shading.listen(() => this.create_shader());\r\n    }\r\n\r\n    create_shader() {\r\n        this.load_params();\r\n        let colour = this.global_params.colouring.current_option;\r\n        let shading = this.global_params.shading.current_option;\r\n        let vert_src = vertex_shader_src[colour](false);\r\n        let frag_src = fragment_shader_src[shading](false);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    // depending on shading type, we get different parameters to configure\r\n    load_params() {\r\n        let params = {};\r\n        let shading = this.global_params.shading.current_option;\r\n        let keys = this.shading_keys[shading];\r\n        for (let key of keys) {\r\n            params[key] = this.shading_params[key];\r\n        }\r\n        this.params = {...this.global_params, ...params};\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        // lighting\r\n        shader.add_uniform('light.position', new UniformVec3f(gl, this.props.light_position));\r\n        shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n        // // lighting params\r\n        shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.ambient_strength.value)));\r\n        shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.diffuse_strength.value)));\r\n        shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_strength.value)));\r\n        shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_power_factor.value)));\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        // post processing\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n        shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_near.value)));\r\n        shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_far.value)));\r\n        shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sun_strength.value)));\r\n        shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sky_strength.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.drawElementsInstanced(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, this.index_data, total_cells); \r\n    }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","import { vec3 } from 'gl-matrix';\r\n\r\nimport { Dropdown } from '../../ui/util/AdjustableValues';\r\nimport { VolumeRenderer } from './renderers/VolumeRenderer';\r\nimport { PointCloudRenderer } from './renderers/PointCloudRenderer';\r\nimport { VoxelRenderer } from './renderers/VoxelRenderer';\r\nimport { vertex_shader_src } from './shaders/vertex_shader';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    let props = {\r\n      size: this.size,\r\n      camera: this.camera\r\n    };\r\n\r\n    this.global_params = {\r\n      colouring: new Dropdown(Object.keys(vertex_shader_src), 0, 'Method of colouring each cell'),\r\n    };\r\n\r\n    this.renderers = {\r\n      volume: new VolumeRenderer(gl, props, this.global_params),\r\n      point: new PointCloudRenderer(gl, props, this.global_params),\r\n      voxel: new VoxelRenderer(gl, props, this.global_params),\r\n    };\r\n\r\n    {\r\n      const tooltip = (\r\n        \"Method of rendering the grid\\n\"+\r\n        \"Volume: Fastest but low quality (Uses raycasting)\\n\"+\r\n        \"Point: Represents each cell as a floating quad\\n\"+\r\n        \"Voxel: Slowest but highest quality (Like Minecraft)\\n\"\r\n      );\r\n      this.renderer_type = new Dropdown(Object.keys(this.renderers), 0, tooltip);\r\n    }\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    Object.values(this.renderers).forEach(renderer => {\r\n      renderer.update_props({size: size});\r\n    })\r\n  }\r\n\r\n  get current_renderer() {\r\n    let key = this.renderer_type.current_option;\r\n    return this.renderers[key];\r\n  }\r\n\r\n  select_renderer(index) {\r\n    this.renderer_type.value = index;\r\n  }\r\n\r\n  get params() {\r\n    return this.current_renderer.params;\r\n  }\r\n\r\n  update_params(params) {\r\n    this.current_renderer.update_params(params);\r\n  }\r\n\r\n  bind() {\r\n    this.current_renderer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    this.current_renderer.on_render();\r\n  }\r\n\r\n\r\n}\r\n","import  { Slider } from '../ui/util/AdjustableValues';\r\n/**\r\n * Serialisation for web worker\r\n */\r\n\r\n\r\nclass SerializedRandomiser {\r\n    constructor(type, params) {\r\n        this.type = type;\r\n        this.params = params;\r\n    }\r\n\r\n    to_json() {\r\n        let params = {};\r\n        for (let key in this.params) {\r\n            params[key] = this.params[key].value;\r\n        }\r\n        return {\r\n            type: this.type,\r\n            params: params \r\n        };\r\n    }\r\n}\r\n\r\nexport class SeedCrystalSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super('Seed Crystal', {\r\n            density: new Slider(0, 1, density, \"Amount of region to fill\"),\r\n            radius: new Slider(0, 0.5, radius, \"Radius of cube to fill (Relative to size of 3D grid)\"),\r\n        });\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsoluteSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super('Seed Crystal Absolute', {\r\n            density: new Slider(0, 1, density, \"Amount of region to fill\"),\r\n            radius: new Slider(0, 100, radius, \"Radius of cube to fill (Number of cells for radius)\"),\r\n        });\r\n    }\r\n}\r\n\r\nexport class RuleSerialized {\r\n    constructor(remain, become, total_states, neighbour) {\r\n        this.remain = remain;\r\n        this.become = become;\r\n        this.total_states = total_states;\r\n        this.neighbour = neighbour;\r\n    }\r\n\r\n    to_json() {\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class NeighbourSerialized {\r\n    constructor(type, max) {\r\n        this.type = type;\r\n        this.max = max;\r\n    }\r\n    \r\n    to_json() {\r\n        return this;\r\n    }\r\n}","import { RuleSerialized, NeighbourSerialized } from \"../simulation/Serialised\";\r\n\r\nconst NeighbourRules = {\r\n  'M': new NeighbourSerialized('M', 26),\r\n  'VN': new NeighbourSerialized('VN', 6),\r\n};\r\n\r\nexport class RuleReader {\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Expected Range/Range/Number/(VN or M).\\nEg: 0,1-4,5/0-26/5/VN`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour] = substrings;\r\n\r\n\r\n    if (NeighbourRules[neighbour] === undefined) {\r\n      throw new Error(`Invalid neighbourhood. Expected M or VN.`);\r\n    }\r\n\r\n    total_states = this.convert_to_number(total_states);\r\n    if (total_states <= 1) {\r\n      throw new Error(`Invalid total states. Expected 2 or more states`);\r\n    }\r\n\r\n\r\n    neighbour = NeighbourRules[neighbour];\r\n    let remain = this.retrieve_rule(remain_alive);\r\n    let become = this.retrieve_rule(become_alive);\r\n\r\n    return new RuleSerialized(remain, become, total_states, neighbour);\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      // invalid empty number\r\n      if (number.length === 0) {\r\n        throw new Error(`Invalid number, cannot be ''`);\r\n      }\r\n      // If starts with - in front, then not valid\r\n      if (number[0] === '-') {\r\n        throw new Error(`Range must have number in front: ${number}\\nEg. 0-26`);\r\n      }\r\n      // If it ends with -, then not valid\r\n      if (number[number.length-1] === '-') {\r\n        throw new Error(`Range must have number at back: ${number}\\nEg. 0-26`);\r\n      }\r\n      // Check if all are numbers\r\n      let range = number.split('-').map(n => this.convert_to_number(n));\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n    return N;\r\n  }\r\n\r\n  convert_to_number(word) {\r\n    if (isNaN(word)) {\r\n      throw new Error(`${word} is not a valid number`);\r\n    }\r\n    return Number(word);\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n}","import { RuleReader } from \"../RuleReader\";\r\n\r\nexport class Entry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    let reader = new RuleReader();\r\n    let rule = reader.generate(ca_string);\r\n    this.rule = rule;\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","import { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"../../simulation/Serialised\";\r\nimport { Entry } from \"./Entry\";\r\n\r\nexport class DefaultEntryBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n    this.listeners = new Set();\r\n    // our default entries\r\n    this.add_entry(new Entry('Amoeba-1',  '9-26/5-7,12-13,15/16/M', new SeedCrystalAbsoluteSerialized(0.3, 5)));\r\n    this.add_entry(new Entry('445',       '4/4/5/M',                new SeedCrystalSerialized(0.05, 0.5)));\r\n    this.add_entry(new Entry('Builder 2', '6,9/4,6,8-9/10/M',       new SeedCrystalAbsoluteSerialized(0.35, 7)));\r\n    this.add_entry(new Entry('Crystal Growth 1', '0-6/1,3/2/VN',    new SeedCrystalAbsoluteSerialized(1.0, 1)));\r\n    this.add_entry(new Entry('Crystal Growth 2', '1-3/1-3/5/VN',    new SeedCrystalAbsoluteSerialized(1.0, 1)));\r\n    this.add_entry(new Entry('Clouds 1',  '13-26/13-14,17-19/2/M',  new SeedCrystalSerialized(0.5, 0.5)));\r\n    this.add_entry(new Entry('Slow Decay', '8,11,13-26/13-26/5/M',  new SeedCrystalSerialized(0.45, 1.0)));\r\n    this.add_entry(new Entry('Spiky Growth 1', '7-26/4,12-13,15/10/M', new SeedCrystalAbsoluteSerialized(0.32, 7)));\r\n    this.add_entry(new Entry('Ripple Cube', '8-26/4,12-13,15/10/M', new SeedCrystalAbsoluteSerialized(0.35, 14)));\r\n    this.add_entry(new Entry('Amoeba-2',  '9-26/5-7,12-13,15/5/M',  new SeedCrystalAbsoluteSerialized(0.3, 5)));\r\n    this.add_entry(new Entry('Builder 1', '6,9/4,6,8-9/10/M',       new SeedCrystalAbsoluteSerialized(0.35, 7)));\r\n    this.add_entry(new Entry('Pyroclastic', '4-7/6-8/10/M',         new SeedCrystalAbsoluteSerialized(0.2, 5)));\r\n    this.add_entry(new Entry('678 678',   '6-8/6-8/3/M',            new SeedCrystalSerialized(0.3)));\r\n\r\n    this.select(0);\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  get selected_entry() {\r\n    return this.entries[this.current_index];\r\n  }\r\n\r\n  select(idx) {\r\n    this.current_index = idx;\r\n    let entry = this.selected_entry;\r\n    this.notify(entry);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    this.entries.push(entry);\r\n  }\r\n}","import { Entry } from \"./Entry\";\r\n\r\nexport class StoredEntryBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n\r\n    this.listeners = new Set();\r\n\r\n    this.db_cfg = {\r\n      name: 'entries_db',\r\n      store: 'entries_os'\r\n    };\r\n\r\n    let db_request = window.indexedDB.open(this.db_cfg.name, 1);\r\n    db_request.onerror = (ev) => console.error(`${this.db_cfg.name} failed to open`);\r\n    db_request.onsuccess = (ev) => {\r\n      this.db = db_request.result;\r\n      this.on_db_load();\r\n    };\r\n\r\n    db_request.onupgradeneeded = (ev) => {\r\n      let db = ev.target.result;\r\n      let store = db.createObjectStore(this.db_cfg.store, { keyPath:'id', autoIncrement: true});\r\n      store.createIndex('name', 'name', {unique: false});\r\n      store.createIndex('ca_string', 'ca_string', {unique: false});\r\n    }\r\n\r\n    this.current_index = -1;\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  on_db_load() {\r\n    // this.add_user_entry('Test', '0-6/1,3/2/VN');\r\n    let cfg = this.db_cfg;\r\n    let store = this.db.transaction(cfg.store).objectStore(cfg.store);\r\n    let corrupted_ids = [];\r\n    store.openCursor().onsuccess = (ev) => {\r\n      let cursor = ev.target.result;\r\n      if (cursor) {\r\n        let {name, ca_string, id} = cursor.value;\r\n        try {\r\n          let entry = new StoredEntry(name, ca_string, id);\r\n          this.add_entry(entry);\r\n        } catch (ex) {\r\n          corrupted_ids.push(id);\r\n        }\r\n        cursor.continue();\r\n        return;\r\n      }      \r\n      // end of cursor list, this lets remove all corrupted ids\r\n      this.purge_corrupted_ids(corrupted_ids);\r\n    }\r\n  }\r\n\r\n  purge_corrupted_ids(ids) {\r\n    let cfg = this.db_cfg;\r\n    let store = this.db.transaction([cfg.store], 'readwrite').objectStore(cfg.store);\r\n    for (let id of ids) {\r\n      let request = store.delete(id);\r\n    }\r\n  }\r\n\r\n  edit(index, name, ca_string) {\r\n    let original = this.entries[index];\r\n    if (!original) return;\r\n\r\n    let replace = new StoredEntry(name, ca_string, original.id);\r\n\r\n    let db = this.db;\r\n    if (!db) {\r\n      console.error(`${cfg.store} failed to load`);\r\n      return;\r\n    } \r\n    let cfg = this.db_cfg;\r\n\r\n    let data = {id: original.id, name, ca_string};\r\n    let transaction = db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    let request = store.put(data);\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n      transaction.oncomplete = (ev) => {\r\n        this.entries[index] = replace;\r\n        this.entries = [...this.entries];\r\n        if (this.current_index === index) {\r\n          this.notify(replace);\r\n        }\r\n        resolve(true);\r\n      }\r\n      transaction.onerror = () => {\r\n        console.error(`Failed to update entry: ${original} to ${replace}`);\r\n        reject(`Failed to update entry: ${original} to ${replace}`);\r\n      }\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  create(name, ca_string) {\r\n    // id is undefined, add in later\r\n    let entry = new StoredEntry(name, ca_string);\r\n\r\n    let db = this.db;\r\n    let cfg = this.db_cfg;\r\n    if (!db) {\r\n      console.error(`${cfg.store} failed to load`);\r\n      return;\r\n    }\r\n    let data = {name, ca_string};\r\n    let transaction = db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    let request = store.add(data);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = (ev) => {\r\n        let id = ev.target.result;\r\n        entry.id = id;\r\n        this.add_entry(entry);\r\n        resolve(true);\r\n      }\r\n      request.onerror = () => {\r\n        console.error(`Failed to add entry: ${name}, ${ca_string}`);\r\n        reject(`Failed to add entry: ${name}, ${ca_string}`);\r\n      }\r\n    });\r\n }\r\n\r\n  delete(idx) {\r\n    // ignore invalid index\r\n    if (idx < 0 || idx >= this.entries.length) return;\r\n    // map expected current index after removal\r\n    let current_index = this.current_index;\r\n    // if same item, then we want the index to point to same location in list after change\r\n    // this will be the next item\r\n    if (this.current_index === idx) {\r\n      current_index = this.current_index;\r\n    // if an item behind selected item, then we want to keep the selected item\r\n    // this will be now an index behind\r\n    } else if (this.current_index > idx) {\r\n      current_index = this.current_index-1; \r\n    // if selected item behind deleted item, then dont do anything\r\n    } else {\r\n      current_index = this.current_index;\r\n    }\r\n    // remove from db\r\n    let entry = this.entries[idx];\r\n    let cfg = this.db_cfg;\r\n    let transaction = this.db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    let request = store.delete(entry.id);\r\n\r\n    // if request was successful, then modify entries array inplace\r\n    // send notification\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        let entries = this.entries;\r\n        this.entries = [...entries.slice(0, idx), ...entries.slice(idx + 1)];\r\n        // always try to figure out a viable selection before defaulting to nothing\r\n        current_index = Math.max(current_index, 0);\r\n        current_index = Math.min(current_index, this.entries.length-1);\r\n        // if no entries left, then undefined entry\r\n        if (this.entries.length === 0) {\r\n          current_index = -1;\r\n        }\r\n        this.select(current_index);\r\n        resolve(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  get selected_entry() {\r\n    return this.entries[this.current_index];\r\n  }\r\n\r\n  select(idx) {\r\n    this.current_index = idx;\r\n    if (this.current_index < 0 || this.current_index >= this.entries.length) {\r\n      this.notify(undefined);\r\n      return;\r\n    }\r\n    let entry = this.selected_entry;\r\n    this.notify(entry);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    this.entries = [...this.entries, entry]; \r\n  }\r\n}\r\n\r\nclass StoredEntry extends Entry {\r\n  constructor(name, ca_string, id) {\r\n    super(name, ca_string);\r\n    this.id = id;\r\n  }\r\n}","import { DefaultEntryBrowser } from './DefaultEntryBrowser';\r\nimport { StoredEntryBrowser } from './StoredEntryBrowser';\r\n\r\nexport class EntryBrowser {\r\n  constructor() {\r\n    this.listeners = new Set();\r\n\r\n    this.browsers = {\r\n      'Default': new DefaultEntryBrowser(),\r\n      'User': new StoredEntryBrowser(),\r\n    };\r\n\r\n    this.current_browser_key = 'System';\r\n\r\n    this.browsers['Default'].listen_select((entry) => {\r\n      this.notify(entry);\r\n    })\r\n\r\n    this.browsers['User'].listen_select((entry) => {\r\n      if (entry === undefined) {\r\n        this.select('Default', 0);  \r\n      } else {\r\n        this.notify(entry);\r\n      }\r\n    })\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  get selected_entry() {\r\n    let entry = this.selected_browser.selected_entry;\r\n    return entry;\r\n  }\r\n\r\n  get selected_browser() {\r\n    let browser = this.browsers[this.current_browser_key];\r\n    return browser;\r\n  }\r\n\r\n  get_entries(key) {\r\n    return this.browsers[key].entries;\r\n  }\r\n\r\n  select(key, index) {\r\n    this.current_browser_key = key;\r\n    this.selected_browser.select(index);\r\n  }\r\n\r\n  // wrap around stored database\r\n  delete(key, index) {\r\n    return new Promise((resolve, reject) => {\r\n      if (key !== 'User') {\r\n        reject('Can only delete user defined rules');\r\n        return;\r\n      }\r\n      let stored = this.browsers['User'];\r\n      stored.delete(index)\r\n        .then(v => resolve(v), err => reject(err));\r\n    });\r\n  }\r\n\r\n  create(name, ca_string) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let stored = this.browsers['User'];\r\n        stored.create(name, ca_string)\r\n          .then(v => resolve(v), err => reject(err));\r\n      } catch (ex) {\r\n        reject(String(ex.message));\r\n      }\r\n    });\r\n  }\r\n\r\n  edit(key, index, name, ca_string) {\r\n    let stored = this.browsers[key];\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let promise = stored.edit(index, name, ca_string);\r\n        promise.then((val) => resolve(val), (err) => reject(err));\r\n      } catch (ex) {\r\n        reject(String(ex.message));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { update_statistics } from \"../ui/actions\";\r\n\r\nexport class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n            texture_data_update: 0,\r\n            texture_data_upload: 0,\r\n            draw_time: 0,\r\n        };\r\n        this.cooldown = false;\r\n    }\r\n\r\n    force_update() {\r\n        if (this.cooldown) {\r\n            return;\r\n        }\r\n\r\n        this.store.dispatch((dispatch) => {\r\n            this.cooldown = true;\r\n            setTimeout(() => {\r\n                dispatch(update_statistics(this));\r\n                setTimeout(() => this.cooldown = false, 30);\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"../simulation/Serialised\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystalSerialized());\r\n        this.add_randomiser(new SeedCrystalAbsoluteSerialized());\r\n\r\n        this.current_index = 0;\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    listen_select(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    notify(randomiser) {\r\n        for (let listener of this.listeners) {\r\n            listener(randomiser);\r\n        }\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push(randomiser);\r\n    }\r\n\r\n    update_randomiser(randomiser) {\r\n        let {type, params} = randomiser;\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            let other = this.entries[i];\r\n            if (other.type !== type) continue;\r\n\r\n            for (let key in params) {\r\n                other.params[key].value = params[key].value;\r\n            }\r\n            other.params = {...other.params};\r\n            this.current_index = i;\r\n            break;\r\n        }\r\n        this.notify(this.current_randomiser);\r\n    }\r\n\r\n    update_current(key, value) {\r\n        let param = this.current_randomiser.params[key];\r\n        param.value = value;\r\n        this.current_randomiser.params = {...this.current_randomiser.params}; // force update react\r\n    }\r\n\r\n    select(index) {\r\n        this.current_index = index;\r\n        this.notify(this.current_randomiser);\r\n    }\r\n\r\n    get current_randomiser() {\r\n        return this.entries[this.current_index];\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './rendering/SimulationRenderer';\r\nimport { Border } from './rendering/Border';\r\nimport { ShaderManager } from './rendering/ShaderManager';\r\nimport { EntryBrowser } from './entry_browser/EntryBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/util/AdjustableValues';\r\n\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    this.show_border = new Toggle(true, \"Show an outlining border\");\r\n    this.show_render = new Toggle(true, \"Show the grid of cells (Disable if you want to see result later)\");\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.entry_browser = new EntryBrowser();\r\n    this.stats = new Statistics(this.store);\r\n\r\n    this.sim = new CellularAutomaton3D(this.stats);\r\n    this.sim_renderer = new SimulationRenderer(gl, this.sim, this.shader_manager, this.stats);\r\n\r\n    let x = 100;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.randomiser_manager.listen_select((randomiser) => {\r\n      this.sim.set_randomiser(randomiser.to_json());\r\n    });\r\n\r\n    this.entry_browser.listen_select((entry) => {\r\n      let randomiser = entry.randomiser;\r\n      let rule = entry.rule;\r\n      if (randomiser) {\r\n        this.randomiser_manager.update_randomiser(randomiser);\r\n      }\r\n      if (rule) {\r\n        this.sim.set_rule(rule.to_json());\r\n        this.sim_renderer.max_neighbours = rule.neighbour.max;\r\n      }\r\n    });\r\n\r\n    // select amoeba with layer colouring\r\n    this.entry_browser.select('Default', 0);\r\n    this.shader_manager.update_params({colouring: 0});\r\n    this.randomise();\r\n  }\r\n\r\n  randomise() {\r\n    let randomiser = this.randomiser_manager.current_randomiser;\r\n    this.sim.set_randomiser(randomiser.to_json());\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n    this.size = size;\r\n    this.sim.set_size(size);\r\n    this.sim_renderer.set_size(size);\r\n    this.shader_manager.set_size(size);\r\n\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // zoom along minimum axis\r\n    // zoom by maximum axis\r\n    let distance = Math.max(...size);\r\n    let min_index = argmin([...size]); \r\n\r\n    this.camera.view_position = vec3.create();\r\n    this.camera.view_position[min_index] = distance*1.5;\r\n    // glitchy around y axis due to euler angle rotation, so add offset\r\n    if (min_index === 1) {\r\n      this.camera.view_position[2] = 1;\r\n    }\r\n  }\r\n\r\n  // try render each frame\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  // when resizing the canvas element, we need to update opengl viewport\r\n  resize() {\r\n    let gl = this.gl;\r\n    let canvas = gl.canvas;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    if (width === canvas.width && height === canvas.height)\r\n      return;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    gl.viewport(0, 0, width, height);\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.resize();\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim_renderer.on_render();\r\n    }\r\n  }\r\n}\r\n\r\nfunction argmin(list) {\r\n  let min_i = 0;\r\n  let min_val = list[0];\r\n  for (let i = 1; i < list.length; i++) {\r\n    let val = list[i];\r\n    if (val < min_val) {\r\n      min_val = val;\r\n      min_i = i;\r\n    }\r\n  } \r\n  return min_i;\r\n}\r\n\r\n\r\n\r\n","import { vec2 } from 'gl-matrix';\r\n\r\nexport class MouseController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n    this.listeners = {\r\n      onMouseDown: ev => this.on_mouse_down(ev),\r\n      onMouseUp: ev => this.on_mouse_up(ev),\r\n      onMouseMove: ev => this.on_mouse_move(ev),\r\n      onWheel: ev => this.on_wheel(ev)\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.rotating = false;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class TouchScreenController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n\r\n    this.listeners = {\r\n      onTouchStart: ev => this.on_touch_start(ev), \r\n      onTouchMove: ev => this.on_touch_move(ev),\r\n      onTouchEnd: ev => this.on_touch_end(ev),\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n}","import React from 'react';\r\nimport { App } from '../../../app/App';\r\n\r\nimport { MouseController } from './MouseController';\r\nimport { TouchScreenController } from './TouchScreenController';\r\n\r\nimport { create_reducer } from '../../reducers';\r\n\r\nimport \"./Canvas.css\";\r\nimport { set_focused } from '../../actions';\r\n\r\nexport class Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouse_controller = new MouseController();\r\n    this.touch_controller = new TouchScreenController();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.props.canvas.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n    let app = this.create_app(gl);\r\n    let camera = app.camera;\r\n    this.mouse_controller.camera = camera;\r\n    this.touch_controller.camera = camera;\r\n    this.focus_timeout = this.create_focus_timeout();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.focus_timeout);\r\n  }\r\n\r\n  create_focus_timeout(delay=3000) {\r\n    let id = setTimeout(() => this.change_focus(false), delay);\r\n    return id;\r\n  }\r\n\r\n  // mouse moves, update focus\r\n  on_mouse_move() {\r\n    clearTimeout(this.focus_timeout);\r\n    this.focus_timeout = this.create_focus_timeout();\r\n    this.change_focus(true);\r\n  }\r\n\r\n  change_focus(focused) {\r\n    let store = this.props.store;\r\n    let original = store.getState().gui.focused;\r\n    if (original === focused) {\r\n      return;\r\n    }\r\n    store.dispatch(set_focused(focused));\r\n  }\r\n\r\n  create_app(gl) {\r\n    let store = this.props.store;\r\n    let app = store.getState().app;\r\n    if (app) {\r\n      return app;\r\n    }\r\n\r\n    app = new App(gl, store);\r\n    let reducer = create_reducer(app);\r\n    store.replaceReducer(reducer);\r\n    app.run();\r\n    return app;\r\n  }\r\n\r\n  render() {\r\n    const listener = ev => this.on_mouse_move();\r\n    const hooks = ['onMouseMove', 'onMouseDown', 'onMouseUp', 'onTouchMove', 'onTouchStart', 'onTouchEnd'];\r\n    let listeners = {};\r\n    for (let hook of hooks) {\r\n      listeners[hook] = listener;\r\n    }\r\n    \r\n    return (\r\n      <div className='w-100 h-100' {...listeners}>\r\n        <canvas \r\n          className=\"w-100 h-100\" ref={this.props.canvas} \r\n          {...this.mouse_controller.listeners} {...this.touch_controller.listeners}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { app_reducer } from './app';\r\nimport { entry_reducer } from './entry_manager';\r\nimport { shader_reducer } from './shader_manager';\r\nimport { stats_reducer } from './statistics';\r\nimport { randomiser_reducer } from './randomiser_manager';\r\nimport { gui_reducer } from './gui';\r\n\r\nexport function create_reducer(app) {\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      entry_browser: entry_reducer(app.entry_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n      gui: gui_reducer(),\r\n    });\r\n\r\n    return reducers;\r\n}\r\n\r\nexport function create_preinit_reducer() {\r\n    return combineReducers({\r\n        gui: gui_reducer()\r\n    })\r\n}\r\n","export function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.update_current(action.name, action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}","export function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}","export function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_renderer':\r\n                manager.select_renderer(action.value);\r\n                break;\r\n            case 'shader.update_params':\r\n                manager.update_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}","export function entry_reducer(entry_browser) {\r\n    const reducer = (browser=entry_browser, action) => {\r\n        switch (action.type) {\r\n            case 'entry.refresh':\r\n                return browser;\r\n            case 'entry.select':\r\n                {\r\n                    let {key, index} = action.value;\r\n                    browser.select(key, index);\r\n                }\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { set_fullscreen as action_fullscreen } from '../../actions';\r\n\r\nexport function FullScreenButton() {\r\n  const dispatch = useDispatch();\r\n  const fullscreen = useSelector(state => state.gui.fullscreen);\r\n\r\n  const font = !fullscreen ? 'arrows-alt' : 'compress-arrows-alt';\r\n\r\n  function set_fullscreen(is_fullscreen) {\r\n    const e = document.documentElement;\r\n    const d = document;\r\n    const request_fullscreen = e.requestFullscreen || e.mozRequestFullScreen || e.webkitRequestFullScreen || e.msRequestFullscreen;\r\n    const cancel_fullscreen = d.exitFullscreen || d.mozCancelFullScreen || d.webkitCancelFullScreen || d.msExitFullscreen;\r\n    if (is_fullscreen) request_fullscreen.bind(e)();\r\n    else               cancel_fullscreen.bind(d)();\r\n  }\r\n\r\n  const onClick = () => {\r\n    let is_fullscreen = !fullscreen;\r\n    set_fullscreen(is_fullscreen);\r\n    dispatch(action_fullscreen(is_fullscreen));\r\n  };\r\n\r\n  return (\r\n    <button className={`btn btn-secondary`} onClick={onClick}>\r\n      <i className={`fas fa-${font} fa-sm`}></i>\r\n    </button>\r\n  );\r\n}","import React, { useState }  from 'react';\r\nimport { Controls } from '../Controls';\r\nimport { useSelector, useStore, useDispatch } from 'react-redux';\r\nimport { Canvas } from './Canvas';\r\nimport { FullScreenButton } from './FullScreenButton';\r\n\r\nexport function SimulationView(props) {\r\n  const dispatch = useDispatch();\r\n  const store = useStore();\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  const focused = useSelector(store => store.gui.focused);\r\n\r\n  let float_controls = (fullscreen && !focused) ? 'fade' : '';\r\n\r\n  function render_float_controls() {\r\n    return (\r\n      <div className={float_controls} style={{zIndex:1, position:'absolute', bottom:'1.5rem', alignSelf:'center'}}>\r\n        <div>\r\n          <Controls></Controls>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_fullscreen_button() {\r\n    return (\r\n      <div className={float_controls} style={{zIndex:2, position:'absolute', top:'1.5rem', right:'1.5rem'}}>\r\n        <FullScreenButton></FullScreenButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"card shadow h-100\">\r\n      <Canvas store={store} canvas={props.canvas}></Canvas>\r\n      {app ? render_float_controls() : <div></div>}\r\n      {render_fullscreen_button()}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport \"./Entry.css\";\r\n\r\nexport function EntryEditor(props) {\r\n  const [name, set_name] = useState(props.name || '');\r\n  const [ca_string, set_ca_string] = useState(props.ca_string || '');\r\n  let [show_actions, set_show_actions] = useState(false);\r\n  const onSubmit = props.onSubmit;\r\n  const onExit = props.onExit;\r\n  const errors = props.errors;\r\n\r\n  function on_key_down(ev) {\r\n    if(ev.keyCode === 13) {\r\n      on_submit(ev);\r\n    }\r\n  }\r\n\r\n  function on_submit(ev) {\r\n    if (ev) ev.preventDefault();\r\n    onSubmit && onSubmit(name, ca_string);\r\n  }\r\n\r\n  function on_exit() {\r\n    onExit && onExit();\r\n  }\r\n \r\n  function render_errors(str) {\r\n    let lines = String(str).split('\\n');\r\n    return (\r\n      <div className=\"invalid-feedback\">\r\n        {lines.map((line, i) => <div key={i}>{line}</div>)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const err_fmt = errors ? 'is-invalid' : '';\r\n\r\n  const tooltip = (\r\n    \"[Remain Alive]/[Become Alive]/[Total States]/[Neighbourhood]\\n\"+\r\n    \"[Remain Alive]: Range where a cell stays alive. E.g. 0-3,9\\n\"+\r\n    \"[Become Alive]: Range where a cell goes from dead to alive. E.g. 0-3,9\\n\"+\r\n    \"[Total States]: Number of states a cell goes through when dying. E.g. 10\\n\"+\r\n    \"[Neighbourhood]: Type of neighbour counting. 'M' counts all 26, and 'VN' counts 6\"\r\n  )\r\n\r\n  const form = (\r\n    <form onSubmit={on_submit} onKeyDown={on_key_down} className=\"w-75\">\r\n      <div className=\"form-group row mb-0 mt-0\">\r\n        <label className=\"col-sm-3 col-form-label py-0\">Name:</label>\r\n        <div className=\"col-sm py-0\">\r\n          <input type=\"text\" className=\"form-control form-control-sm w-100 py-0\" value={name} onChange={ev => set_name(ev.target.value)}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row mt-0 mb-0\">\r\n        <div className=\"col-sm-3 col-form-label py-0\">\r\n        <label className=\"mr-1\">Rule:</label>\r\n        <span className=\"\" data-toggle=\"tooltip\" data-placement=\"left\" data-html={true} title={tooltip}>\r\n          <i className=\"fas fa-question-circle\"></i>\r\n        </span>\r\n\r\n        </div>\r\n        <div className=\"col-sm py-0\">\r\n          <input type=\"text\" className={`form-control form-control-sm w-100 py-0 ${err_fmt}`} id=\"ca_string\" value={ca_string} onChange={ev => set_ca_string(ev.target.value)}/>\r\n          {errors && render_errors(errors)}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const actions = (\r\n    <div \r\n      className={`actions ${!show_actions && 'fade'}`} \r\n      onMouseOver={() => set_show_actions(true)}>\r\n      <button className=\"btn btn-circle btn-sm btn-warning\" role=\"button\" onClick={on_exit}><i className=\"fas fa-ban\"></i></button>\r\n      <button className=\"btn btn-circle btn-sm btn-success\" role=\"button\" onClick={on_submit}><i className=\"fas fa-check-circle\"></i></button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div \r\n      onMouseEnter={() => set_show_actions(true)}\r\n      onMouseLeave={() => set_show_actions(false)}>\r\n      {form}\r\n      {actions}\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport \"./Entry.css\";\r\nimport { select_entry, edit_entry, delete_entry } from '../../actions';\r\nimport { EntryEditor } from './EntryEditor';\r\n\r\n/**\r\n * Swap between a basic view and editable form \r\n */\r\nexport function Entry(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const entry = props.entry;\r\n  const {browser, index} = props;\r\n\r\n  // for editing\r\n  let [editing, set_editing] = useState(false);\r\n  let [errors, set_errors] = useState(undefined);\r\n\r\n  let [name, set_name] = useState(entry.name);\r\n  let [ca_string, set_ca_string] = useState(entry.description);\r\n\r\n  const on_submit = (name, ca_string) => {\r\n    dispatch(edit_entry(browser, index, name, ca_string, err => {\r\n      set_errors(err);\r\n      err ? set_editing(true) : set_editing(false);\r\n      if (!err) {\r\n        set_name(name);\r\n        set_ca_string(ca_string);\r\n      }\r\n    }))\r\n  }\r\n\r\n  const on_exit = () => {\r\n    set_editing(false);\r\n    set_errors(false);\r\n  }\r\n\r\n  const render_editable_body = () => (\r\n    <li className=\"list-group-item\">\r\n      <EntryEditor name={name} ca_string={ca_string} onSubmit={on_submit} onExit={on_exit} errors={errors}></EntryEditor>\r\n    </li>\r\n  )\r\n\r\n  const render_normal_body = () => (\r\n    <EntryView \r\n      browser={browser} index={index} \r\n      name={name} ca_string={ca_string}\r\n      actions={props.actions}\r\n      selected={props.selected}\r\n      onEdit={() => set_editing(true)}></EntryView>\r\n  );\r\n  \r\n  return editing ? render_editable_body() : render_normal_body();\r\n}\r\n\r\n/**\r\n * Render entry with controls for editing, deleting and copying \r\n */\r\nfunction EntryView(props) {\r\n  let dispatch = useDispatch();\r\n  let [show_actions, set_show_actions] = useState(false);\r\n  let [copy_success, set_copy_success] = useState(false);\r\n\r\n  const {browser, index} = props;\r\n  const {name, ca_string} = props;\r\n  const selected = props.selected;\r\n  const {del, copy, edit} = props.actions;\r\n  const onEdit = props.onEdit;\r\n\r\n\r\n  const on_select = ev => {\r\n    dispatch(select_entry(browser, index));\r\n    ev.preventDefault();\r\n  }\r\n  // base actions\r\n  const on_delete = ev => {\r\n    dispatch(delete_entry(browser, index));\r\n    ev.preventDefault();\r\n  }\r\n\r\n  const on_copy = ev => {\r\n    navigator.permissions.query({name: 'clipboard-write'}).then(res => {\r\n      if (res.state === 'granted' || res.state === 'prompt') {\r\n        navigator.clipboard.writeText(ca_string)\r\n          .then(() => set_copy_success(true));\r\n      }\r\n    });\r\n    ev.preventDefault();\r\n  }\r\n\r\n  const on_edit = ev => {\r\n    ev.preventDefault();\r\n    onEdit && onEdit();\r\n  }\r\n\r\n  const render_copy_tooltip = () => (\r\n    <div className={`tooltip copy-text ${copy_success ? 'show' : 'fade'}`} role=\"tooltip\">\r\n      <div className=\"tooltip-inner\">Copied {name}!</div>\r\n    </div>\r\n  );\r\n\r\n  const render_copy_button = () => ( \r\n    <div className=\"d-inline\">\r\n      <button className=\"btn btn-circle btn-sm btn-light\" role=\"button\" \r\n          onClick={on_copy} onMouseLeave={() => set_copy_success(false)}>\r\n        <span className=\"icon text-gray-600\">\r\n          <i className=\"fas fa-copy\"></i>\r\n        </span>\r\n      </button>\r\n      {render_copy_tooltip()}\r\n    </div>\r\n  );\r\n\r\n\r\n  const render_actions = () => (\r\n    <div className={`actions ${!show_actions && 'fade'}`} onMouseOver={() => set_show_actions(true)}>\r\n      {copy && render_copy_button()}\r\n      {del && <button className=\"btn btn-circle btn-sm btn-danger\" role=\"button\" onClick={on_delete}><i className=\"fas fa-trash\"></i></button>}\r\n      {edit && <button className=\"btn btn-circle btn-sm btn-primary\" role=\"button\" onClick={on_edit}><i className=\"fas fa-edit\"></i></button>}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <li className={`list-group-item ${selected ? 'active' : ''}`}>\r\n      <div \r\n        onMouseEnter={() => set_show_actions(true)}\r\n        onMouseLeave={() => set_show_actions(false)}>\r\n        <div onClick={on_select}>\r\n          <div>Name: {name}</div>\r\n          <div>Rule: {ca_string}</div>\r\n        </div>\r\n        {render_actions()}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { EntryEditor } from './EntryEditor';\r\nimport { create_entry } from '../../actions';\r\n\r\nexport function AddButton() {\r\n  let dispatch = useDispatch();\r\n  let [editing, set_editing] = useState(false);\r\n  let [errors, set_errors] = useState(false);\r\n\r\n  const render_add_button = () => (\r\n    <li className=\"list-group-item\" style={{textAlign:'center'}}>\r\n      <button className=\"btn btn-circle btn-md btn-secondary shadow\" onClick={() => set_editing(true)}>\r\n        <span className=\"icon text-white-600 m-0\">\r\n          <i className=\"fas fa-plus\"></i>\r\n        </span>\r\n      </button>\r\n    </li>\r\n  );\r\n\r\n  const on_submit = (name, ca_string) => {\r\n    dispatch(create_entry(name, ca_string, err => {\r\n      set_errors(err);\r\n      err ? set_editing(true) : set_editing(false);\r\n    }));\r\n  }\r\n\r\n  const on_exit = () => {\r\n    set_editing(false);\r\n    set_errors(false);\r\n  }\r\n\r\n  const render_form = () => (\r\n    <li className=\"list-group-item\">\r\n      <EntryEditor errors={errors} onSubmit={on_submit} onExit={on_exit}></EntryEditor>\r\n    </li>\r\n  );\r\n\r\n  return editing ? render_form() : render_add_button()\r\n}","import React, { useState } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { Entry } from './Entry';\r\nimport { AddButton } from './AddButton';\r\n\r\nexport function EntryBrowser() {\r\n  const selected_browser_key = useSelector(state => state.entry_browser.current_browser_key);\r\n  const selected_index = useSelector(state => state.entry_browser.selected_browser.current_index);\r\n\r\n  let [browser_key, set_browser_key] = useState(selected_browser_key);\r\n\r\n  const browsers = useSelector(state => state.entry_browser.browsers);\r\n  const entries = useSelector(state => state.entry_browser.get_entries(browser_key));\r\n\r\n  let is_user = (browser_key === 'User');\r\n\r\n  let browser_keys = [];\r\n  for (let key in browsers) {\r\n    browser_keys.push(key);\r\n  }\r\n\r\n  function render_rule_items() { \r\n    return entries.map((e, i) => {\r\n      let props = {\r\n        entry: e, \r\n        browser: browser_key, index: i,\r\n        actions: {del: is_user, copy: true, edit: is_user},\r\n        selected: i === selected_index && browser_key === selected_browser_key,\r\n      }\r\n      let index = e.id === undefined ? i : e.id;\r\n      return <Entry {...props} key={`${browser_key}_${index}`}></Entry>\r\n    });\r\n  }\r\n\r\n  const render_controls = (\r\n    <div className=\"d-flex flex-row my-0 py-0\">\r\n      <div className=\"btn-group py-0 my-0\">\r\n        {browser_keys.map((e, i) => { \r\n          let selected = e === browser_key;\r\n          return (\r\n            <button \r\n              className={`btn btn-sm ${selected ? 'btn-primary' : 'btn-outline-secondary'}`} \r\n              key={i} onClick={() => set_browser_key(e)}>{e}</button>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <div className=\"card-header py-2 d-flex flex-row align-items-center justify-content-between\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Rules</h6>\r\n        {render_controls}\r\n      </div>\r\n      <div className=\"collapse show\" id=\"collapseRulesBrowser\">\r\n        <ul className=\"list-group\">\r\n          {render_rule_items()}\r\n        </ul>\r\n        {is_user && <AddButton></AddButton>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport function Help(props) {\r\n  return (\r\n    <span className=\"\" data-toggle=\"tooltip\" data-placement=\"left\" data-html={true} title={props.text}>\r\n      <i className=\"fas fa-question-circle\"></i>\r\n    </span>\r\n  )\r\n}","import React from 'react';\r\nimport { Help } from './Help';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    case 'dropdown':\r\n      return DropdownView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <div className=\"row w-100\">\r\n        <div className=\"col-sm\">{name}: {slider.value.toFixed(2)}</div>\r\n        {slider.help && <div className=\"col-sm-1 text-right\"><Help text={slider.help}></Help></div>}\r\n      </div>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className=\"row w-100\">\r\n      <div className=\"col-sm\">\r\n        <div className='form-check' key={key}>\r\n          <input \r\n            type='checkbox' className='form-check-input'\r\n            checked={toggle.value}\r\n            onChange={ev => valueChanged(ev.target.checked)}></input>\r\n          <label className='form-check-label'>{name}</label>\r\n        </div>\r\n      </div>\r\n      {toggle.help && <div className=\"col-sm-1 text-right\"><Help text={toggle.help}></Help></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownView(dropdown, key, name, valueChanged) {\r\n  let onChange = ev => valueChanged(Number(ev.target.value));\r\n  return (\r\n    <div className=\"row w-100\">\r\n      <div className=\"col-sm\">\r\n        <div className='form-inline' key={key}>\r\n          <label className='mr-2'>{name} </label>\r\n          <select className='custom-select custom-select-sm' value={dropdown.value} onChange={onChange}>\r\n            {dropdown.options.map((option, i) => (\r\n              <option value={i} key={`${name}_${key}_${i}`}>{option}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      {dropdown.help && <div className=\"col-sm-1 text-right\"><Help text={dropdown.help}></Help></div>}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\n\r\nimport { show_border, show_render } from '../actions';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const border_checkbox = useSelector(state => state.app.show_border);\r\n  const render_checkbox = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(border_checkbox, 0, 'Show Border', value => {\r\n        dispatch(show_border(value));\r\n      })}\r\n      {RenderAdjustableValue(render_checkbox, 1, 'Show Render', value => {\r\n        dispatch(show_render(value));\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\nimport { BorderControls } from './BorderControls';\r\nimport { update_shader_params, select_renderer } from '../actions';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type);\r\n  const current_renderer_type = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  const card_body = (\r\n    <div>\r\n      <form className='form-inline'>\r\n        {RenderAdjustableValue(renderer_type, 0, 'Renderer', value => {\r\n          dispatch(select_renderer(value));\r\n        })}\r\n      </form>\r\n      <BorderControls></BorderControls>\r\n      <hr></hr>\r\n      <ShaderSettings></ShaderSettings>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseGraphicsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseGraphicsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Graphics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseGraphicsMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const params = useSelector(state => state.shader_manager.params);\r\n\r\n  return (\r\n    <form>{Object.entries(params).map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        let data = {};\r\n        data[name] = value;\r\n        dispatch(update_shader_params(data)); \r\n      })\r\n    })}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { set_size } from '../actions';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch(set_size(size));\r\n    event.preventDefault();\r\n  }\r\n\r\n  const size_changer_form = (\r\n    <form onSubmit={(event) => on_size_change(event)}>\r\n      <div className=\"input-group mb-0\">\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <div className=\"input-group-append\">\r\n          <button type=\"submit\" className='btn btn-primary btn-sm' role=\"button\">Apply</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseSizeChanger\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseSizeChanger\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Size Controls</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseSizeChanger\">\r\n        <div className=\"card-body\">\r\n          {size_changer_form}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n  const texture_data_update = useSelector(state => state.stats.data.texture_data_update);\r\n  const texture_data_upload = useSelector(state => state.stats.data.texture_data_upload);\r\n  const draw_time = useSelector(state => state.stats.data.draw_time);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  const stats = (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div>Total Steps: {total_steps}</div>\r\n          <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n          <div>Draw Time (ms): {draw_time.toFixed(2)}</div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div>Tex Update (ms): {texture_data_update.toFixed(2)}</div>\r\n          <div>Tex Upload (ms): {texture_data_upload.toFixed(2)}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <a href=\"#collapseStatsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseStatsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Statistics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseStatsMenu\">\r\n        <div className=\"card-body\">\r\n          {stats}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\nimport { update_randomiser, select_randomiser } from '../actions';\r\nimport { Help } from '../util/Help';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let current_index = useSelector(state => state.randomiser.current_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function on_select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch(select_randomiser(index));\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.type}</option>);\r\n  });\r\n\r\n  const card_body = (\r\n    <div>\r\n      <div className=\"row w-100\">\r\n        <div className=\"col-sm\">\r\n          <div className='form-inline'>\r\n            <label className='mr-2'>Randomiser</label>\r\n            <select className='custom-select custom-select-sm' value={current_index} onChange={on_select_randomiser}>\r\n              {randomiser_options}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm-1 text-right\"><Help text={\"Type of randomiser to use\"}></Help></div>\r\n      </div>\r\n      <hr></hr>\r\n      <SeedCrystalEditor></SeedCrystalEditor>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRandomiserMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRandomiserMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Randomiser</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRandomiserMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.current_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    dispatch(update_randomiser(name, value));\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { create_preinit_reducer } from './ui/reducers';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/components/SimulationView/SimulationView';\r\nimport { EntryBrowser } from './ui/components/EntryBrowser/EntryBrowser';\r\nimport { ShaderMenu } from './ui/components/ShaderMenu';\r\nimport { SizeChanger } from './ui/components/SizeChanger';\r\nimport { Statistics } from './ui/components/Statistics';\r\nimport { RandomiserMenu } from './ui/components/Randomiser';\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.store = createStore(\r\n      create_preinit_reducer(),\r\n      compose(\r\n        applyMiddleware(thunk),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n      )\r\n    );\r\n\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={this.store}>\r\n        <Main canvas={this.canvas}></Main>\r\n      </Provider>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction Main(props) {\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  const gui = useSelector(store => store.gui);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className={`col-sm-3 overflow-auto vh-100 ${fullscreen && 'd-none'}`}>\r\n        <SizeChanger></SizeChanger>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return (\r\n      <div className={`col-sm-3 overflow-auto vh-100 ${fullscreen && 'd-none'}`}>\r\n        <EntryBrowser></EntryBrowser>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const canvas = <SimulationView canvas={props.canvas}></SimulationView>;\r\n\r\n  return (\r\n    <div className=\"vh-100 vw-100\">\r\n      <div className=\"row px-0 mx-0\">\r\n        {app && render_left_panel()}\r\n        <div className=\"col vh-100 mx-0 px-0\">{canvas}</div>\r\n        {app && render_right_panel()}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App></App>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n// serviceWorker.register();"],"sourceRoot":""}