{"version":3,"sources":["gl/Renderer.js","app/Camera.js","gl/VertexBuffer.js","gl/IndexBuffer.js","simulation/CellularAutomaton3D.js","gl/CubeData.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/Uniform.js","shaders/border.js","app/BoundingBox.js","app/Border.js","shaders/fragment_shader.js","shaders/vertex_shader.js","app/ShaderManager.js","simulation/Neighbours3D.js","simulation/Rule3D.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","layout","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","push","start","end","slice","FLOAT","Error","IndexBuffer","buffer","length","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","Uint8Array","cells_buffer","neighbours","should_update","should_update_buffer","remove_queue","listeners","current_slice","slice_size","listener","fill","rule","x","y","z","i","xyz_to_i","dead_state","delete","on_location_update","recieve","completed_blocks","total_blocks","complete","sliced_step","res","next","done","performance","now","cell_count","completed","total","slice_start","state","i_to_xyz","count_neighbours","next_state","get_next_state","e","tmp","pop","tmp_update","dt","frame_time","floor","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","Texture3D","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","total_cells","running","total_queued_steps","create_data","sim","listen_rerender","update_vertex_buffer","terrain_vbo_layout","push_attribute","terrain_vbo","add_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","hue","colorsys","hsv_to_rgb","r","g","b","entry","get_selected_entry","randomiser","randomise","seed_updates","step","stop","local","max_value","alive_state","items","min","texSubImage3D","drawElementsInstanced","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","name","uniform","location","getUniformLocation","warn","useProgram","apply","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","BoundingBox","thickness","generate","triangle_count","push_data","v","shifted_index","map","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","add_uniform","vec4","draw","basic","basic_alternate","no_shading","create_vertex_shader","main","body","xyz","layer","radius","neighbour","ShaderManager","light_position","global_params","ambient_strength","Slider","diffuse_strength","specular_strength","specular_power_factor","scaling_enabled","Toggle","fog_near","fog_far","sun_strength","sky_strength","create_options","create_shader","create_params","vert_type","colourings","shadings","shadings_params","frag_type","current_colouring","current_shading","vert_name","frag_name","vert_src","frag_src","add_uniforms","param_names","params","param","value","loc","uniform1f","uniform1i","max","val","clamp","_value","MooreNeighbour","total_neighbours","xoff","yoff","zoff","pos_mod","is_neighbour","VonNeumanNeighbour","offsets","dim","n","m","off","Rule3D","remain_alive","become_alive","SeedCrystal","density","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","entries","add_entry","RuleEntry","selected_entry","NeighbourRules","ca_string","description","rule_reader","RuleReader","neighbour_type","string","substrings","replace","split","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Statistics","store","dispatch","setTimeout","key","undefined","recieve_key","recieve_batch","force_update","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","requestAnimationFrame","loop","on_update","on_render","SimulationView","props","canvas_ref","React","createRef","rotating","mouse_start_pos","vec2","canvas","current","getContext","init_stats","init_app","rules_browser","app","reducers","combineReducers","browser","action","select_entry","manager","select_colouring","select_shading","set_param","toggle","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","Component","Controls","is_running","useSelector","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","render_entry","ShaderMenu","shader_params","colouring_options","shading_options","Object","toFixed","onChange","event","checked","render_param","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","onSubmit","preventDefault","on_size_change","progress","createStore","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0be15ee.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3, vec2 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 1000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Uint8Array(this.count);\r\n        this.cells_buffer = new Uint8Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (this.cells[i] === rule.dead_state) {\r\n                        this.should_update.delete(i);\r\n                    } else {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: this.should_update.size\r\n        });\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            for (let res of this.current_slice) {\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_blocks: total\r\n        });\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 16) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({completed_blocks: completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({completed_blocks: completed});\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({frame_time: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { cube } from '../gl/CubeData';\r\n\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n    terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    terrain_vbo_layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n    let index_data = cube.index_data;\r\n\r\n    let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let entry = this.rule_browser.get_selected_entry();\r\n    // this.clear();\r\n    entry.randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(entry.rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let max_value = rule.alive_state;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state/max_value * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, 26)/26 * 255);\r\n    }\r\n\r\n    this.cell_data_texture.bind();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n    this.vao.bind();\r\n    this.index_buffer.bind();\r\n\r\n    gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    let gl = this.gl;\r\n\r\n    const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertex_shader, vertex_shader_src);\r\n    gl.compileShader(vertex_shader);\r\n    if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(vertex_shader));\r\n      throw new Error('Unable to compile vertex shader');\r\n    }\r\n\r\n    const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragment_shader, fragment_shader_src);\r\n    gl.compileShader(fragment_shader);\r\n    if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(fragment_shader));\r\n      throw new Error('Unable to compile fragment shader');\r\n    }\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertex_shader);\r\n    gl.attachShader(program, fragment_shader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(gl.getProgramInfoLog(program));\r\n      throw new Error('Unable to construct shader program');\r\n    }\r\n\r\n    this.vertex_shader = vertex_shader;\r\n    this.fragment_shader = fragment_shader;\r\n    this.program = program;\r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 0.8)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","const basic_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n   \r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    //vec3 light_position = light.position;\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst no_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n    fragColour = vColour;\r\n}`;\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: no_shading,\r\n}","function create_vertex_shader(main, body='') {\r\nreturn (\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump sampler3D;\r\nprecision mediump sampler2D;\r\nprecision mediump int;\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\n\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uGridSize;\r\n\r\nuniform int uScalingEnabled;\r\n\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 centre = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\nout vec3 vNormal;\r\nout vec3 vFragPos;\r\n\r\nvec3 calculate_position(float index) {\r\n    float remain = float(gl_InstanceID);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain-y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}\r\n\r\n${body}\r\n\r\n${main}\r\n`\r\n)};\r\n\r\nconst state_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst xyz_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-offset;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vec3 cube_colour = normalize(offset / uGridSize);\r\n\r\n    vColour = vec4(cube_colour, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst layer_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = offset-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    float normalised_distance = length(distance/10.0);\r\n    normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    // float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    // float total_repeats = 1.0;\r\n    // normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst radius_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = offset-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    // float normalised_distance = length(distance/10.0);\r\n    // normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    float total_repeats = 1.0;\r\n    normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[1];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_and_alive_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float state = result[0];\r\n    float neighbours = result[1];\r\n\r\n    float scale = max(neighbours, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0)); \r\n    vColour = vec4(neighbour_colour.xyz, state_colour.a*neighbour_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nexport const vertex_shader_src = {\r\n    state: state_shading,\r\n    xyz: xyz_shading,\r\n    layer: layer_shading,\r\n    radius: radius_shading,\r\n    neighbour: neighbour_shading,\r\n    'neighbour and alive': neighbour_and_alive_shading,\r\n};","import { Shader } from '../gl/Shader';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../gl/Uniform';\r\n\r\nimport { fragment_shader_src } from '../shaders/fragment_shader';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.light_position = vec3.create();\r\n    this.camera = camera;\r\n\r\n    this.global_params = {\r\n      ambient_strength: new Slider(0, 1, 0.4),\r\n      diffuse_strength: new Slider(0, 1, 0.95),\r\n      specular_strength: new Slider(0, 1, 0.6),\r\n      specular_power_factor: new Slider(0, 128.0, 4.0),\r\n      scaling_enabled: new Toggle(0),\r\n      fog_near: new Slider(0, 1, 0),\r\n      fog_far: new Slider(0, 1, 0),\r\n      sun_strength: new Slider(0, 1, 0.95),\r\n      sky_strength: new Slider(0, 1, 0.4),\r\n    };\r\n\r\n    this.create_options();\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  create_options() {\r\n    this.colourings = [];\r\n    this.shadings = [];\r\n\r\n    this.shadings_params = [\r\n      ['sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n      ['ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n      ['scaling_enabled']\r\n    ];\r\n\r\n    for (let vert_type in vertex_shader_src) {\r\n      this.colourings.push(vert_type);\r\n    }\r\n    for (let frag_type in fragment_shader_src) {\r\n      this.shadings.push(frag_type);\r\n    }\r\n\r\n    this.current_colouring = 0;\r\n    this.current_shading = 0;\r\n  }\r\n\r\n  create_shader() {\r\n    let vert_name = this.colourings[this.current_colouring];\r\n    let frag_name = this.shadings[this.current_shading];\r\n\r\n    let vert_src = vertex_shader_src[vert_name];\r\n    let frag_src = fragment_shader_src[frag_name];\r\n    this.shader = new Shader(this.gl, vert_src, frag_src);\r\n    this.add_uniforms(this.shader);\r\n  }\r\n\r\n  create_params() {\r\n    let param_names = this.shadings_params[this.current_shading];\r\n    let params = {};\r\n    for (let name of param_names) {\r\n      let param = this.global_params[name];\r\n      params[name] = param;\r\n    }\r\n    this.params = params;\r\n  }\r\n\r\n  set_size(size) {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.size[i] = size[i];\r\n    }\r\n\r\n    vec3.scale(this.light_position, this.size, 2.5);\r\n  }\r\n\r\n  set_param(name, value) {\r\n    let param = this.params[name];\r\n    param.value = value;\r\n    this.params = {...this.params};\r\n  }\r\n\r\n  select_colouring(index) {\r\n    this.current_colouring = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  select_shading(index) {\r\n    this.current_shading = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  bind() {\r\n    this.shader.bind();\r\n  }\r\n\r\n  add_uniforms(shader) {\r\n    let gl = this.gl;\r\n\r\n    shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    shader.add_uniform(\"uGridSize\", new UniformVec3f(gl, this.size));\r\n    shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.camera.view_position));\r\n\r\n    // lighting\r\n    shader.add_uniform('light.position', new UniformVec3f(gl, this.light_position));\r\n    shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n    // // lighting params\r\n    shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.ambient_strength.value)));\r\n    shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.diffuse_strength.value)));\r\n    shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_strength.value)));\r\n    shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_power_factor.value)));\r\n    // add texture id\r\n    shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n    shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    // post processing\r\n    shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.global_params.scaling_enabled.value)));\r\n    shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_near.value)));\r\n    shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_far.value)));\r\n    shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sun_strength.value)));\r\n    shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sky_strength.value)));\r\n  }\r\n}\r\n\r\nclass Toggle {\r\n  constructor(value) {\r\n    this.type = 'toggle';\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nclass Slider {\r\n  constructor(min, max, value) {\r\n    this.type = 'slider';\r\n    this.min = min;\r\n    this.max = max;\r\n    this.value = value;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    this._value = val;\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}","export class MooreNeighbour {\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour } from \"./Neighbours3D\";\r\n\r\nexport class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        this.alive_state = this.total_states-1;\r\n        this.dead_state = 0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // refractory\r\n        if (state > this.dead_state && state < this.alive_state) {\r\n            return state-1;\r\n        }\r\n        // alive to dead\r\n        if (state === this.total_states-1) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-1;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (state === this.dead_state && this.become_alive(neighbours)) {\r\n            return this.alive_state;\r\n        }\r\n        // remain dead\r\n        return state;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n}","export class SeedCrystal {\r\n    constructor(density=0.2, radius=0.1) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let [lower, upper] = [Math.max(0.5-this.radius, 0.0), Math.min(0.5+this.radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute {\r\n    constructor(density=0.2, radius=3) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-this.radius, 0), Math.min(X+this.radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-this.radius, 0), Math.min(Y+this.radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-this.radius, 0), Math.min(Z+this.radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\nimport { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.selected_entry = 0;\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\nclass RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.rule_browser = new RuleBrowser();\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 50;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    this.border.on_render();\r\n    this.sim.on_render();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      app: app_reducer(app),\r\n      stats: stats_reducer(app.stats),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={550}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}></canvas>\r\n    );\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\n\r\nexport function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_colouring':\r\n                manager.select_colouring(action.value);\r\n                break;\r\n            case 'shader.select_shading':\r\n                manager.select_shading(action.value);\r\n                break;\r\n            case 'shader.set_param':\r\n                manager.set_param(action.name, action.value);\r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Tick</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n\r\n  const colourings = useSelector(state => state.shader_manager.colourings);\r\n  const current_colouring = useSelector(state => state.shader_manager.current_colouring);\r\n  const shadings = useSelector(state => state.shader_manager.shadings);\r\n  const current_shading = useSelector(state => state.shader_manager.current_shading);\r\n\r\n  const shader_params = useSelector(state => state.shader_manager.params);\r\n\r\n  function select_colouring(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_colouring', value:index});\r\n  }\r\n\r\n  function select_shading(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_shading', value:index});\r\n  }\r\n\r\n  function set_param(name, value) {\r\n    let action = {type:'shader.set_param', name:name, value:value};\r\n    dispatch(action);\r\n  }\r\n\r\n  function render_param(index, name, param) {\r\n    switch (param.type) {\r\n      case 'slider':\r\n        {\r\n          let step = (param.max-param.min)/100.0;\r\n          let onChange = (event) => {\r\n            set_param(name, Number(event.target.value));\r\n          }\r\n          return (\r\n            <div className='form-group' key={index}>\r\n              <label>{name}: {param.value.toFixed(2)}</label>\r\n              <input \r\n                className='form-control-range' type='range' \r\n                min={param.min} max={param.max} value={param.value} step={step}\r\n                onChange={onChange}></input> \r\n            </div>\r\n          );\r\n        }\r\n      case 'toggle':\r\n        return (\r\n          <div className='form-check' key={index}>\r\n            <input \r\n              type='checkbox' className='form-check-input'\r\n              checked={param.value}\r\n              onChange={ev => set_param(name, ev.target.checked)}></input>\r\n            <label className='form-check-label'>{name}</label>\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n\r\n\r\n  const colouring_options = colourings.map((name, i) => {\r\n    return <option value={i} key={i}>{name}</option>\r\n  })\r\n\r\n  const shading_options = shadings.map((name, i) => {\r\n    return <option value={i} key={i}>{name}</option>\r\n  })\r\n\r\n  const params = Object\r\n    .entries(shader_params)\r\n    .map(([name, param], index) => render_param(index, name, param));\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <label>Colouring: </label>\r\n        <select value={current_colouring} onChange={select_colouring}>\r\n          {colouring_options}\r\n        </select>\r\n      </form>\r\n      <form>\r\n        <label>Shading: </label>\r\n        <select value={current_shading} onChange={select_shading}>\r\n          {shading_options}\r\n        </select>\r\n      </form>\r\n      <form>{params}</form>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 10;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <form className='form-group' onSubmit={(event) => on_size_change(event)}>\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <button type=\"submit\" className='btn btn-primary'>Apply</button>\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const dispatch = useDispatch();\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\n\r\nexport const store = createStore(\r\n  () => {}, \r\n  compose(\r\n    applyMiddleware(thunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  )\r\n);\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? <div className=\"col-sm\">\r\n          <div>\r\n            <Controls></Controls>\r\n            <SizeChanger></SizeChanger>\r\n            <ShaderMenu></ShaderMenu>\r\n            <Statistics></Statistics>\r\n          </div>\r\n        </div> : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">\r\n          <RulesBrowser></RulesBrowser>\r\n        </div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}