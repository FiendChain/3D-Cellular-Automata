{"version":3,"sources":["simulation/worker.js","ui/Controls.jsx","gl/Renderer.js","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","shaders/border.js","gl/CubeData.js","app/BoundingBox.js","app/Border.js","ui/AdjustableValues.js","app/renderers/Renderer.js","shaders/volume.js","app/renderers/VolumeRenderer.js","shaders/fragment_shader.js","shaders/vertex_shader.js","app/renderers/PointCloudRenderer.js","app/renderers/VoxelRenderer.js","app/ShaderManager.js","simulation/Neighbours3D.js","app/Serialised.js","app/RuleReader.js","app/EntryBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/reducers/app.js","ui/SimulationView/MouseController.js","ui/SimulationView/TouchScreenController.js","ui/SimulationView/Canvas.jsx","ui/SimulationView/SimulationView.jsx","ui/EntryBrowser.jsx","ui/AdjustableValueViews.jsx","ui/BorderControls.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","ui/Randomiser.jsx","App.jsx","index.jsx"],"names":["module","exports","Worker","Controls","is_running","useSelector","state","app","sim","running","dispatch","useDispatch","on_off","run_btn","className","onClick","type","Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","stats","worker","promise_id","addEventListener","event","msg","data","error","console","action","recieve","notify","grid","unprocessed_blocks","local","listeners","Set","listener","set_grid","delete","size","use_worker","rule","randomiser","transferables","id","postMessage","Texture3D","shape","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","entry_browser","randomiser_browser","total_queued_steps","data_updated","listen_select","set_randomiser","to_json","entry","set_rule","listen_available_frame","update_vertex_buffer","total_cells","set_size","create_data","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","Uint8Array","cell_data_texture","state_colours_data","i","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","current_randomiser","randomise","start","stop","step","items","selected_entry","max_neighbours","neighbour","max","cells","neighbours","total_items","performance","now","width","floor","min","end","request_frame","texSubImage3D","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","length","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","layout","attributes","attribute","enableVertexAttribArray","index","has","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","cube_optimized","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","x","y","z","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","push_attribute","add_vertex_buffer","add_uniform","vec4","draw","AdjustableValue","value","_value","Toggle","val","Slider","clamp","Dropdown","options","props","params","key","loc","uniform1i","create_frag_shader","colouring","volume_shader","vert_src","frag_src","xyz","layer","radius","neighbour_and_alive","VolumeRenderer","create_volume_data","ibo","add_params","occlusion","step_factor","create_shader","listen","colour","current_option","add_uniforms","uniform1f","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","PointCloudRenderer","point_type","brightness","scaling_enabled","quad","create_quad_data","tri","create_triangle_data","current_data","drawElementsInstanced","VoxelRenderer","shading_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","fog_near","fog_far","sun_strength","sky_strength","global_params","shading","Object","keys","shading_keys","update_props","light_position","create_cube_data","load_params","ShaderManager","renderers","volume","point","voxel","renderer_type","values","forEach","current_renderer","update_params","MooreNeighbour","total_neighbours","xoff","yoff","zoff","xn","pos_mod","yn","zn","xyz_to_i","is_neighbour","updates","VonNeumanNeighbour","offsets","dim","n","m","off","SerializedRandomiser","SeedCrystalSerialized","density","SeedCrystalAbsoluteSerialized","RuleSerialized","remain","become","NeighbourSerialized","NeighbourRules","RuleReader","string","substrings","replace","remain_alive","become_alive","undefined","Number","retrieve_rule","number_range","N","Array","fill","numbers","assert_number","EntryBrowser","randomiser_manager","entries","add_entry","Entry","select","current_index","alive_state","dead_state","ca_string","description","Statistics","store","completed_blocks","frame_time","total_blocks","total_steps","texture_data_update","texture_data_upload","draw_time","setTimeout","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","other","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","show_border","show_render","update_randomiser","distance","min_index","list","min_i","min_val","argmin","requestAnimationFrame","loop","on_update","canvas","clientWidth","height","clientHeight","viewport","resize","gui_reducer","init","default_settings","fullscreen","settings","MouseController","onMouseDown","ev","on_mouse_down","onMouseUp","on_mouse_up","onMouseMove","on_mouse_move","onWheel","on_wheel","rotating","zooming","mouse_start_pos","vec2","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","TouchScreenController","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","total_touches","touch_start_pos","touch_zoom_distance","touch_list","touches","touch","zoom_touches","calculate_touch_distance","on_touch_rotate","on_touch_zoom","touch_a","touch_b","dist_a","dist_b","first","second","pos_start","pos_end","Canvas","mouse_controller","touch_controller","current","getContext","create_app","getState","init_stats","init_app","reducers","combineReducers","toggle","browser","manager","select_renderer","update_current","gui","replaceReducer","run","ref","React","Component","SimulationView","useStore","style","zIndex","position","alignSelf","FullScreenButton","font","rule_items","e","class_name","render_entry","href","data-toggle","role","aria-expanded","aria-controls","RenderAdjustableValue","adjustable","valueChanged","slider","toFixed","onChange","SliderView","checked","ToggleView","dropdown","option","DropdownView","BorderControls","ShaderMenu","card_body","ShaderSettings","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","size_changer_form","onSubmit","X","Y","Z","preventDefault","on_size_change","progress","RandomiserMenu","randomiser_options","SeedCrystalEditor","param_options","change_param","createStore","compose","applyMiddleware","thunk","createRef","Main","ReactDOM","render","document","getElementById"],"mappings":"kHAAAA,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,8ICGvC,SAASC,IACd,IAAMC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIC,IAAIC,WAChDC,EAAWC,cAEXC,EAASR,EAAa,QAAS,MAC/BS,EAAUT,EAAa,SAAW,UAExC,OACE,yBAAKU,UAAU,aACb,4BAAQA,UAAU,oBAAoBC,QAAS,kBAAML,EAAS,CAACM,KAAM,WAArE,QACA,4BAAQF,UAAU,kBAAkBC,QAAS,kBAAML,EAAS,CAACM,KAAM,gBAAnE,aACA,4BAAQF,UAAU,kBAAkBC,QAAS,kBAAML,EAAS,CAACM,KAAM,YAAnE,SACA,4BAAQF,UAAW,WAAWD,EAASE,QAAS,kBAAML,EAAS,CAACM,KAAM,aAAaJ,I,yCChB5EK,EAAb,WACI,WAAYC,GAAK,oBACbC,KAAKD,GAAKA,EACVC,KAAKC,aAAe,IAAIC,aAAa,CAAC,EAAG,EAAG,EAAG,IAHvD,oDAOQ,IAAIH,EAAKC,KAAKD,GACdA,EAAGI,WAAH,MAAAJ,EAAE,YAAeC,KAAKC,eACtBF,EAAGK,MAAML,EAAGM,iBAAmBN,EAAGO,oBAT1C,2BAYSC,EAAcC,EAAcC,GAC7B,IAAIV,EAAKC,KAAKD,GAEdU,EAAOC,OACPH,EAAaG,OACbF,EAAaE,OAEbX,EAAGY,aAAaZ,EAAGa,UAAWJ,EAAaK,MAAOd,EAAGe,aAAc,OAnB3E,K,OCEaC,EAAb,WACE,aAAe,oBACbf,KAAKgB,IAAM,GACXhB,KAAKiB,aAAe,EACpBjB,KAAKkB,cAAgBC,IAAKC,WAAW,EAAG,EAAG,GAC3CpB,KAAKqB,cAAgBF,IAAKG,SAC1BtB,KAAKuB,OAASJ,IAAKC,WAAW,EAAG,EAAG,GACpCpB,KAAKwB,kBAAoBL,IAAKG,SAE9BtB,KAAKyB,MAAQC,IAAKJ,SAClBtB,KAAK2B,KAAOD,IAAKJ,SACjBtB,KAAK4B,WAAaF,IAAKJ,SAEvBtB,KAAK6B,SAbT,qDAkBIH,IAAKI,SAAS9B,KAAKyB,OACnBC,IAAKK,UAAU/B,KAAKyB,MAAOzB,KAAKyB,MAAOzB,KAAKwB,mBAC5CE,IAAKM,MAAMhC,KAAKyB,MAAOzB,KAAKyB,MAAO,CAAC,EAAG,EAAG,IAE1CC,IAAKO,OAAOjC,KAAK2B,KAAM3B,KAAKkB,cAAelB,KAAKuB,OAAQ,CAAC,EAAG,EAAG,IAG/DG,IAAKQ,YAAYlC,KAAK4B,WAAY5B,KAAKgB,IAAMmB,KAAKC,GAAK,IAAKpC,KAAKiB,aAAc,IAAM,OAzBzF,6BA4BSoB,EAAIC,GAIT,IAAIC,EAAWb,IAAKJ,SACpBI,IAAKc,QAAQD,EAAUA,EAAUF,GAEjC,IAAII,EAAqBtB,IAAKG,SAC9BH,IAAKuB,IAAID,EAAoBzC,KAAKqB,cAAerB,KAAKkB,eACtDuB,EAAmB,GAAKzC,KAAKqB,cAAc,GAC3CF,IAAKqB,QAAQC,EAAoBA,EAAoBzC,KAAKqB,cAAec,KAAKC,GAAG,GAEjFV,IAAKiB,OAAOJ,EAAUA,GAAWD,EAAIG,GAGrCtB,IAAKyB,cAAc5C,KAAKkB,cAAelB,KAAKkB,cAAeqB,KA3C/D,2BA8COM,GACH,IAAIC,EAAO3B,IAAKG,SAChBH,IAAKuB,IAAII,EAAM9C,KAAKkB,cAAelB,KAAKqB,eACxCF,IAAKa,MAAMc,EAAMA,EAAM,EAAID,GAE3B1B,IAAK4B,IAAI/C,KAAKkB,cAAelB,KAAKqB,cAAeyB,OAnDrD,K,yCCCaE,EAAb,WACI,WAAYC,GAAQ,IAAD,2BACfjD,KAAKiD,MAAQA,EAEbjD,KAAKkD,OAASA,MACdlD,KAAKmD,WAAa,EAElBnD,KAAKkD,OAAOE,iBAAiB,WAAW,SAACC,GACrC,IAAIC,EAAMD,EAAME,KAEhB,GAAID,EAAIE,MAEJC,QAAQD,MAAMF,EAAIE,YAItB,OAAQF,EAAII,QACR,IAAK,QAED,YADA,EAAKT,MAAMU,QAAQL,EAAIC,MAE3B,IAAK,OACD,EAAKK,OAAON,EAAIO,KAAMP,EAAIQ,mBAAoBR,EAAIS,WAM9D/D,KAAKgE,UAAY,IAAIC,IA3B7B,mDA8BWJ,EAAMC,EAAoBC,GAAQ,IAAD,gBACf/D,KAAKgE,WADU,IACpC,2BAAqC,EACjCE,EADiC,SACxBL,EAAMC,EAAoBC,IAFH,8BAIpC/D,KAAKmE,SAASN,KAlCtB,6CAqC2BK,GACnB,OAAOlE,KAAKgE,UAAUjB,IAAImB,KAtClC,+CAyC6BA,GACrB,OAAOlE,KAAKgE,UAAUI,OAAOF,KA1CrC,+BA6CaG,GACLrE,KAAKsE,WAAW,WAAYD,KA9CpC,+BAiDaE,GACLvE,KAAKsE,WAAW,WAAYC,KAlDpC,qCAqDmBC,GACXxE,KAAKsE,WAAW,iBAAkBE,KAtD1C,8BA0DQxE,KAAKsE,WAAW,WA1DxB,kCA8DQtE,KAAKsE,WAAW,eA9DxB,6BAkEQtE,KAAKsE,WAAW,UAlExB,8BAsEQtE,KAAKsE,WAAW,WAtExB,6BA0EQtE,KAAKsE,WAAW,UA1ExB,+BA6EaT,GACL7D,KAAKsE,WAAW,WAAYT,EAAMA,EAAKY,iBA9E/C,sCAkFQzE,KAAKsE,WAAW,mBAlFxB,iCAqFeZ,GAAoC,IAA5BH,EAA2B,uDAAtB,GAAIkB,EAAkB,uDAAJ,GAElCC,EAAK1E,KAAKmD,WACdnD,KAAKmD,YAAc,EAEnBnD,KAAKkD,OAAOyB,YAAY,CAACjB,SAAQgB,KAAInB,QAAOkB,OA1FpD,KCHaG,EAAb,WACI,WAAY7E,EAAIwD,EAAMsB,GAAQ,oBAC1B7E,KAAKD,GAAKA,EACVC,KAAKuD,KAAOA,EACZvD,KAAK6E,MAAQA,EACb7E,KAAK8E,QAAU/E,EAAGgF,gBAElBhF,EAAGiF,YAAYjF,EAAGkF,WAAYjF,KAAK8E,SAGnC/E,EAAGmF,cAAcnF,EAAGkF,WAAYlF,EAAGoF,mBAAoBpF,EAAGqF,SAC1DrF,EAAGmF,cAAcnF,EAAGkF,WAAYlF,EAAGsF,mBAAoBtF,EAAGqF,SAE1DrF,EAAGmF,cAAcnF,EAAGkF,WAAYlF,EAAGuF,eAAgBvF,EAAGwF,eACtDxF,EAAGmF,cAAcnF,EAAGkF,WAAYlF,EAAGyF,eAAgBzF,EAAGwF,eACtDxF,EAAGmF,cAAcnF,EAAGkF,WAAYlF,EAAG0F,eAAgB1F,EAAGwF,eACtDxF,EAAG2F,YAAY3F,EAAG4F,iBAAkB,GAIpC5F,EAAG6F,WAAW7F,EAAGkF,WAAY,EAAGlF,EAAG8F,IAAKhB,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAI,EAAG9E,EAAG+F,GAAI/F,EAAGgG,cAAe/F,KAAKuD,MApB/G,mDAwBkB,IAATyC,EAAQ,uDAAH,EACFjG,EAAKC,KAAKD,GACdA,EAAGkG,cAAclG,EAAGmG,SAAWF,GAC/BjG,EAAGiF,YAAYjF,EAAGkF,WAAYjF,KAAK8E,aA3B3C,KCAaqB,EAAb,WACI,WAAYpG,EAAIwD,EAAMsB,GAAQ,oBAC1B7E,KAAKD,GAAKA,EACVC,KAAKuD,KAAOA,EACZvD,KAAK6E,MAAQA,EACb7E,KAAK8E,QAAU/E,EAAGgF,gBAElBhF,EAAGiF,YAAYjF,EAAGqG,WAAYpG,KAAK8E,SAGnC/E,EAAGmF,cAAcnF,EAAGqG,WAAYrG,EAAGoF,mBAAoBpF,EAAGqF,SAC1DrF,EAAGmF,cAAcnF,EAAGqG,WAAYrG,EAAGsF,mBAAoBtF,EAAGqF,SAE1DrF,EAAGmF,cAAcnF,EAAGqG,WAAYrG,EAAGuF,eAAgBvF,EAAGwF,eACtDxF,EAAGmF,cAAcnF,EAAGqG,WAAYrG,EAAGyF,eAAgBzF,EAAGwF,eACtDxF,EAAG2F,YAAY3F,EAAG4F,iBAAkB,GAEpC5F,EAAGsG,WAAWtG,EAAGqG,WAAY,EAAGrG,EAAGuG,MAAOzB,EAAM,GAAIA,EAAM,GAAI,EAAG9E,EAAGwG,KAAMxG,EAAGgG,cAAe/F,KAAKuD,MAjBzG,mDAoBkB,IAATyC,EAAQ,uDAAH,EACFjG,EAAKC,KAAKD,GACdA,EAAGkG,cAAclG,EAAGmG,SAAWF,GAC/BjG,EAAGiF,YAAYjF,EAAGqG,WAAYpG,KAAK8E,aAvB3C,K,4BCmMU0B,GA5LGC,EAAb,WACE,WAAY1G,EAAI2G,EAAQC,EAAgBC,EAAeC,EAAoB5D,GAAQ,IAAD,2BAChFjD,KAAKD,GAAKA,EACVC,KAAK0G,OAASA,EACd1G,KAAKiD,MAAQA,EAGbjD,KAAKV,SAAU,EACfU,KAAK8G,mBAAqB,EAE1B9G,KAAK2G,eAAiBA,EACtB3G,KAAK4G,cAAgBA,EACrB5G,KAAK6G,mBAAqBA,EAE1B7G,KAAK+G,cAAe,EAEpB/G,KAAK6G,mBAAmBG,eAAc,SAACxC,GACrC,EAAKnF,IAAI4H,eAAezC,EAAW0C,cAGrClH,KAAK4G,cAAcI,eAAc,SAACG,GAChC,EAAK9H,IAAI4H,eAAeE,EAAM3C,WAAW0C,WACzC,EAAK7H,IAAI+H,SAASD,EAAM5C,KAAK2C,cAG/BlH,KAAKX,IAAM,IAAI2D,EAAoBC,GACnCjD,KAAKX,IAAIgI,wBAAuB,SAACxD,EAAMC,EAAoBC,GACzD,EAAKuD,qBAAqBzD,EAAMC,EAAoBC,MA3B1D,qDA+BWM,GACPrE,KAAKqE,KAAOA,EACZrE,KAAKuH,YAAclD,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAC5CrE,KAAKX,IAAImI,SAASnD,GAClBrE,KAAKyH,gBAnCT,oCAuCI,IAAI1H,EAAKC,KAAKD,GAEdC,KAAK0H,qBAAuB1H,KAAK2H,wBACjC3H,KAAK4H,sBAAwB5H,KAAK6H,wBAElC7H,KAAK8H,gBAAkB,EACvB9H,KAAK+H,UAAY,IAAIC,WAAWhI,KAAKuH,YAAYvH,KAAK8H,iBACtD9H,KAAKiI,kBAAoB,IAAIrD,EAAU7E,EAAIC,KAAK+H,UAAW/H,KAAKqE,QA9CpE,8CAsDI,IAJA,IAAItE,EAAKC,KAAKD,GAGVmI,EAAqB,IAAIF,WAAW,KAC/BG,EAAI,EAAGA,EAAIC,GAAgBD,IAAK,CACvC,IAAIE,EAAe,GAALF,EAAE,GAGZG,EADc,KACG,EAAIH,EANR,IAEsB,EAOvBI,IAASC,WAAWF,EAFnB,IACL,KACPG,EAPkC,EAOlCA,EAAGC,EAP+B,EAO/BA,EAAGC,EAP4B,EAO5BA,EACXT,EAAmBG,EAAO,GAAKI,EAC/BP,EAAmBG,EAAO,GAAKK,EAC/BR,EAAmBG,EAAO,GAAKM,EAC/BT,EAAmBG,EAAO,GAAK,IAGjC,IAAK,IAAIF,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAmBC,GAAK,EAG1B,OAAO,IAAIhC,EAAUpG,EAAImI,EAAoB,CApB1B,GAoBwC,MAxE/D,8CAgFI,IAJA,IAAInI,EAAKC,KAAKD,GAGVmI,EAAqB,IAAIF,WAAW,MAC/BG,EAAI,EAAGA,EAFG,IAEeA,IAAK,CACrC,IAAIE,EAAa,EAAHF,EAGVG,EADc,KACG,EAAIH,EANR,KAEoB,EAOrBI,IAASC,WAAWF,EAFnB,IACL,KACPG,EAPgC,EAOhCA,EAAGC,EAP6B,EAO7BA,EAAGC,EAP0B,EAO1BA,EACXT,EAAmBG,EAAO,GAAKI,EAC/BP,EAAmBG,EAAO,GAAKK,EAC/BR,EAAmBG,EAAO,GAAKM,EAC/BT,EAAmBG,EAAO,GAAK,IAGjC,OAAO,IAAIlC,EAAUpG,EAAImI,EAAoB,CAhB1B,IAgBwC,MA9F/D,8BAkGIlI,KAAKX,IAAIe,UAlGb,kCAsGI,IAAIoE,EAAaxE,KAAK6G,mBAAmB+B,mBACzC5I,KAAKX,IAAI4H,eAAezC,EAAW0C,WACnClH,KAAKX,IAAIwJ,cAxGb,kCA4GI7I,KAAK0G,OAAO7E,WA5GhB,8BAgHI7B,KAAKV,SAAU,EACfU,KAAKX,IAAIyJ,UAjHb,6BAqHI9I,KAAKV,SAAU,EACfU,KAAKX,IAAI0J,SAtHb,+BA0HQ/I,KAAKV,QACPU,KAAK+I,OAEL/I,KAAK8I,UA7HX,6BAiII9I,KAAKX,IAAI2J,SAjIb,2CAoIuBnF,EAAMC,GAAkC,IAAD,EAAbC,EAAa,wDAGtDkF,GAFKjJ,KAAKD,GAEFgE,EAAQD,EAAqB0C,EAAM,EAAG3C,EAAKhD,QACnD0D,EAAOvE,KAAK4G,cAAcsC,eAAe3E,KACzC4E,EAAiB5E,EAAK6E,UAAUC,IAEhCC,EAAQzF,EAAKyF,MACbC,EAAa1F,EAAK0F,WAElBC,EAAc,EAEdV,EAAQW,YAAYC,MAClBC,EAAQ3J,KAAK8H,gBACfC,EAAY/H,KAAK+H,UAdqC,cAe5CkB,GAf4C,IAe1D,2BAAqB,CAAC,IAAbd,EAAY,QACfE,EAASF,EAAEwB,EACXxK,EAAQmK,EAAMnB,GACdiB,EAAYG,EAAWpB,GAC3BJ,EAAUM,EAAO,GAAKlJ,EACtB4I,EAAUM,EAAO,GAAKlG,KAAKyH,MAAMzH,KAAK0H,IAAIT,EAAWD,GAAgBA,EAAiB,KACtFK,GAAe,GArByC,8BAuB1D,IAAIM,EAAML,YAAYC,MACtB1J,KAAKiD,MAAMU,QAAQ,sBAAuBmG,EAAIhB,GAG9C9I,KAAK+G,aAAe/G,KAAK+G,cAAiByC,EAAc,IA/J5D,kCAmKI,IAAIzJ,EAAKC,KAAKD,GAMd,GAJAC,KAAK2G,eAAejG,OACpBV,KAAKiI,kBAAkBvH,KAAK,GAC5BV,KAAKX,IAAI0K,gBAEL/J,KAAK+G,aAAc,CACrB,IAAI+B,EAAQW,YAAYC,MACxB3J,EAAGiK,cAAcjK,EAAGkF,WAAY,EAAG,EAAG,EAAG,EAAGjF,KAAKqE,KAAK,GAAIrE,KAAKqE,KAAK,GAAIrE,KAAKqE,KAAK,GAAItE,EAAG+F,GAAI/F,EAAGgG,cAAe/F,KAAK+H,UAAW,GAC/H,IAAI+B,EAAML,YAAYC,MACtB1J,KAAKiD,MAAMU,QAAQ,sBAAuBmG,EAAIhB,GAC9C9I,KAAK+G,cAAe,EAEtB/G,KAAK0H,qBAAqBhH,KAAK,GAC/BV,KAAK4H,sBAAsBlH,KAAK,GAG9B,IAAIoI,EAAQW,YAAYC,MACxB1J,KAAK2G,eAAesD,YACpB,IAAIH,EAAML,YAAYC,MACtB1J,KAAKiD,MAAMU,QAAQ,YAAamG,EAAIhB,OAvL1C,KA4LA,SAAUtC,EAAMsC,EAAOgB,GAAvB,uEACW3B,EAAIW,EADf,YACsBX,EAAI2B,GAD1B,gBAEI,OAFJ,SAEU3B,EAFV,OAC+BA,IAD/B,sDCnMO,IAAM+B,EAAb,WACE,WAAYnK,EAAIoK,EAAmBC,GAAsB,oBACvDpK,KAAKD,GAAKA,EACVC,KAAKqK,sBAAsBF,EAAmBC,GAC9CpK,KAAKsK,SAAW,GAChBtK,KAAKuK,UAAY,GALrB,kEAQwBJ,EAAmBC,GAAsB,IAAD,EAsChE,SAAwBrK,EAAIoK,EAAmBC,GAC7C,IAAMI,EAAgBzK,EAAG0K,aAAa1K,EAAG2K,eAGzC,GAFA3K,EAAG4K,aAAaH,EAAeL,GAC/BpK,EAAG6K,cAAcJ,IACZzK,EAAG8K,mBAAmBL,EAAezK,EAAG+K,gBAG3C,MAFArH,QAAQD,MAAMzD,EAAGgL,iBAAiBP,IAClC/G,QAAQD,MAAMwH,EAAqBb,IAC7B,IAAIc,MAAM,mCAGlB,IAAMC,EAAkBnL,EAAG0K,aAAa1K,EAAGoL,iBAG3C,GAFApL,EAAG4K,aAAaO,EAAiBd,GACjCrK,EAAG6K,cAAcM,IACZnL,EAAG8K,mBAAmBK,EAAiBnL,EAAG+K,gBAE7C,MADArH,QAAQD,MAAMzD,EAAGgL,iBAAiBG,IAC5B,IAAID,MAAM,qCAGlB,IAAMG,EAAUrL,EAAGsL,gBAInB,GAHAtL,EAAGuL,aAAaF,EAASZ,GACzBzK,EAAGuL,aAAaF,EAASF,GACzBnL,EAAGwL,YAAYH,IACVrL,EAAGyL,oBAAoBJ,EAASrL,EAAG0L,aAGtC,MAFAhI,QAAQD,MAAMzD,EAAG2L,kBAAkBN,IACnC3H,QAAQD,MAAMwH,EAAqBZ,IAC7B,IAAIa,MAAM,sCAGlB,MAAO,CAACT,EAAeU,EAAiBE,GAjEqBO,CAAe3L,KAAKD,GAAIoK,EAAmBC,GAD1C,mBAC3DpK,KAAKwK,cADsD,KACvCxK,KAAKkL,gBADkC,KACjBlL,KAAKoL,QADY,OARhE,kCAacQ,EAAMC,GAChB,IACIC,EADK9L,KAAKD,GACIgM,mBAAmB/L,KAAKoL,QAASQ,GAKnD5L,KAAKsK,SAAS0B,KAAKH,GACnB7L,KAAKuK,UAAUyB,KAAKF,KArBxB,6BAiCa9L,KAAKD,GACXkM,WAAWjM,KAAKoL,SACnB,IAAK,IAAIjD,EAAI,EAAGA,EAAInI,KAAKsK,SAAS4B,OAAQ/D,IAAK,CAC7C,IAAI0D,EAAU7L,KAAKsK,SAASnC,GACxB2D,EAAW9L,KAAKuK,UAAUpC,GACb,OAAb2D,GAGJD,EAAQM,MAAML,QAzCpB,KA6EA,SAASd,EAAqBoB,GAG5B,OAFYA,EAAIC,MAAM,MAAMC,KAAI,SAACC,EAAGpE,GAAJ,gBAAaA,EAAE,EAAf,eAAuBoE,MACvCC,KAAK,MC7EhB,IAAMC,EAAb,WACE,WAAY1M,EAAIwD,EAAMmJ,GAAQ,oBAC5B1M,KAAKD,GAAKA,EAEVC,KAAKuD,KAAOA,EAEZvD,KAAK2M,IAAM5M,EAAG6M,eACd7M,EAAG8M,WAAW9M,EAAG+M,aAAc9M,KAAK2M,KACpC5M,EAAGgN,WAAWhN,EAAG+M,aAAcvJ,EAAMmJ,GARzC,mDAYI,IAAI3M,EAAKC,KAAKD,GACdA,EAAG8M,WAAW9M,EAAG+M,aAAc9M,KAAK2M,SAbxC,KAiBaK,EAAb,WACE,WAAYjN,GAAK,oBACfC,KAAKD,GAAKA,EACVC,KAAKiN,IAAMlN,EAAGmN,oBACdlN,KAAKmN,cAAgB,IAAIlJ,IAAI,CAAClE,EAAGqN,IAAKrN,EAAGe,eAJ7C,8DAOoB6L,EAAKU,GACrB,IAAItN,EAAKC,KAAKD,GAEdC,KAAKU,OACLiM,EAAIjM,OAEJ,IAN6B,EAMzB2H,EAAS,EANgB,cAOPgF,EAAOC,YAPA,IAO7B,2BAAyC,CAAC,IAAjCC,EAAgC,QACvCxN,EAAGyN,wBAAwBD,EAAUE,OACjCzN,KAAKmN,cAAcO,IAAIH,EAAU1N,MACnCE,EAAG4N,qBAAqBJ,EAAUE,MAAOF,EAAU1M,MAAO0M,EAAU1N,KAAM0N,EAAUK,cAAeP,EAAOQ,OAAQxF,GAElHtI,EAAG+N,oBAAoBP,EAAUE,MAAOF,EAAU1M,MAAO0M,EAAU1N,KAAM0N,EAAUK,cAAeP,EAAOQ,OAAQxF,GAEnHA,GAAUkF,EAAU1M,MAAQ0M,EAAUlJ,MAdX,iCAPjC,6BA0BarE,KAAKD,GACXgO,gBAAgB/N,KAAKiN,SA3B5B,KA+Bae,EAAb,WACE,WAAYjO,GAAK,oBACfC,KAAKD,GAAKA,EACVC,KAAK6N,OAAS,EACd7N,KAAKsN,WAAa,GAJtB,2DAOiBG,EAAO5M,EAAOhB,EAAM+N,GACjC,IAAIvJ,EAAOrE,KAAKiO,OAAOpO,GACnB0N,EAAY,IAAIW,EAAsBT,EAAO5M,EAAOhB,EAAM+N,EAAevJ,GAC7ErE,KAAKsN,WAAWtB,KAAKuB,GACrBvN,KAAK6N,QAAUhN,EAAQwD,IAX3B,4BAcQyE,EAAOgB,GACX,IAAIuD,EAAS,IAAIW,EAGjB,OAFAX,EAAOQ,OAAS7N,KAAK6N,OACrBR,EAAOC,WAAatN,KAAKsN,WAAWa,MAAMrF,EAAOgB,GAC1CuD,IAlBX,6BAqBSxN,GACL,IAAIE,EAAKC,KAAKD,GAEd,OAAQF,GACR,KAAKE,EAAGqO,MACR,KAAKrO,EAAGe,aACR,KAAKf,EAAGqN,IAAK,OAAO,EACpB,QAAS,MAAM,IAAInC,MAAJ,gCAAmCpL,SA5BtD,KAoCMqO,EACJ,WAAYT,EAAO5M,EAAOhB,EAAM+N,EAAevJ,GAAO,oBACpDrE,KAAKyN,MAAQA,EACbzN,KAAKa,MAAQA,EACbb,KAAKH,KAAOA,EACZG,KAAK4N,cAAgBA,EACrB5N,KAAKqE,KAAOA,GC5FHgK,EAAb,WACI,WAAYtO,EAAIwD,GAAO,oBACnBvD,KAAKD,GAAKA,EAEVC,KAAKsO,OAASvO,EAAG6M,eACjB5M,KAAKa,MAAQ0C,EAAK2I,OAClBnM,EAAG8M,WAAW9M,EAAGwO,qBAAsBvO,KAAKsO,QAC5CvO,EAAGgN,WAAWhN,EAAGwO,qBAAsBhL,EAAMxD,EAAGyO,aAPxD,mDAWQ,IAAIzO,EAAKC,KAAKD,GACdA,EAAG8M,WAAW9M,EAAGwO,qBAAsBvO,KAAKsO,YAZpD,KCAaG,EAAb,WACI,WAAY1O,EAAIwD,GAAO,oBACnBvD,KAAKD,GAAKA,EACVC,KAAKuD,KAAOA,EAHpB,kDAMUuI,GACH9L,KAAKD,GAAG2O,iBAAiB5C,GAAU,EAAO9L,KAAKuD,UAPtD,KAWaoL,EAAb,WACI,WAAY5O,EAAIwD,GAAO,oBACnBvD,KAAKD,GAAKA,EACVC,KAAKuD,KAAOA,EAHpB,kDAMUuI,GACF9L,KAAKD,GAAG6O,UAAU9C,EAAU9L,KAAKuD,KAAK,GAAIvD,KAAKuD,KAAK,GAAIvD,KAAKuD,KAAK,QAP1E,KAWasL,EAAb,WACI,WAAY9O,EAAIwD,GAAO,oBACnBvD,KAAKD,GAAKA,EACVC,KAAKuD,KAAOA,EAHpB,kDAMUuI,GACF9L,KAAKD,GAAG+O,UAAUhD,EAAU9L,KAAKuD,KAAK,GAAIvD,KAAKuD,KAAK,GAAIvD,KAAKuD,KAAK,GAAIvD,KAAKuD,KAAK,QAPxF,KAWawL,EAAb,WACI,WAAYC,GAAW,oBACnBhP,KAAKgP,SAAWA,EAFxB,kDAKUlD,GACF9L,KAAKgP,SAASlD,OANtB,KCNe,EA3BH,wSA2BG,EAVL,uGCkBV,IAoBamD,EAAO,CAChBC,YAxDJ,SAAqBC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GAClD,OAAO,IAAItP,aAAa,CACtBiP,EAAMK,EAAQH,EAAO,EAAG,EAAG,EAC3BD,EAAOI,EAAQH,EAAO,EAAG,EAAG,EAC5BF,EAAMI,EAAKF,EAAO,EAAG,EAAG,EACxBD,EAAOG,EAAKF,EAAO,EAAG,EAAG,EAEzBF,EAAMI,EAAKF,EAAO,EAAG,EAAG,EACxBF,EAAMI,EAAKD,EAAM,EAAG,EAAG,EACvBF,EAAOG,EAAKD,EAAM,EAAG,EAAG,EACxBF,EAAOG,EAAKF,EAAO,EAAG,EAAG,EAEzBD,EAAOG,EAAKF,EAAO,EAAG,EAAG,EACzBD,EAAOI,EAAQH,EAAO,EAAG,EAAG,EAC5BD,EAAOI,EAAQF,EAAM,EAAG,EAAG,EAC3BF,EAAOG,EAAKD,EAAM,EAAG,EAAG,EAExBH,EAAMI,EAAKF,GAAQ,EAAG,EAAG,EACzBF,EAAMI,EAAKD,GAAO,EAAG,EAAG,EACxBH,EAAMK,EAAQH,GAAQ,EAAG,EAAG,EAC5BF,EAAMK,EAAQF,GAAO,EAAG,EAAG,EAE3BH,EAAMK,EAAQH,EAAO,GAAI,EAAG,EAC5BF,EAAMK,EAAQF,EAAM,GAAI,EAAG,EAC3BF,EAAOI,EAAQF,EAAM,GAAI,EAAG,EAC5BF,EAAOI,EAAQH,EAAO,GAAI,EAAG,EAE7BF,EAAMI,EAAKD,EAAM,EAAG,GAAI,EACxBF,EAAOG,EAAKD,EAAM,EAAG,GAAI,EACzBH,EAAMK,EAAQF,EAAM,EAAG,GAAI,EAC3BF,EAAOI,EAAQF,EAAM,EAAG,GAAI,KA2B5BG,WAtBe,IAAIC,YAAY,CAC/B,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,GACN,EAAG,GAAI,GAEP,GAAI,GAAI,GACR,GAAI,GAAI,GAER,GAAI,GAAI,GACR,GAAI,GAAI,GAER,GAAI,GAAI,GACR,GAAI,GAAI,MAsBZ,IAeaC,EAAiB,CAC1BT,YA9BJ,SAAiCC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GAC9D,OAAO,IAAItP,aAAa,CACtBiP,EAAMK,EAAQH,EACdD,EAAOI,EAAQH,EACfF,EAAMI,EAAKF,EACXD,EAAOG,EAAKF,EACZF,EAAMK,EAAQF,EACdF,EAAOI,EAAQF,EACfH,EAAMI,EAAKD,EACXF,EAAOG,EAAKD,KAsBZG,WAjB2B,IAAIC,YAAY,CAC7C,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,KCnFKE,EAAb,WACI,WAAYvL,EAAMwL,GAAY,0BACM7P,KAAK8P,SAASzL,EAAMwL,GAD3B,mBACpBX,EADoB,KACPO,EADO,KAEzBzP,KAAKqE,KAAOA,EACZrE,KAAK6P,UAAYA,EACjB7P,KAAKkP,YAAc,IAAIhP,aAAagP,GACpClP,KAAKyP,WAAa,IAAIC,YAAYD,GAN1C,qDASapL,EAAMwL,GACX,IAAIX,EAAc,GACdO,EAAa,GACbM,EAAiB,EACrB,SAASC,EAAUzM,GAAO,IAAD,cACRA,EADQ,GAChBgJ,EADgB,KACbpE,EADa,KAErB+G,EAAYlD,KAAZ,MAAAkD,EAAW,YAAS3C,IACpB,IAAI0D,EAAgB9H,EAAEmE,KAAI,SAAA4D,GAAG,OAAIA,EAAIH,KACrCN,EAAWzD,KAAX,MAAAyD,EAAU,YAASQ,IACnBF,GAAkB,GAKtB,IADA,IAAIlL,EAAQ1D,IAAKC,WAAWyO,EAAWA,EAAWA,GAClD,MAAc,CAAC,EAAGxL,EAAK,IAAvB,eACI,IADC,IAAI8L,EAAC,KACN,MAAc,CAAC,EAAG9L,EAAK,IAAvB,eACI,IADC,IAAI+L,EAAC,KACN,MAAc,CAAC,EAAG/L,EAAK,IAAvB,eAA4B,CAAvB,IAAIgM,EAAC,KACNL,EAAUhQ,KAAKsQ,YAAY,CAACH,EAAGC,EAAGC,GAAIxL,IAKlDA,EAAQ1D,IAAKC,WAAWiD,EAAK,GAAGwL,EAAWA,EAAWA,GACtD,cAAc,CAAC,EAAGxL,EAAK,IAAvB,eACI,IADC,IAAI+L,EAAC,KACN,MAAc,CAAC,EAAG/L,EAAK,IAAvB,eAA4B,CAAvB,IAAIgM,EAAC,KACFF,EAAI9L,EAAK,GAAG,EAChB2L,EAAUhQ,KAAKsQ,YAAY,CAACH,EAAGC,EAAGC,GAAIxL,IAI9CA,EAAQ1D,IAAKC,WAAWyO,EAAWxL,EAAK,GAAGwL,EAAWA,GACtD,cAAc,CAAC,EAAGxL,EAAK,IAAvB,eACI,IADC,IAAI8L,EAAC,KACN,MAAc,CAAC,EAAG9L,EAAK,IAAvB,eAA4B,CAAvB,IAAIgM,EAAC,KACFD,EAAI/L,EAAK,GAAG,EAChB2L,EAAUhQ,KAAKsQ,YAAY,CAACH,EAAGC,EAAGC,GAAIxL,IAI9CA,EAAQ1D,IAAKC,WAAWyO,EAAWA,EAAWxL,EAAK,GAAGwL,GACtD,cAAc,CAAC,EAAGxL,EAAK,IAAvB,eACI,IADC,IAAI8L,EAAC,KACN,MAAc,CAAC,EAAG9L,EAAK,IAAvB,eAA4B,CAAvB,IAAI+L,EAAC,KACFC,EAAIhM,EAAK,GAAG,EAChB2L,EAAUhQ,KAAKsQ,YAAY,CAACH,EAAGC,EAAGC,GAAIxL,IAI9C,MAAO,CAACqK,EAAaO,KAvD7B,kCA0DgBc,EAAQ1L,GAChB,IAAIsK,EAAOoB,EAAO,GAAK1L,EAAM,GAAG,EAC5BuK,EAAQmB,EAAO,GAAK1L,EAAM,GAAG,EAC7B0K,EAAMgB,EAAO,GAAK1L,EAAM,GAAG,EAC3B2K,EAASe,EAAO,GAAK1L,EAAM,GAAG,EAC9BwK,EAAQkB,EAAO,GAAK1L,EAAM,GAAG,EAC7ByK,EAAOiB,EAAO,GAAK1L,EAAM,GAAG,EAGhC,MAAO,CAFWoK,EAAKC,YAAYC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GACjDP,EAAKQ,gBAlE9B,KCOae,EAAb,WACE,WAAYzQ,EAAIsE,EAAMoM,EAAU/J,GAAS,oBACvC1G,KAAKD,GAAKA,EACVC,KAAKyQ,SAAWA,EAChBzQ,KAAK0G,OAASA,EAEd,IAEIgK,EAAgBvP,IAAKG,SACzBH,IAAK4B,IAAI2N,EAAerM,EAAMlD,IAAKC,WAAW,EAAU,EAAU,IAClE,IAAIuP,EAAaxP,IAAKC,YAHT,YAKbpB,KAAK4Q,OAAS,IAAIhB,EAAYc,EANd,IAQhB1Q,KAAKS,OAAS,IAAIyJ,EAAOnK,EAAI8Q,EAAsBA,GACnD7Q,KAAK2M,IAAM,IAAIF,EAAmB1M,EAAIC,KAAK4Q,OAAO1B,YAAanP,EAAGyO,aAClExO,KAAKQ,aAAe,IAAI6N,EAAYtO,EAAIC,KAAK4Q,OAAOnB,YAEpD,IAAIpC,EAAS,IAAIW,EAAmBjO,GACpCsN,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GACtCf,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GAEtCpO,KAAKiN,IAAM,IAAID,EAAkBjN,GACjCC,KAAKiN,IAAI8D,kBAAkB/Q,KAAK2M,IAAKU,GAErCrN,KAAKS,OAAOuQ,YAAY,SAAU,IAAIvC,EAAa1O,EAAIC,KAAK0G,OAAOjF,QACnEzB,KAAKS,OAAOuQ,YAAY,QAAS,IAAIvC,EAAa1O,EAAIC,KAAK0G,OAAO/E,OAClE3B,KAAKS,OAAOuQ,YAAY,cAAe,IAAIvC,EAAa1O,EAAIC,KAAK0G,OAAO9E,aAExE5B,KAAKS,OAAOuQ,YAAY,UAAW,IAAInC,EAAa9O,EAAIkR,IAAK7P,WAAW,EAAG,EAAG,EAAG,KACjFpB,KAAKS,OAAOuQ,YAAY,UAAW,IAAIrC,EAAa5O,EAAI4Q,IA9B5D,wDAkCI3Q,KAAKyQ,SAASS,KAAKlR,KAAKiN,IAAKjN,KAAKQ,aAAcR,KAAKS,YAlCzD,K,uBCVM0Q,E,WACJ,WAAYtR,EAAMuR,GAAQ,oBACxBpR,KAAKH,KAAOA,EACZG,KAAKqR,OAASD,EACdpR,KAAKgE,UAAY,IAAIC,I,mDAYhBC,GACLlE,KAAKgE,UAAUjB,IAAImB,K,+BAGZA,GACPlE,KAAKgE,UAAUI,OAAOF,K,+BAGd,IAAD,gBACclE,KAAKgE,WADnB,IACP,2BAAqC,EACnCE,EADmC,SAC1BlE,OAFJ,iC,0BAjBCoR,GACRpR,KAAKqR,OAASD,EACdpR,KAAK4D,U,eAIL,OAAO5D,KAAKqR,W,KAkBHC,GAAb,kDACE,WAAYF,GAAQ,uCACZ,SAAUA,GAFpB,gDAMYG,GACR,6CAAcA,EAAd,UAPJ,eAWI,OAAO,uDAXX,GAA4BJ,GAefK,GAAb,kDACE,WAAY3H,EAAKR,EAAK+H,GAAQ,IAAD,8BAC3B,cAAM,SAAUA,IACXvH,IAAMA,EACX,EAAKR,IAAMA,EAHgB,EAD/B,kDAgBQkI,GAOJ,OANIA,EAAMvR,KAAK6J,MACb0H,EAAMvR,KAAK6J,KAET0H,EAAMvR,KAAKqJ,MACbkI,EAAMvR,KAAKqJ,KAENkI,IAvBX,0BAOYA,GACRA,EAAMvR,KAAKyR,MAAMF,GACjB,6CAAcA,EAAd,UATJ,eAaI,OAAO,uDAbX,GAA4BJ,GA2BfO,GAAb,kDACE,WAAYC,GAAmB,IAAD,EAATlE,EAAS,uDAAH,EAAG,4BAC5B,cAAM,WAAYA,IACbkE,QAAUA,EAFa,EADhC,gDAMYlE,GACRA,EAAQtL,KAAK0H,IAAI4D,EAAOzN,KAAK2R,QAAQzF,OAAO,GAC5C,6CAAcuB,EAAd,UARJ,eAYI,OAAO,qDAZX,qCAiBI,OADazN,KAAK2R,QAAQ3R,KAAKoR,WAhBnC,GAA8BD,G,QCtEjBrR,GAAb,WACI,WAAYC,EAAI6R,EAAOC,GAAS,oBAC5B7R,KAAKD,GAAKA,EACVC,KAAK4R,MAAL,cACIvN,KAAMlD,IAAKG,UACRsQ,GACP5R,KAAK6R,OAASA,EANtB,yDAUiBD,GACT5R,KAAK4R,MAAL,gBAAiB5R,KAAK4R,MAAtB,GAAgCA,KAXxC,iCAceC,GACP7R,KAAK6R,OAAL,gBAAkB7R,KAAK6R,OAAvB,GAAkCA,KAf1C,oCAmBkBA,GACV,IAAK,IAAIC,KAAOD,EAAQ,CACR7R,KAAK6R,OAAOC,GAClBV,MAAQS,EAAOC,GAEzB9R,KAAK6R,OAAL,gBAAkB7R,KAAK6R,UAxB/B,mCA4BiBpR,GAAS,IAAD,OACbV,EAAKC,KAAKD,GAEdU,EAAOuQ,YAAY,SAAU,IAAIvC,EAAa1O,EAAIC,KAAK4R,MAAMlL,OAAOjF,QACpEhB,EAAOuQ,YAAY,QAAS,IAAIvC,EAAa1O,EAAIC,KAAK4R,MAAMlL,OAAO/E,OACnElB,EAAOuQ,YAAY,cAAe,IAAIvC,EAAa1O,EAAIC,KAAK4R,MAAMlL,OAAO9E,aAEzEnB,EAAOuQ,YAAY,gBAAiB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAG6O,UAAH,MAAA7O,EAAE,CAAWgS,GAAX,mBAAmB,EAAKH,MAAMlL,OAAOxF,qBAC9FT,EAAOuQ,YAAY,YAAa,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAG6O,UAAUmD,EAAK,EAAKH,MAAMvN,KAAK,GAAI,EAAKuN,MAAMvN,KAAK,GAAI,EAAKuN,MAAMvN,KAAK,QAE7H5D,EAAOuQ,YAAY,gBAAyB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGiS,UAAUD,EAAK,OACjFtR,EAAOuQ,YAAY,sBAAyB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGiS,UAAUD,EAAK,OACjFtR,EAAOuQ,YAAY,uBAAyB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGiS,UAAUD,EAAK,SAxCzF,4EC0BME,GAAqB,SAACC,GAAD,ilCAqCjBA,EArCiB,6SA6GdC,GAAgB,CACzBC,SA3Ia,8hBA4IbC,SAAU,CACNlT,MA7DgB8S,GAAmB,sHA8DnCK,IAtDcL,GAAmB,gHAuDjCM,MA/CgBN,GAAmB,gVAgDnCO,OApCiBP,GAAmB,gVAqCpC7I,UAzBoB6I,GAAmB,kIA0BvCQ,oBAlB8BR,GAAmB,8JCrH5CS,GAAb,kDACI,WAAY3S,EAAI6R,EAAOC,GAAS,IAAD,sBAC3B,cAAM9R,EAAI6R,EAAOC,GADU,MAEac,GAAmB5S,GAFhC,0BAE1B,EAAKkN,IAFqB,KAEhB,EAAK2F,IAFW,KAEN,EAAKnD,WAFC,KAG3B,EAAKoD,WAAW,CACZC,UAAW,IAAItB,GAAO,EAAG,EAAG,KAC5BuB,YAAa,IAAIvB,GAAO,GAAK,EAAG,KAEpC,EAAKwB,gBACL,EAAKnB,OAAOK,UAAUe,QAAO,WACzB,EAAKD,mBATkB,EADnC,4DAeQ,IAAIE,EAASlT,KAAK6R,OAAOK,UAAUiB,eAC/Bf,EAAWD,GAAcC,SACzBC,EAAWF,GAAcE,SAASa,GACtClT,KAAKS,OAAS,IAAIyJ,EAAOlK,KAAKD,GAAIqS,EAAUC,GAC5CrS,KAAKoT,aAAapT,KAAKS,UAnB/B,mCAsBiBA,GAAS,IAAD,OACjB,oEAAmBA,GACnB,IAAIV,EAAKC,KAAKD,GACdU,EAAOuQ,YAAY,aAAc,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOiB,UAAU1B,WAC5F3Q,EAAOuQ,YAAY,cAAe,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOkB,YAAY3B,aA1BvG,6BA8BQpR,KAAKS,OAAOC,OACZV,KAAKiN,IAAIvM,OACTV,KAAK4S,IAAIlS,SAhCjB,kCAoCQ,IAAIX,EAAKC,KAAKD,GACdA,EAAGY,aAAaZ,EAAGa,UAAWZ,KAAK4S,IAAI/R,MAAOd,EAAGe,aAAc,OArCvE,GAAoChB,IAyC9B6S,GAAqB,SAAC5S,GAC1B,IAAIsN,EAAS,IAAIW,EAAmBjO,GACpCsN,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GAEtC,IAAIc,EAAcS,EAAeT,YAAY,EAAG,EAAG,EAAG,EAAG,EAAG,GACxDO,EAAaE,EAAeF,WAE5B9C,EAAM,IAAIF,EAAmB1M,EAAImP,EAAanP,EAAGyO,aACjDoE,EAAM,IAAIvE,EAAYtO,EAAI0P,GAE1BxC,EAAM,IAAID,EAAkBjN,GAGhC,OAFAkN,EAAI8D,kBAAkBpE,EAAKU,GAEpB,CAACJ,EAAK2F,EAAKnD,ICoGPrF,GAAsB,CAC/BkJ,MAtKkB,SAACC,GAAD,+nFAuKlBC,gBAvE4B,SAACD,GAAD,wzCAwE5BE,WArBqB,SAACF,GAAD,mIASvBA,EAAc,GAAK,mBATI,aAUvBA,EAAc,GAAK,oBAVI,gHCxFnBG,GAAc,YA3DE,iSA2DF,aAVG,2KAUH,aAjDO,ssBAiDP,aApBD,qKAoBC,MAqBdC,GAAuB,SAACJ,GAAD,8JAS3BA,EAAc,GAAK,kBATQ,oZA4B3BA,EAAc,GAAK,oBA5BQ,aA6B3BA,EAAc,GAAK,qBA7BQ,eA+B3BG,GA/B2B,OAmCvBE,GAAuB,SAACL,GAAD,kBAE3BA,EACE,wDACA,kCAJyB,wGAS3BA,EAAc,GAAK,oBATQ,aAU3BA,EAAc,GAAK,kDAVQ,kDAuFhBpJ,GAAoB,CAC7BhL,MAzEwB,SAACoU,GAAD,gBACzBI,GAAqBJ,GADI,gCA9DE,8RA8DF,wIAMtBK,GAAqBL,GANC,QA0ExBjB,IAjEuB,SAACiB,GAAD,gBACxBI,GAAqBJ,GADG,gCAvEG,8RAuEH,6KAOrBK,GAAqBL,GAPA,UAkEvBhB,MAvDyB,SAACgB,GAAD,gBAC1BI,GAAqBJ,GADK,gCAlFC,8RAkFD,mUAUvBK,GAAqBL,GAVE,QAwDzBf,OA3C0B,SAACe,GAAD,gBAC3BI,GAAqBJ,GADM,gCA/FA,8RA+FA,6aAaxBK,GAAqBL,GAbG,QA4C1BnK,UA5B6B,SAACmK,GAAD,gBAC9BI,GAAqBJ,GADS,gCA/GH,8RA+GG,yOAQ3BK,GAAqBL,GARM,QA6B7Bd,oBAlBuC,SAACc,GAAD,gBACxCI,GAAqBJ,GADmB,gCA1Hb,8RA0Ha,wPAQrCK,GAAqBL,GARgB,SCnL9BM,GAAb,kDACI,WAAY9T,EAAI6R,EAAOC,GAAS,IAAD,8BAC3B,cAAM9R,EAAI6R,EAAOC,IACZgB,WAAW,CACZiB,WAAY,IAAIpC,GAAS,CAAC,OAAQ,QAClCqC,WAAY,IAAIvC,GAAO,EAAG,EAAG,GAC7BsB,UAAW,IAAItB,GAAO,EAAG,EAAG,KAC5BwC,gBAAiB,IAAI1C,GAAO,KAEhC,EAAK/N,KAAO,CACR0Q,KAAMC,GAAiBnU,GACvBoU,IAAKC,GAAqBrU,IAE9B,EAAKiT,gBACL,EAAKnB,OAAOK,UAAUe,QAAO,SAAAf,GACzB,EAAKc,mBAdkB,EADnC,4DAoBQ,IAAIE,EAASlT,KAAK6R,OAAOK,UAAUiB,eAC/Bf,EAAWjI,GAAkB+I,IAAQ,GACrCb,EAAWjI,GAAoBqJ,YAAW,GAC9CzT,KAAKS,OAAS,IAAIyJ,EAAOlK,KAAKD,GAAIqS,EAAUC,GAC5CrS,KAAKoT,aAAapT,KAAKS,UAxB/B,mCA2BiBA,GAAS,IAAD,OACjB,oEAAmBA,GACnB,IAAIV,EAAKC,KAAKD,GACdU,EAAOuQ,YAAY,cAAe,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOkC,WAAW3C,WAC9F3Q,EAAOuQ,YAAY,aAAc,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOiB,UAAU1B,WAC5F3Q,EAAOuQ,YAAY,kBAAmB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGiS,UAAUD,EAAK,EAAKF,OAAOmC,gBAAgB5C,aAhC/G,6BAwCQpR,KAAKS,OAAOC,OACZ,IAAI6C,EAAOvD,KAAKqU,aAChB9Q,EAAK0J,IAAIvM,OACT6C,EAAKqP,IAAIlS,SA3CjB,kCA+CQ,IAAIX,EAAKC,KAAKD,GACVwD,EAAOvD,KAAKqU,aACZhQ,EAAOrE,KAAK4R,MAAMvN,KAClBkD,EAAclD,EAAK,GAAGA,EAAK,GAAGA,EAAK,GACvCtE,EAAGuU,sBAAsBvU,EAAGa,UAAW2C,EAAKqP,IAAI/R,MAAOd,EAAGe,aAAcyC,EAAKkM,WAAYlI,KAnDjG,mCAoCQ,OAAOvH,KAAKuD,KAAKvD,KAAK6R,OAAOiC,WAAWX,oBApChD,GAAwCrT,IAwDlCoU,GAAmB,SAACnU,GACtB,IAAIsN,EAAS,IAAIW,EAAmBjO,GACpCsN,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GAEtC,IAAIc,EAAc,IAAIhP,aAAa,CAAC,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,KACtCuP,EAAa,IAAIC,YAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7C/C,EAAM,IAAIF,EAAmB1M,EAAImP,EAAanP,EAAGyO,aACjDoE,EAAM,IAAIvE,EAAYtO,EAAI0P,GAE1BxC,EAAM,IAAID,EAAkBjN,GAEhC,OADAkN,EAAI8D,kBAAkBpE,EAAKU,GACpB,CAACJ,IAAKA,EAAK2F,IAAKA,EAAKnD,WAAYA,IAItC2E,GAAuB,SAACrU,GAC1B,IAAIsN,EAAS,IAAIW,EAAmBjO,GACpCsN,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GAEtC,IAAIc,EAAc,IAAIhP,aAAa,EAAE,IAAM,GAAK,GACZ,KAAM,GAAK,GACX,IAAM,IAAK,KAC3CuP,EAAa,IAAIC,YAAY,CAAC,EAAG,EAAG,IAEpC/C,EAAM,IAAIF,EAAmB1M,EAAImP,EAAanP,EAAGyO,aACjDoE,EAAM,IAAIvE,EAAYtO,EAAI0P,GAE1BxC,EAAM,IAAID,EAAkBjN,GAEhC,OADAkN,EAAI8D,kBAAkBpE,EAAKU,GACpB,CAACJ,IAAKA,EAAK2F,IAAKA,EAAKnD,WAAYA,ICrF/B8E,GAAb,kDACI,WAAYxU,EAAI6R,EAAOC,GAAS,IAAD,uBAC3B,cAAM9R,EAAI6R,EAAO,KACZ4C,eAAiB,CAClBC,iBAAkB,IAAIjD,GAAO,EAAG,EAAG,IACnCkD,iBAAkB,IAAIlD,GAAO,EAAG,EAAG,KACnCmD,kBAAmB,IAAInD,GAAO,EAAG,EAAG,IACpCoD,sBAAuB,IAAIpD,GAAO,EAAG,IAAO,GAC5CwC,gBAAiB,IAAI1C,GAAO,GAC5BuD,SAAU,IAAIrD,GAAO,EAAG,EAAG,GAC3BsD,QAAS,IAAItD,GAAO,EAAG,EAAG,GAC1BuD,aAAc,IAAIvD,GAAO,EAAG,EAAG,KAC/BwD,aAAc,IAAIxD,GAAO,EAAG,EAAG,KAC/BuC,WAAY,IAAIvC,GAAO,EAAG,EAAG,GAC7BsB,UAAW,IAAItB,GAAO,EAAG,EAAG,IAGhC,EAAKyD,cAAL,gBACOpD,EADP,CAEIqD,QAAS,IAAIxD,GAASyD,OAAOC,KAAKhL,OAGtC,EAAKiL,aAAe,CAClB/B,MAAO,CAAC,YAAa,eAAgB,eAAgB,WAAY,UAAW,mBAC5EE,gBAAiB,CAAC,YAAa,mBAAoB,mBAAoB,oBAAqB,wBAAyB,mBACrHC,WAAY,CAAC,YAAa,aAAc,oBAG1C,EAAK6B,aAAa,CACdC,eAAgBpU,IAAKG,WA5BE,MA8BakU,GAAiBzV,GA9B9B,0BA8B1B,EAAKkN,IA9BqB,KA8BhB,EAAK2F,IA9BW,KA8BN,EAAKnD,WA9BC,KA+B3B,EAAKuD,gBACL,EAAKnB,OAAOK,UAAUe,QAAO,kBAAM,EAAKD,mBACxC,EAAKnB,OAAOqD,QAAQjC,QAAO,kBAAM,EAAKD,mBAjCX,EADnC,4DAsCQhT,KAAKyV,cACL,IAAIvC,EAASlT,KAAKiV,cAAc/C,UAAUiB,eACtC+B,EAAUlV,KAAKiV,cAAcC,QAAQ/B,eACrCf,EAAWjI,GAAkB+I,IAAQ,GACrCb,EAAWjI,GAAoB8K,IAAS,GAC5ClV,KAAKS,OAAS,IAAIyJ,EAAOlK,KAAKD,GAAIqS,EAAUC,GAC5CrS,KAAKoT,aAAapT,KAAKS,UA5C/B,oCAiDQ,IADU,EACNoR,EAAS,GACTqD,EAAUlV,KAAKiV,cAAcC,QAAQ/B,eACrCiC,EAAOpV,KAAKqV,aAAaH,GAHnB,cAIME,GAJN,IAIV,2BAAsB,CAAC,IAAdtD,EAAa,QAClBD,EAAOC,GAAO9R,KAAKwU,eAAe1C,IAL5B,8BAOV9R,KAAK6R,OAAL,gBAAkB7R,KAAKiV,cAAvB,GAAyCpD,KAvDjD,mCA0DiBpR,GAAS,IAAD,OACjB,oEAAmBA,GACnB,IAAIV,EAAKC,KAAKD,GAEdU,EAAOuQ,YAAY,iBAAkB,IAAIrC,EAAa5O,EAAIC,KAAK4R,MAAM2D,iBACrE9U,EAAOuQ,YAAY,eAAgB,IAAIrC,EAAa5O,EAAIoB,IAAKC,WAAW,EAAE,EAAE,KAE5EX,EAAOuQ,YAAY,mBAAoB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAO4C,iBAAiBrD,WACzG3Q,EAAOuQ,YAAY,mBAAoB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAO6C,iBAAiBtD,WACzG3Q,EAAOuQ,YAAY,oBAAqB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAO8C,kBAAkBvD,WAC3G3Q,EAAOuQ,YAAY,uBAAwB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAO+C,sBAAsBxD,WAClH3Q,EAAOuQ,YAAY,cAAe,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOkC,WAAW3C,WAC9F3Q,EAAOuQ,YAAY,aAAc,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOiB,UAAU1B,WAE5F3Q,EAAOuQ,YAAY,kBAAmB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGiS,UAAUD,EAAK,EAAKF,OAAOmC,gBAAgB5C,WACvG3Q,EAAOuQ,YAAY,WAAY,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOgD,SAASzD,WACzF3Q,EAAOuQ,YAAY,UAAW,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOiD,QAAQ1D,WACvF3Q,EAAOuQ,YAAY,eAAgB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOkD,aAAa3D,WACjG3Q,EAAOuQ,YAAY,eAAgB,IAAIjC,GAAQ,SAAAgD,GAAG,OAAIhS,EAAGsT,UAAUtB,EAAK,EAAKF,OAAOmD,aAAa5D,aA5EzG,6BAgFQpR,KAAKS,OAAOC,OACZV,KAAKiN,IAAIvM,OACTV,KAAK4S,IAAIlS,SAlFjB,kCAsFQ,IAAIX,EAAKC,KAAKD,GACVsE,EAAOrE,KAAK4R,MAAMvN,KAClBkD,EAAclD,EAAK,GAAGA,EAAK,GAAGA,EAAK,GACvCtE,EAAGuU,sBAAsBvU,EAAGa,UAAWZ,KAAK4S,IAAI/R,MAAOd,EAAGe,aAAcd,KAAKyP,WAAYlI,OAzFjG,GAAmCzH,IA6F7B0V,GAAmB,SAACzV,GACxB,IAAIsN,EAAS,IAAIW,EAAmBjO,GACpCsN,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GACtCf,EAAOyD,eAAe,EAAG,EAAG/Q,EAAGqO,OAAO,GAEtC,IAAIc,EAAcD,EAAKC,YAAY,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9CO,EAAaR,EAAKQ,WAElB9C,EAAM,IAAIF,EAAmB1M,EAAImP,EAAanP,EAAGyO,aACjDoE,EAAM,IAAIvE,EAAYtO,EAAI0P,GAE1BxC,EAAM,IAAID,EAAkBjN,GAGhC,OAFAkN,EAAI8D,kBAAkBpE,EAAKU,GAEpB,CAACJ,EAAK2F,EAAKnD,IClHPiG,GAAb,WACE,WAAY3V,EAAI2G,GAAS,oBACvB1G,KAAKD,GAAKA,EACVC,KAAKqE,KAAOlD,IAAKG,SACjBtB,KAAK0G,OAASA,EAEd,IAAIkL,EAAQ,CACVvN,KAAMrE,KAAKqE,KACXqC,OAAQ1G,KAAK0G,QAGf1G,KAAKiV,cAAgB,CACnB/C,UAAW,IAAIR,GAASyD,OAAOC,KAAKjL,MAGtCnK,KAAK2V,UAAY,CACfC,OAAQ,IAAIlD,GAAe3S,EAAI6R,EAAO5R,KAAKiV,eAC3CY,MAAO,IAAIhC,GAAmB9T,EAAI6R,EAAO5R,KAAKiV,eAC9Ca,MAAO,IAAIvB,GAAcxU,EAAI6R,EAAO5R,KAAKiV,gBAG3CjV,KAAK+V,cAAgB,IAAIrE,GAASyD,OAAOC,KAAKpV,KAAK2V,YArBvD,qDAwBWtR,GACPrE,KAAKqE,KAAOA,EACZ8Q,OAAOa,OAAOhW,KAAK2V,WAAWM,SAAQ,SAAAxF,GACpCA,EAAS6E,aAAa,CAACjR,KAAMA,SA3BnC,sCAoCkBoJ,GACdzN,KAAK+V,cAAc3E,MAAQ3D,IArC/B,oCA4CgBoE,GACZ7R,KAAKkW,iBAAiBC,cAActE,KA7CxC,6BAiDI7R,KAAKkW,iBAAiBxV,SAjD1B,kCAqDIV,KAAKkW,iBAAiBjM,cArD1B,uCAgCI,IAAI6H,EAAM9R,KAAK+V,cAAc5C,eAC7B,OAAOnT,KAAK2V,UAAU7D,KAjC1B,6BAyCI,OAAO9R,KAAKkW,iBAAiBrE,WAzCjC,KCRMuE,G,WACF,aAAe,oBACXpW,KAAKmJ,eAAiB,G,6DAGTgH,EAAGC,EAAGC,EAAGxM,EAAMU,GAG5B,IAFA,IAAI8R,EAAmB,EAEdC,GAAQ,EAAGA,GAAQ,EAAGA,IAC3B,IAAK,IAAIC,GAAQ,EAAGA,GAAQ,EAAGA,IAC3B,IAAK,IAAIC,GAAQ,EAAGA,GAAQ,EAAGA,IAC3B,GAAa,IAATF,GAAuB,IAATC,GAAuB,IAATC,EAAhC,CAGA,IAAMC,EAAKC,GAAQvG,EAAEmG,EAAMzS,EAAKgB,MAAM,IAChC8R,EAAKD,GAAQtG,EAAEmG,EAAM1S,EAAKgB,MAAM,IAChC+R,EAAKF,GAAQrG,EAAEmG,EAAM3S,EAAKgB,MAAM,IAEhCsD,EAAItE,EAAKgT,SAASJ,EAAIE,EAAIC,GAC1BzX,EAAQ0E,EAAKyF,MAAMnB,GACrB5D,EAAKuS,aAAa3X,KAClBkX,GAAoB,GAKpC,OAAOA,I,yCAIQlG,EAAGC,EAAGC,EAAGxM,EAAMkT,GAC9B,IAAK,IAAIT,GAAQ,EAAGA,GAAQ,EAAGA,IAC3B,IAAK,IAAIC,GAAQ,EAAGA,GAAQ,EAAGA,IAC3B,IAAK,IAAIC,GAAQ,EAAGA,GAAQ,EAAGA,IAAQ,CACnC,IAAMC,EAAKC,GAAQvG,EAAEmG,EAAMzS,EAAKgB,MAAM,IAChC8R,EAAKD,GAAQtG,EAAEmG,EAAM1S,EAAKgB,MAAM,IAChC+R,EAAKF,GAAQrG,EAAEmG,EAAM3S,EAAKgB,MAAM,IAEhCsD,EAAItE,EAAKgT,SAASJ,EAAIE,EAAIC,GAChCG,EAAQhU,IAAIoF,Q,KAQ1B6O,G,WACF,aAAe,oBACXhX,KAAKiX,QAAU,GACf,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,IAAIC,EAAI,CAAC,EAAG,EAAG,GACXC,EAAI,CAAC,EAAG,EAAG,GACfD,EAAED,GAAO,EACTE,EAAEF,IAAQ,EACVlX,KAAKiX,QAAQjL,KAAKmL,GAClBnX,KAAKiX,QAAQjL,KAAKoL,GAEtBpX,KAAKmJ,eAAiB,E,6DAGTgH,EAAGC,EAAGC,EAAGxM,EAAMU,GAC5B,IADkC,EAC9B8R,EAAmB,EADW,cAGlBrW,KAAKiX,SAHa,IAGlC,2BAA8B,CAAC,IAAtBI,EAAqB,QACpBZ,EAAKC,GAAQvG,EAAEkH,EAAI,GAAIxT,EAAKgB,MAAM,IAClC8R,EAAKD,GAAQtG,EAAEiH,EAAI,GAAIxT,EAAKgB,MAAM,IAClC+R,EAAKF,GAAQrG,EAAEgH,EAAI,GAAIxT,EAAKgB,MAAM,IAElCsD,EAAItE,EAAKgT,SAASJ,EAAIE,EAAIC,GAE1BzX,EAAQ0E,EAAKyF,MAAMnB,GACrB5D,EAAKuS,aAAa3X,KAClBkX,GAAoB,IAZM,8BAelC,OAAOA,I,yCAGQlG,EAAGC,EAAGC,EAAGxM,EAAMkT,GAC9B,IAAI5O,EAAItE,EAAKgT,SAAS1G,EAAGC,EAAGC,GAC5B0G,EAAQhU,IAAIoF,GAF2B,oBAKvBnI,KAAKiX,SALkB,IAKvC,2BAA8B,CAAC,IAAtBI,EAAqB,QACpBZ,EAAKC,GAAQvG,EAAEkH,EAAI,GAAIxT,EAAKgB,MAAM,IAClC8R,EAAKD,GAAQtG,EAAEiH,EAAI,GAAIxT,EAAKgB,MAAM,IAClC+R,EAAKF,GAAQrG,EAAEgH,EAAI,GAAIxT,EAAKgB,MAAM,IAExCsD,EAAItE,EAAKgT,SAASJ,EAAIE,EAAIC,GAC1BG,EAAQhU,IAAIoF,IAXuB,mC,KAkB/C,SAASuO,GAAQS,EAAGC,GAChB,OAAUD,EAAIC,EAAKA,GAAKA,EAGd,IAAIhB,GACP,IAAIY,GADf,ICnGMM,G,WACF,WAAYzX,EAAMgS,GAAS,oBACvB7R,KAAKH,KAAOA,EACZG,KAAK6R,OAASA,E,sDAId,IAAIA,EAAS,GACb,IAAK,IAAIC,KAAO9R,KAAK6R,OACjBA,EAAOC,GAAO9R,KAAK6R,OAAOC,GAAKV,MAEnC,MAAO,CACHvR,KAAMG,KAAKH,KACXgS,OAAQA,O,KAKP0F,GAAb,kDACI,aAAsC,IAA1BC,EAAyB,uDAAjB,GAAKhF,EAAY,uDAAL,GAAK,uCAC3B,eAAgB,CAClBgF,QAAS,IAAIhG,GAAO,EAAG,EAAGgG,GAC1BhF,OAAQ,IAAIhB,GAAO,EAAG,GAAKgB,KAJvC,UAA2C8E,IAS9BG,GAAb,kDACI,aAAoC,IAAxBD,EAAuB,uDAAf,GAAKhF,EAAU,uDAAH,EAAG,uCACzB,wBAAyB,CAC3BgF,QAAS,IAAIhG,GAAO,EAAG,EAAGgG,GAC1BhF,OAAQ,IAAIhB,GAAO,EAAG,IAAKgB,KAJvC,UAAmD8E,IAStCI,GAAb,WACI,WAAYC,EAAQC,EAAQxP,EAAcgB,GAAY,oBAClDpJ,KAAK2X,OAASA,EACd3X,KAAK4X,OAASA,EACd5X,KAAKoI,aAAeA,EACpBpI,KAAKoJ,UAAYA,EALzB,sDASQ,OAAOpJ,SATf,KAaa6X,GAAb,WACI,WAAYhY,EAAMwJ,GAAM,oBACpBrJ,KAAKH,KAAOA,EACZG,KAAKqJ,IAAMA,EAHnB,sDAOQ,OAAOrJ,SAPf,KCjDM8X,GAAiB,CACrB,EAAK,IAAID,GAAoB,IAAK,IAClC,GAAM,IAAIA,GAAoB,KAAM,IAGzBE,GAAb,iGACWC,GAEP,IAAIC,GADJD,EAASA,EAAOE,QAAQ,IAAK,KACL7L,MAAM,KAC9B,GAA0B,IAAtB4L,EAAW/L,OACb,MAAM,IAAIjB,MAAJ,+BAAkC+M,IAJ3B,kBAM6CC,EAN7C,GAMVE,EANU,KAMIC,EANJ,KAMkBhQ,EANlB,KAMgCgB,EANhC,KASf,QAAkCiP,IAA9BP,GAAe1O,GACjB,MAAM,IAAI6B,MAAJ,sCAAyC7B,IAGjDhB,EAAekQ,OAAOlQ,GACtBgB,EAAY0O,GAAe1O,GAC3B,IAAIuO,EAAS3X,KAAKuY,cAAcJ,GAC5BP,EAAS5X,KAAKuY,cAAcH,GAEhC,OAAO,IAAIV,GAAeC,EAAQC,EAAQxP,EAAcgB,KAnB5D,oCAsBgBoP,GACZ,IAAIC,EAAI,IAAIC,MAAM,IAClBD,EAAEE,MAAK,EAAO,GAAI,GAElB,IAJ0B,EAItBC,EAAUJ,EAAanM,MAAM,KAJP,cAKPuM,GALO,IAK1B,2BAA4B,CAAC,IACvBpS,EADsB,QACP6F,MAAM,KAAKC,IAAIgM,QAClC,GAAqB,IAAjB9R,EAAM0F,OAAc,CACtB,IAAIiL,EAAI3Q,EAAM,GACdxG,KAAK6Y,cAAc1B,GAEnBsB,EAAEtB,IAAK,MACF,IAAqB,IAAjB3Q,EAAM0F,OAUf,MAAM,IAAIjB,MAAJ,qCAAwCuN,EAAxC,qBAVwB,IAAD,cACVhS,EADU,GACxBsC,EADwB,KACjBgB,EADiB,KAE7B,GAAIA,EAAMhB,EACR,MAAM,IAAImC,MAAJ,yBAA4BnC,EAA5B,YAAqCgB,EAArC,uBAER,IAAK,IAAIqN,EAAIrO,EAAOqO,GAAKrN,EAAKqN,IAC5BnX,KAAK6Y,cAAc1B,GACnBsB,EAAEtB,IAAK,IAnBa,8BA0B1B,OAAOsB,IAhDX,oCAoDgBtB,GACZ,GAAIA,EAAI,GAAKA,EAAI,GACf,MAAM,IAAIlM,MAAJ,0BAA6BkM,EAA7B,kCAtDZ,KCHa2B,GAAb,WACE,WAAYC,GAAqB,oBAC/B/Y,KAAKgZ,QAAU,GACfhZ,KAAK+Y,mBAAqBA,EAE1B/Y,KAAKiZ,UACH,IAAIC,GACF,MACA,UACA,IAAI3B,GAAsB,IAAM,MAGpCvX,KAAKiZ,UACH,IAAIC,GACF,UACA,cACA,IAAI3B,GAAsB,MAE9BvX,KAAKiZ,UACH,IAAIC,GACF,SACA,wBACA,IAAIzB,GAA8B,GAAK,KAG3CzX,KAAKiZ,UACH,IAAIC,GACF,YACA,qBAEA,IAAIzB,GAA8B,IAAM,KAI5CzX,KAAKiZ,UACH,IAAIC,GACF,YAEA,mBACA,IAAIzB,GAA8B,IAAM,KAI5CzX,KAAKiZ,UACH,IAAIC,GACF,WACA,wBACA,IAAI3B,GAAsB,GAAK,MAInCvX,KAAKiZ,UACH,IAAIC,GACF,eACA,oDACA,IAAIzB,GAA8B,GAAK,KAI3CzX,KAAKiZ,UACH,IAAIC,GACF,mBACA,eACA,IAAIzB,GAA8B,EAAK,KAI3CzX,KAAKiZ,UACH,IAAIC,GACF,mBACA,eACA,IAAIzB,GAA8B,EAAK,KAI3CzX,KAAKiZ,UACH,IAAIC,GACF,cACA,eACA,IAAIzB,GAA8B,GAAK,KAI3CzX,KAAKiZ,UACH,IAAIC,GACF,aAEA,uBACA,IAAI3B,GAAsB,IAAM,KAIpCvX,KAAKgE,UAAY,IAAIC,IACrBjE,KAAKmZ,OAAO,GA7FhB,0DAgGgBjV,GACZlE,KAAKgE,UAAUjB,IAAImB,KAjGvB,6BAoGSiD,GAAQ,IAAD,gBACSnH,KAAKgE,WADd,IACZ,2BAAqC,EACnCE,EADmC,SAC1BiD,IAFC,iCApGhB,6BA8GS+I,GACLlQ,KAAKoZ,cAAgBlJ,EACrB,IAAI/I,EAAQnH,KAAKkJ,eACjBlJ,KAAK4D,OAAOuD,KAjHhB,gCAoHYA,GACR,IAAI3C,EAAa2C,EAAM3C,WACnBD,EAAO4C,EAAM5C,KACjBC,EAAW6U,YAAc9U,EAAK8U,YAC9B7U,EAAW8U,WAAa/U,EAAK+U,WAC7BtZ,KAAKgZ,QAAQhN,KAAK7E,KAzHtB,qCA2GI,OAAOnH,KAAKgZ,QAAQhZ,KAAKoZ,mBA3G7B,KA6HMF,GACJ,WAAYtN,EAAM2N,EAAW/U,GAAa,oBACxCxE,KAAK4L,KAAOA,EACZ5L,KAAKwZ,YAAcD,EACnB,IACIhV,GADS,IAAIwT,IACCjI,SAASyJ,GAC3BvZ,KAAKuE,KAAOA,EACZvE,KAAKwE,WAAaA,GCxITiV,GAAb,WACI,WAAYC,GAAQ,oBAChB1Z,KAAK0Z,MAAQA,EACb1Z,KAAKuD,KAAO,CACRoW,iBAAkB,EAClBC,WAAY,EACZC,aAAc,EACdC,YAAa,EACbC,oBAAqB,EACrBC,oBAAqB,EACrBC,UAAW,GAVvB,2DAcoB,IAAD,OACXja,KAAK0Z,MAAMna,UAAS,SAACA,GACjB2a,YAAW,WACP3a,EAAS,CACLM,KAAM,eACNuR,MAAO,MAEZ,QArBf,8BAyBYU,GAAuB,IAAlBV,EAAiB,4DAAXiH,OACDA,IAAVjH,EACApR,KAAKma,YAAYrI,EAAKV,GAEtBpR,KAAKoa,cAActI,KA7B/B,kCAiCgBA,EAAKV,GACbpR,KAAKuD,KAAKuO,GAAOV,EACjBpR,KAAKuD,KAAL,gBAAgBvD,KAAKuD,MACrBvD,KAAKqa,iBApCb,oCAuCkB9W,GACV,IAAK,IAAIuO,KAAOvO,EAAM,CAClB,IAAI6N,EAAQ7N,EAAKuO,GACjB9R,KAAKuD,KAAKuO,GAAOV,EAErBpR,KAAKuD,KAAL,gBAAgBvD,KAAKuD,MACrBvD,KAAKqa,mBA7Cb,KCEaC,GAAb,WACI,aAAe,oBACXta,KAAKgZ,QAAU,GAEfhZ,KAAKua,eAAe,IAAIhD,IACxBvX,KAAKua,eAAe,IAAI9C,IAExBzX,KAAKoZ,cAAgB,EACrBpZ,KAAKgE,UAAY,IAAIC,IAR7B,0DAWkBC,GACVlE,KAAKgE,UAAUjB,IAAImB,KAZ3B,6BAeWM,GAAa,IAAD,gBACMxE,KAAKgE,WADX,IACf,2BAAqC,EACjCE,EADiC,SACxBM,IAFE,iCAfvB,qCAqBmBA,GACXxE,KAAKgZ,QAAQhN,KAAKxH,KAtB1B,wCAyBsBA,GAEd,IAF2B,IACtB3E,EAAgB2E,EAAhB3E,KAAMgS,EAAUrN,EAAVqN,OACF1J,EAAI,EAAGA,EAAInI,KAAKgZ,QAAQ9M,OAAQ/D,IAAK,CAC1C,IAAIqS,EAAQxa,KAAKgZ,QAAQ7Q,GACzB,GAAIqS,EAAM3a,OAASA,EAAnB,CAEA,IAAK,IAAIiS,KAAOD,EACZ2I,EAAM3I,OAAOC,GAAKV,MAAQS,EAAOC,GAAKV,MAE1CoJ,EAAM3I,OAAN,gBAAmB2I,EAAM3I,QACzB7R,KAAKoZ,cAAgBjR,EACrB,UApCZ,qCAwCmB2J,EAAKV,GACJpR,KAAK4I,mBAAmBiJ,OAAOC,GACrCV,MAAQA,EACdpR,KAAK4I,mBAAmBiJ,OAAxB,gBAAqC7R,KAAK4I,mBAAmBiJ,UA3CrE,6BA8CWpE,GACHzN,KAAKoZ,cAAgB3L,EACrBzN,KAAK4D,OAAO5D,KAAK4I,sBAhDzB,yCAoDQ,OAAO5I,KAAKgZ,QAAQhZ,KAAKoZ,mBApDjC,KCUaqB,GAAb,WACE,WAAY1a,EAAI2Z,GAAQ,IAAD,2BACrB1Z,KAAKD,GAAKA,EACVC,KAAK0Z,MAAQA,EAEb3Z,EAAG2a,OAAO3a,EAAG4a,YACb5a,EAAG2a,OAAO3a,EAAG6a,OACb7a,EAAG2a,OAAO3a,EAAG8a,WACb9a,EAAG+a,SAAS/a,EAAGgb,MACfhb,EAAGib,UAAUjb,EAAGkb,UAAWlb,EAAGmb,qBAG9Blb,KAAKyQ,SAAW,IAAI3Q,EAASC,GAC7BC,KAAK0G,OAAS,IAAI3F,EAElBf,KAAK2G,eAAiB,IAAI+O,GAAc3V,EAAIC,KAAK0G,QACjD1G,KAAK+Y,mBAAqB,IAAIuB,GAC9Bta,KAAK4G,cAAgB,IAAIkS,GAAa9Y,KAAK+Y,oBAC3C/Y,KAAKiD,MAAQ,IAAIwW,GAAWzZ,KAAK0Z,OACjC1Z,KAAKX,IAAM,IAAIoH,EAAmB1G,EAAIC,KAAK0G,OAAQ1G,KAAK2G,eAAgB3G,KAAK4G,cAAe5G,KAAK+Y,mBAAoB/Y,KAAKiD,OAG1HjD,KAAKwH,SAASrG,IAAKC,WADX,cAGRpB,KAAKmb,YAAc,IAAI7J,IAAO,GAC9BtR,KAAKob,YAAc,IAAI9J,IAAO,GAE9BtR,KAAK4G,cAAcI,eAAc,SAACG,GAChC,EAAK4R,mBAAmBsC,kBAAkBlU,EAAM3C,eAIlDxE,KAAK4G,cAAcuS,OAAO,GAC1BnZ,KAAK2G,eAAewP,cAAc,CAACjE,UAAW,IAC9ClS,KAAKX,IAAIwJ,YAlCb,qDAqCWxE,GACP,IAAItE,EAAKC,KAAKD,GACdC,KAAKqE,KAAOA,EACZrE,KAAKX,IAAImI,SAASnD,GAClBrE,KAAK2G,eAAea,SAASnD,GAC7BrE,KAAK4Q,OAAS,IAAIJ,EAAOzQ,EAAIC,KAAKqE,KAAMrE,KAAKyQ,SAAUzQ,KAAK0G,QAE5D1G,KAAK0G,OAAOlF,kBAAoBL,IAAKG,SACrCH,IAAKa,MAAMhC,KAAK0G,OAAOlF,kBAAmBxB,KAAKqE,MAAO,IAItD,IAAIiX,EAAWnZ,KAAKkH,IAAL,MAAAlH,KAAI,YAAQkC,IACvBkX,EAsDR,SAAgBC,GAGd,IAFA,IAAIC,EAAQ,EACRC,EAAUF,EAAK,GACVrT,EAAI,EAAGA,EAAIqT,EAAKtP,OAAQ/D,IAAK,CACpC,IAAIoJ,EAAMiK,EAAKrT,GACXoJ,EAAMmK,IACRA,EAAUnK,EACVkK,EAAQtT,GAGZ,OAAOsT,EAhEWE,CAAO,YAAItX,IAE3BrE,KAAK0G,OAAOxF,cAAgBC,IAAKG,SACjCtB,KAAK0G,OAAOxF,cAAcqa,GAAsB,IAATD,EAErB,IAAdC,IACFvb,KAAK0G,OAAOxF,cAAc,GAAK,KAxDrC,4BA+DI0a,sBAAsB5b,KAAK6b,KAAKnb,KAAKV,SA/DzC,6BAmEIA,KAAK8b,YACL9b,KAAKiK,YACL2R,sBAAsB5b,KAAK6b,KAAKnb,KAAKV,SArEzC,+BAyEI,IAAID,EAAKC,KAAKD,GACVgc,EAAShc,EAAGgc,OAEZpS,EAAQoS,EAAOC,YACfC,EAASF,EAAOG,aAEhBvS,IAAUoS,EAAOpS,OAASsS,IAAWF,EAAOE,SAGhDF,EAAOpS,MAAQA,EACfoS,EAAOE,OAASA,EAChBlc,EAAGoc,SAAS,EAAG,EAAGxS,EAAOsS,GACzBjc,KAAK0G,OAAOzF,aAAe0I,EAAMsS,KArFrC,kCAyFIjc,KAAKX,IAAIyc,cAzFb,kCA6FI9b,KAAKoc,SACLpc,KAAKyQ,SAASrQ,QACVJ,KAAKmb,YAAY/J,OACnBpR,KAAK4Q,OAAO3G,YAEVjK,KAAKob,YAAYhK,OACnBpR,KAAKX,IAAI4K,gBAnGf,KCoFO,SAASoS,GAAYC,GACxB,IAAIC,EAAmBD,GAAc,CACjCE,YAAY,GAWhB,OATgB,WAAwC,IAAvCC,EAAsC,uDAA7BF,EAAkB7Y,EAAW,uCACnD,OAAQA,EAAO7D,MACX,IAAK,aACD,OAAO,gBAAI4c,EAAX,CAAqBD,WAAY9Y,EAAO0N,QAIhD,OAAOqL,GCzGR,IAAMC,GAAb,WACE,WAAYhW,GAAS,IAAD,2BAClB1G,KAAK0G,OAASA,EACd1G,KAAKgE,UAAY,CACf2Y,YAAa,SAAAC,GAAE,OAAI,EAAKC,cAAcD,IACtCE,UAAW,SAAAF,GAAE,OAAI,EAAKG,YAAYH,IAClCI,YAAa,SAAAJ,GAAE,OAAI,EAAKK,cAAcL,IACtCM,QAAS,SAAAN,GAAE,OAAI,EAAKO,SAASP,KAG/B5c,KAAKod,UAAW,EAChBpd,KAAKqd,SAAU,EAEfrd,KAAKsd,gBAAkBC,IAAKjc,SAbhC,0DAiBgBsb,GACZ5c,KAAKod,UAAW,EAChBpd,KAAKsd,gBAAgB,GAAKV,EAAGY,QAC7Bxd,KAAKsd,gBAAgB,GAAKV,EAAGa,UApBjC,kCAuBcb,GACV5c,KAAKod,UAAW,IAxBpB,oCA2BgBR,GACZ,GAAK5c,KAAKod,UAAapd,KAAKsd,gBAA5B,CACA,IACII,EAAWH,IAAKnc,WAAWwb,EAAGY,QAASZ,EAAGa,SAC1C5a,EAAQ0a,IAAKjc,SACjBic,IAAK7a,IAAIG,EAAO7C,KAAKsd,gBAAiBI,GACtCH,IAAKvb,MAAMa,EAAOA,EAJL,MAMb7C,KAAK0G,OAAO/D,OAAOE,EAAM,GAAIA,EAAM,IAEnC7C,KAAKsd,gBAAkBI,KArC3B,+BAwCWd,GACP,IAAIe,EAAyB,KAAZf,EAAGgB,OACpB5d,KAAK0G,OAAOmX,KAAKF,OA1CrB,KCAaG,GAAb,WACE,WAAYpX,GAAS,IAAD,2BAClB1G,KAAK0G,OAASA,EAEd1G,KAAKgE,UAAY,CACf+Z,aAAc,SAAAnB,GAAE,OAAI,EAAKoB,eAAepB,IACxCqB,YAAa,SAAArB,GAAE,OAAI,EAAKsB,cAActB,IACtCuB,WAAY,SAAAvB,GAAE,OAAI,EAAKwB,aAAaxB,KAGtC5c,KAAKod,UAAW,EAChBpd,KAAKqd,SAAU,EAEfrd,KAAKqe,cAAgB,EACrBre,KAAKse,gBAAkBf,IAAKjc,SAC5BtB,KAAKue,oBAAsB,EAC3Bve,KAAKwe,WAAa,GAhBtB,2DAmBiB5B,GAAK,IAAD,EACb6B,EAAU7B,EAAG6B,QAGjB,IAFA,EAAAze,KAAKwe,YAAWxS,KAAhB,oBAAwByS,IACxBze,KAAKqe,eAAiBI,EAAQvS,OACH,IAAvBlM,KAAKqe,cAAqB,CAC5Bre,KAAKod,UAAW,EAChBpd,KAAKqd,SAAU,EACf,IAAIqB,EAAQ1e,KAAKwe,WAAWxe,KAAKwe,WAAWtS,OAAO,GACnDlM,KAAKse,gBAAkBf,IAAKnc,WAAWsd,EAAMlB,QAASkB,EAAMjB,cACvD,GAAIzd,KAAKqe,eAAiB,EAAG,CAClCre,KAAKqd,SAAU,EACfrd,KAAKod,UAAW,EAChB,IAAIuB,EAAe3e,KAAKwe,WAAWrQ,MAAMnO,KAAKwe,WAAWtS,OAAO,EAAGlM,KAAKwe,WAAWtS,QACnFlM,KAAKue,oBAAsBve,KAAK4e,yBAAL,MAAA5e,KAAA,YAAiC2e,OAhClE,mCAoCe/B,GACX5c,KAAKod,UAAW,EAChBpd,KAAKqd,SAAU,EACfrd,KAAKwe,WAAa,GAClBxe,KAAKqe,cAAgB,EAGjBre,KAAKqe,cAAgB,IACvBre,KAAKqd,SAAU,GAEbrd,KAAKqe,cAAgB,IACvBre,KAAKod,UAAW,KA/CtB,oCAmDgBR,IACP5c,KAAKod,UAAapd,KAAKqd,WACxBrd,KAAKod,SACPpd,KAAK6e,gBAAgBjC,GACZ5c,KAAKqd,SACdrd,KAAK8e,cAAclC,MAxDzB,sCA4DkBA,GAEd,KADcA,EAAG6B,QACLvS,OAAS,GAArB,CAEA,IAAIwS,EAAQ9B,EAAG6B,QAAQ,GAEnBf,EAAWH,IAAKnc,WAAWsd,EAAMlB,QAASkB,EAAMjB,SAChD5a,EAAQ0a,IAAKjc,SACjBic,IAAK7a,IAAIG,EAAO7C,KAAKse,gBAAiBZ,GACtCH,IAAKvb,MAAMa,EAAOA,EAJL,MAMb7C,KAAK0G,OAAO/D,OAAOE,EAAM,GAAIA,EAAM,IAEnC7C,KAAKse,gBAAkBZ,KAzE3B,oCA4EgBd,GACZ,IAAI6B,EAAU7B,EAAG6B,QACbnD,EAAWtb,KAAKue,oBACpB,GAAIE,EAAQvS,QAAU,EACpBoP,EAAWtb,KAAK4e,yBAAyBH,EAAQ,GAAIA,EAAQ,QACxD,CAEL,IAAIC,EAAQD,EAAQ,GAChBM,EAAU/e,KAAKwe,WAAWxe,KAAKwe,WAAWtS,OAAO,GACjD8S,EAAUhf,KAAKwe,WAAWxe,KAAKwe,WAAWtS,OAAO,GACjD+S,EAASjf,KAAK4e,yBAAyBG,EAASL,GAChDQ,EAASlf,KAAK4e,yBAAyBI,EAASN,GAGhDO,EAASC,GACXlf,KAAKwe,WAAWxe,KAAKwe,WAAWtS,OAAO,GAAKwS,EAC5CpD,EAAW4D,IAEXlf,KAAKwe,WAAWxe,KAAKwe,WAAWtS,OAAO,GAAKwS,EAC5CpD,EAAW2D,GAIf,IAAIjd,EAAQsZ,EAAWtb,KAAKue,oBAC5Bve,KAAKue,oBAAsBjD,EAC3Btb,KAAK0G,OAAOmX,KAAK,EAAI7b,KArGzB,+CAwG2Bmd,EAAOC,GAC9B,IAAIC,EAAY9B,IAAKnc,WAAW+d,EAAM3B,QAAS2B,EAAM1B,SACjD6B,EAAU/B,IAAKnc,WAAWge,EAAO5B,QAAS4B,EAAO3B,SACjD5a,EAAQ0a,IAAKjc,SAGjB,OAFAic,IAAK7a,IAAIG,EAAOwc,EAAWC,GACd/B,IAAKrR,OAAOrJ,OA7G7B,KCOa0c,GAAb,kDACE,WAAY3N,GAAQ,IAAD,8BACjB,cAAMA,IACD4N,iBAAmB,IAAI9C,GAC5B,EAAK+C,iBAAmB,IAAI3B,GAHX,EADrB,gEAQI,IACM/d,EADOC,KAAK4R,MAAMmK,OAAO2D,QACbC,WAAW,UAC7B,IAAK5f,EACH,MAAM,IAAIkL,MAAM,uBAElB,IACIvE,EADM1G,KAAK4f,WAAW7f,GACT2G,OACjB1G,KAAKwf,iBAAiB9Y,OAASA,EAC/B1G,KAAKyf,iBAAiB/Y,OAASA,IAhBnC,iCAmBa3G,GACT,IAAI2Z,EAAQ1Z,KAAK4R,MAAM8H,MACnBta,EAAMsa,EAAMmG,WAAWzgB,IAC3B,GAAIA,EACF,OAAOA,EAGTA,EAAM,IAAIqb,GAAI1a,EAAI2Z,GAClB,IH2C+BX,EAnDL+G,EAgCCnZ,EAjBDC,EA3CFmZ,EGoCpBC,EAAWC,YAAgB,CAC7B7gB,KHrCsB2gB,EGqCL3gB,EHpCH,WAA2B,IAA1BA,EAAyB,uDAArB2gB,EAAUrc,EAAW,uCACtC,OAAQA,EAAO7D,MACX,IAAK,OAAQT,EAAIC,IAAI2J,OAAQ,MAC7B,IAAK,OAAQ5J,EAAIC,IAAI0J,OAAQ,MAC7B,IAAK,QAAS3J,EAAIC,IAAIyJ,QAAS,MAC/B,IAAK,SAAU1J,EAAIC,IAAI6gB,SAAU,MACjC,IAAK,QAAS9gB,EAAIC,IAAIe,QAAS,MAC/B,IAAK,YAAahB,EAAIC,IAAIwJ,YAAa,MACvC,IAAK,eACDzJ,EAAIoI,SAAS9D,EAAO0N,OACpB,MACJ,IAAK,kBACDhS,EAAI+b,YAAY/J,MAAQ1N,EAAO0N,MAC/B,MACJ,IAAK,kBACDhS,EAAIgc,YAAYhK,MAAQ1N,EAAO0N,MAMvC,OAAOhS,IGgBTwH,eHKwBA,EGLKxH,EAAIwH,cHMnB,WAAoC,IAAnCuZ,EAAkC,uDAA1BvZ,EAAelD,EAAW,uCAC/C,OAAQA,EAAO7D,MACX,IAAK,eACD,IAAI4N,EAAQ/J,EAAO0N,MACnB+O,EAAQhH,OAAO1L,GAMvB,OAAO0S,IGfTxZ,gBHqByBA,EGrBMvH,EAAIuH,eHsBrB,WAAqC,IAApCyZ,EAAmC,uDAA3BzZ,EAAgBjD,EAAW,uCAChD,OAAQA,EAAO7D,MACX,IAAK,yBACDugB,EAAQC,gBAAgB3c,EAAO0N,OAC/B,MACJ,IAAK,uBACDgP,EAAQjK,cAAczS,EAAO0N,OAMrC,OAAOgP,IGjCTnd,OHZwB6c,EGYH1gB,EAAI6D,MHXX,WAA+B,IAA9BA,EAA6B,uDAAvB6c,EAAYpc,EAAW,uCAC1C,OAAQA,EAAO7D,MACX,IAAK,eACD,OAAO6D,EAAO0N,MAKtB,OAAOnO,IGITuB,YHsC6BuU,EGtCE3Z,EAAI2Z,mBHuCrB,WAAyC,IAAxCqH,EAAuC,uDAA/BrH,EAAoBrV,EAAW,uCACpD,OAAQA,EAAO7D,MACX,IAAK,oBACDugB,EAAQjH,OAAOzV,EAAO0N,OACtB,MACJ,IAAK,oBACDgP,EAAQE,eAAe5c,EAAOkI,KAAMlI,EAAO0N,OAKnD,OAAOgP,IGjDTG,IAAKlE,GAAY3C,EAAM6G,OAIzB,OAFA7G,EAAM8G,eAAeR,GACrB5gB,EAAIqhB,MACGrhB,IArCX,+BAyCI,OACE,0CACEO,UAAU,cAAc+gB,IAAK1gB,KAAK4R,MAAMmK,QACpC/b,KAAKwf,iBAAiBxb,UAAehE,KAAKyf,iBAAiBzb,gBA5CvE,GAA4B2c,IAAMC,WCJ3B,SAASC,GAAejP,GAC7B,IAAM8H,EAAQoH,cACR1hB,EAAMF,aAAY,SAAAwa,GAAK,OAAIA,EAAMta,OAoBvC,OACE,yBAAKO,UAAU,cAAcohB,MAAO,CAAC9E,OAAO,yBAC1C,yBAAKtc,UAAU,eACb,wBAAIA,UAAU,qCAAd,WAEF,kBAAC,GAAD,CAAQ+Z,MAAOA,EAAOqC,OAAQnK,EAAMmK,SACnC3c,EAtBD,yBAAK2hB,MAAO,CAACC,OAAO,EAAGC,SAAS,WAAYzR,OAAO,SAAU0R,UAAU,WACrE,6BACE,kBAACliB,EAAD,QAoB6B,8BAZjC,yBAAK+hB,MAAO,CAACC,OAAO,EAAGC,SAAS,WAAY1R,IAAI,SAAUH,MAAM,WAC9D,kBAAC+R,GAAD,QAiBR,SAASA,KACP,IAAM5hB,EAAWC,cACXgd,EAAatd,aAAY,SAAAC,GAAK,OAAIA,EAAMohB,IAAI/D,cAE5C4E,EAAQ5E,EAA4B,sBAAf,aAI3B,OACE,4BAAQ7c,UAAS,oBAAuBC,QAH1B,kBAAML,EAAS,CAACM,KAAK,aAAcuR,OAAQoL,MAIvD,uBAAG7c,UAAS,iBAAYyhB,EAAZ,aC7CX,SAAStI,KACd,IAAMvZ,EAAWC,cACX2gB,EAAUjhB,aAAY,SAAAC,GAAK,OAAIA,EAAMyH,iBACrCwS,EAAgBla,aAAY,SAAAC,GAAK,OAAIA,EAAMyH,cAAcwS,iBAa/D,IAAMiI,EAAalB,EAAQnH,QAAQ1M,KAAI,SAACgV,EAAGnZ,GAAJ,OAXvC,SAAsBhB,EAAOsG,GAC3B,IACI8T,EADW9T,IAAU2L,EACG,SAAW,GACvC,OACE,wBAAIzZ,UAAW,mBAAmB4hB,EAAYzP,IAAKrE,EAAO7N,QAAS,kBAAML,EAAS,CAACM,KAAK,eAAgBuR,MAAM3D,MAC5G,sCAAYtG,EAAMyE,MAClB,sCAAYzE,EAAMqS,cAKyBgI,CAAaF,EAAGnZ,MAEjE,OACE,yBAAKxI,UAAU,oBACb,uBAAG8hB,KAAK,wBAAwB9hB,UAAU,sBAAsB+hB,cAAY,WAAWC,KAAK,SAASC,gBAAc,OAAOC,gBAAc,wBACtI,wBAAIliB,UAAU,qCAAd,UAEF,yBAAKA,UAAU,gBAAgB+E,GAAG,wBAChC,wBAAI/E,UAAU,cAAc0hB,KC1B7B,SAASS,GAAsBC,EAAYjQ,EAAKlG,EAAMoW,GAE3D,OADWD,EAAWliB,MAEpB,IAAK,SACH,OAUN,SAAoBoiB,EAAQnQ,EAAKlG,EAAMoW,GACrC,IAAIhZ,GAAQiZ,EAAO5Y,IAAI4Y,EAAOpY,KAAK,IACnC,OACE,yBAAKlK,UAAU,cAAcmS,IAAKA,GAChC,+BAAQlG,EAAR,KAAgBqW,EAAO7Q,MAAM8Q,QAAQ,IACrC,2BACEviB,UAAU,qBAAqBE,KAAK,QACpCgK,IAAKoY,EAAOpY,IAAKR,IAAK4Y,EAAO5Y,IAAK+H,MAAO6Q,EAAO7Q,MAAOpI,KAAMA,EAC7DmZ,SAAU,SAAAvF,GAAE,OAAIoF,EAAa1J,OAAOsE,EAAGrb,OAAO6P,YAlBzCgR,CAAWL,EAAYjQ,EAAKlG,EAAMoW,GAC3C,IAAK,SACH,OAqBN,SAAoB9B,EAAQpO,EAAKlG,EAAMoW,GACrC,OACE,yBAAKriB,UAAU,aAAamS,IAAKA,GAC/B,2BACEjS,KAAK,WAAWF,UAAU,mBAC1B0iB,QAASnC,EAAO9O,MAChB+Q,SAAU,SAAAvF,GAAE,OAAIoF,EAAapF,EAAGrb,OAAO8gB,YACzC,2BAAO1iB,UAAU,oBAAoBiM,IA5B9B0W,CAAWP,EAAYjQ,EAAKlG,EAAMoW,GAC3C,IAAK,WACH,OA+BN,SAAsBO,EAAUzQ,EAAKlG,EAAMoW,GAEzC,OACE,yBAAKriB,UAAU,cAAcmS,IAAKA,GAChC,2BAAOnS,UAAU,QAAQiM,EAAzB,KACA,4BAAQjM,UAAU,iCAAiCyR,MAAOmR,EAASnR,MAAO+Q,SAJ/D,SAAAvF,GAAE,OAAIoF,EAAa1J,OAAOsE,EAAGrb,OAAO6P,UAK5CmR,EAAS5Q,QAAQrF,KAAI,SAACkW,EAAQra,GAAT,OACpB,4BAAQiJ,MAAOjJ,EAAG2J,IAAG,UAAKlG,EAAL,YAAakG,EAAb,YAAoB3J,IAAMqa,QAtC5CC,CAAaV,EAAYjQ,EAAKlG,EAAMoW,GAC7C,QACE,QCPC,SAASU,KACd,IAAMnjB,EAAWC,cACX2b,EAAcjc,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI+b,eAC7CC,EAAclc,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIgc,eAE5Blc,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI+b,YAAY/J,SAC3ClS,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIgc,YAAYhK,SAElE,OACE,6BACG0Q,GAAsB3G,EAAa,EAAG,eAAe,SAAA/J,GACpD7R,EAAS,CAACM,KAAM,kBAAmBuR,MAAOA,OAE3C0Q,GAAsB1G,EAAa,EAAG,eAAe,SAAAhK,GACpD7R,EAAS,CAACM,KAAM,kBAAmBuR,MAAOA,QCd3C,SAASuR,KACd,IAAMpjB,EAAWC,cACXuW,EAAgB7W,aAAY,SAAAC,GAAK,OAAIA,EAAMwH,eAAeoP,iBAG1D6M,GAFwB1jB,aAAY,SAAAC,GAAK,OAAIA,EAAMwH,eAAeoP,cAAc3E,SAGpF,6BACE,0BAAMzR,UAAU,eACbmiB,GAAsB/L,EAAe,EAAG,YAAY,SAAA3E,GACnD7R,EAAS,CAACM,KAAK,yBAA0BuR,MAAMA,QAGnD,kBAACsR,GAAD,MACA,6BACA,kBAACG,GAAD,QAIJ,OACE,yBAAKljB,UAAU,oBACb,uBAAG8hB,KAAK,wBAAwB9hB,UAAU,sBAAsB+hB,cAAY,WAAWC,KAAK,SAASC,gBAAc,OAAOC,gBAAc,wBACtI,wBAAIliB,UAAU,qCAAd,aAEF,yBAAKA,UAAU,gBAAgB+E,GAAG,wBAChC,yBAAK/E,UAAU,aACZijB,KAOX,SAASC,KACP,IAAMtjB,EAAWC,cACXqS,EAAS3S,aAAY,SAAAC,GAAK,OAAIA,EAAMwH,eAAekL,UAEzD,OACE,8BAAOsD,OAAO6D,QAAQnH,GAAQvF,KAAI,WAAgBmB,GAAW,IAAD,mBAAxB7B,EAAwB,KAC1D,OAAOkW,GADmD,KACtBrU,EAAO7B,GAAM,SAAAwF,GAC/C,IAAI7N,EAAO,GACXA,EAAKqI,GAAQwF,EACb7R,EAAS,CAACM,KAAM,uBAAwBuR,MAAO7N,WC1ChD,SAASuf,KACd,IAAMvjB,EAAWC,cACXujB,EAAW7jB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIiF,QAFpB,EAGX2e,mBAASD,EAAS,IAHP,mBAGvB5S,EAHuB,KAGpB8S,EAHoB,OAIXD,mBAASD,EAAS,IAJP,mBAIvB3S,EAJuB,KAIpB8S,EAJoB,OAKXF,mBAASD,EAAS,IALP,mBAKvB1S,EALuB,KAKpB8S,EALoB,KAU5B,SAAS1R,EAAMF,GACb,IAAI6R,EAAU9K,OAAO/G,GAGrB,OAFA6R,EAAUjhB,KAAKkH,IAAI+Z,EAJJ,GAKfA,EAAUjhB,KAAK0H,IAAIuZ,EANJ,KAsBjB,IAAMC,EACJ,0BAAMC,SAAU,SAACjgB,GAAD,OAblB,SAAwBA,GACtB,IAAIkgB,EAAI9R,EAAMtB,GACVqT,EAAI/R,EAAMrB,GACVqT,EAAIhS,EAAMpB,GACd4S,EAAMM,GACNL,EAAMM,GACNL,EAAMM,GACN,IAAIpf,EAAOlD,IAAKC,WAAWmiB,EAAGC,EAAGC,GACjClkB,EAAS,CAACM,KAAM,eAAgBuR,MAAO/M,IACvChB,EAAMqgB,iBAIqBC,CAAetgB,KACxC,yBAAK1D,UAAU,oBACb,2BAAOE,KAAK,SAASuR,MAAOjB,EAAG9G,IAzBpB,IAyBmCQ,IAxBnC,EAwBkDsY,SAAU,SAAAvF,GAAE,OAAIqG,EAAMrG,EAAGrb,OAAO6P,UAC7F,2BAAOvR,KAAK,SAASuR,MAAOhB,EAAG/G,IA1BpB,IA0BmCQ,IAzBnC,EAyBkDsY,SAAU,SAAAvF,GAAE,OAAIsG,EAAMtG,EAAGrb,OAAO6P,UAC7F,2BAAOvR,KAAK,SAASuR,MAAOf,EAAGhH,IA3BpB,IA2BmCQ,IA1BnC,EA0BkDsY,SAAU,SAAAvF,GAAE,OAAIuG,EAAMvG,EAAGrb,OAAO6P,UAC7F,yBAAKzR,UAAU,sBACb,4BAAQE,KAAK,SAASF,UAAU,yBAAyBgiB,KAAK,UAA9D,YAMR,OACE,yBAAKhiB,UAAU,oBACb,uBAAG8hB,KAAK,uBAAuB9hB,UAAU,sBAAsB+hB,cAAY,WAAWC,KAAK,SAASC,gBAAc,OAAOC,gBAAc,uBACrI,wBAAIliB,UAAU,qCAAd,kBAEF,yBAAKA,UAAU,gBAAgB+E,GAAG,uBAChC,yBAAK/E,UAAU,aACZ0jB,KClDJ,SAAS5J,KACd,IAAME,EAAmBza,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKoW,oBACzDE,EAAe3a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKsW,gBACrDD,EAAa1a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKqW,cACnDE,EAAc5a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKuW,eACpDC,EAAsB7a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKwW,uBAC5DC,EAAsB9a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAKyW,uBAC5DC,EAAY/a,aAAY,SAAAC,GAAK,OAAIA,EAAM8D,MAAMM,KAAK0W,aAEpD2J,EAAW,EACX/J,EAAe,IACjB+J,EAAWjK,EAAiBE,EAAe,KAG7C,IAAM5W,EACJ,6BACE,yBAAKtD,UAAU,OACb,yBAAKA,UAAU,OACb,6CAAmBma,GACnB,iDAAuBF,EAAWsI,QAAQ,IAC1C,gDAAsBjI,EAAUiI,QAAQ,KAE1C,yBAAKviB,UAAU,OACb,iDAAuBoa,EAAoBmI,QAAQ,IACnD,iDAAuBlI,EAAoBkI,QAAQ,MAGvD,yBAAKviB,UAAU,OACb,yBAAKA,UAAU,OAAf,aAAgCga,EAAhC,IAAmDE,EAAnD,KAAmE+J,EAAS1B,QAAQ,GAApF,QAKN,OACE,yBAAKviB,UAAU,eACb,uBAAG8hB,KAAK,qBAAqB9hB,UAAU,sBAAsB+hB,cAAY,WAAWC,KAAK,SAASC,gBAAc,OAAOC,gBAAc,qBACnI,wBAAIliB,UAAU,qCAAd,eAEF,yBAAKA,UAAU,gBAAgB+E,GAAG,qBAChC,yBAAK/E,UAAU,aACZsD,KCvCJ,SAAS4gB,KACd,IAAMtkB,EAAWC,cACb4Z,EAAgBla,aAAY,SAAAC,GAAK,OAAIA,EAAMqF,WAAW4U,iBAQ1D,IAAM0K,EAPQ5kB,aAAY,SAAAC,GAAK,OAAIA,EAAMqF,WAAWwU,WAOjB1M,KAAI,SAACgV,EAAGnZ,GACzC,OAAQ,4BAAQiJ,MAAOjJ,EAAG2J,IAAK3J,GAAImZ,EAAEzhB,SAGjC+iB,EACJ,6BACE,8BACE,yBAAKjjB,UAAU,eACb,2BAAOA,UAAU,QAAjB,cACA,4BAAQA,UAAU,iCAAiCyR,MAAOgI,EAAe+I,SAdjF,SAA2B9e,GACzB,IAAIoK,EAAQpK,EAAM9B,OAAO6P,MACzB7R,EAAS,CAACM,KAAK,oBAAqBuR,MAAM3D,MAajCqW,KAIP,6BACA,kBAACC,GAAD,OAIJ,OACE,yBAAKpkB,UAAU,oBACb,uBAAG8hB,KAAK,0BAA0B9hB,UAAU,sBAAsB+hB,cAAY,WAAWC,KAAK,SAASC,gBAAc,OAAOC,gBAAc,0BACxI,wBAAIliB,UAAU,qCAAd,eAEF,yBAAKA,UAAU,gBAAgB+E,GAAG,0BAChC,yBAAK/E,UAAU,aACZijB,KAOJ,SAASmB,KACd,IAAMxkB,EAAWC,cACbqS,EAAS3S,aAAY,SAAAC,GAAK,OAAIA,EAAMqF,WAAWoE,mBAAmBiJ,UAUtE,IAAImS,EAAgB7O,OACjB6D,QAAQnH,GACRvF,KAAI,WAAgBmB,GAAW,IAAD,mBAAxB7B,EAAwB,KAC7B,OAAOkW,GADsB,KACOrU,EAAO7B,GAAM,SAAAwF,IAXrD,SAAsBxF,EAAMwF,GAC1B7R,EAAS,CACPM,KAAM,oBACN+L,KAAMA,EACNwF,MAAOA,IAQL6S,CAAarY,EAAMwF,SAIzB,OACE,8BACG4S,GCvDA,SAASvJ,KAAO,IAAD,EACMuI,mBACxBkB,aACE,iBAAO,CACL3D,IAAKlE,QAEP8H,YACEC,YAAgBC,QAPF,mBACb3K,EADa,aAaQsJ,mBAASrC,IAAM2D,cAbvB,mBAabvI,EAba,UAepB,OACE,kBAAC,IAAD,CAAUrC,MAAOA,GACf,kBAAC6K,GAAD,CAAMxI,OAAQA,KAKpB,SAASwI,GAAK3S,GACZ,IAAMxS,EAAMF,aAAY,SAAAwa,GAAK,OAAIA,EAAMta,OACjCod,EAAatd,aAAY,SAAAwa,GAAK,OAAIA,EAAM6G,IAAI/D,cAqBlD,IAAMT,EAAS,kBAAC8E,GAAD,CAAgB9E,OAAQnK,EAAMmK,SAE7C,OACE,yBAAKpc,UAAU,mBACb,yBAAKA,UAAU,OACZP,IAAQod,EAtBX,yBAAK7c,UAAU,YACb,kBAACmjB,GAAD,MACA,kBAACH,GAAD,MACA,kBAACkB,GAAD,MACA,kBAAC,GAAD,OAkB4C,8BAC5C,yBAAKlkB,UAAU,OAAOoc,GACrB3c,IAAQod,EAbX,yBAAK7c,UAAU,YACb,kBAAC,GAAD,OAY6C,gCC9DrD6kB,IAASC,OACP,kBAAC,GAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.630b75ce.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4093f1cd86ad6b65ac35.worker.js\");\n};","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","import worker from 'worker-loader!./worker.js'; // eslint-disable-line import/no-webpack-loader-syntax \r\nimport { Grid3D } from './Grid3D';\r\n\r\nexport class CellularAutomaton3D {\r\n    constructor(stats) {\r\n        this.stats = stats;\r\n\r\n        this.worker = worker();\r\n        this.promise_id = 0;\r\n\r\n        this.worker.addEventListener('message', (event) => {\r\n            let msg = event.data;\r\n\r\n            if (msg.error) {\r\n                // throw msg.error;\r\n                console.error(msg.error);\r\n                return;\r\n            }\r\n\r\n            switch (msg.action) {\r\n                case 'stats':\r\n                    this.stats.recieve(msg.data);\r\n                    return;\r\n                case 'grid':\r\n                    this.notify(msg.grid, msg.unprocessed_blocks, msg.local);\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    notify(grid, unprocessed_blocks, local) {\r\n        for (let listener of this.listeners) {\r\n            listener(grid, unprocessed_blocks, local);\r\n        }\r\n        this.set_grid(grid);\r\n    }\r\n\r\n    listen_available_frame(listener) {\r\n        return this.listeners.add(listener);\r\n    }\r\n\r\n    unlisten_available_frame(listener) {\r\n        return this.listeners.delete(listener);\r\n    }\r\n\r\n    set_size(size) {\r\n        this.use_worker('set_size', size);\r\n    }\r\n\r\n    set_rule(rule) {\r\n        this.use_worker('set_rule', rule);\r\n    }\r\n\r\n    set_randomiser(randomiser) {\r\n        this.use_worker('set_randomiser', randomiser);\r\n    }\r\n\r\n    clear() {\r\n        this.use_worker('clear');\r\n    }\r\n\r\n    randomise() {\r\n        this.use_worker('randomise');\r\n    }\r\n\r\n    step() {\r\n        this.use_worker('step');\r\n    }\r\n\r\n    start() {\r\n        this.use_worker('start');\r\n    }\r\n\r\n    stop() {\r\n        this.use_worker('stop');\r\n    }\r\n\r\n    set_grid(grid) {\r\n        this.use_worker('set_grid', grid, grid.transferables);\r\n    }\r\n\r\n    request_frame() {\r\n        this.use_worker('request_frame');\r\n    }\r\n\r\n    use_worker(action, data={}, transferables=[]) {\r\n\r\n        let id = this.promise_id;\r\n        this.promise_id += 1;\r\n\r\n        this.worker.postMessage({action, id, data}, transferables);\r\n    }\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, camera, shader_manager, entry_browser, randomiser_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.stats = stats;\r\n\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.entry_browser = entry_browser;\r\n    this.randomiser_browser = randomiser_browser;\r\n\r\n    this.data_updated = false;\r\n\r\n    this.randomiser_browser.listen_select((randomiser) => {\r\n      this.sim.set_randomiser(randomiser.to_json());\r\n    });\r\n\r\n    this.entry_browser.listen_select((entry) => {\r\n      this.sim.set_randomiser(entry.randomiser.to_json());\r\n      this.sim.set_rule(entry.rule.to_json());\r\n    });\r\n\r\n    this.sim = new CellularAutomaton3D(stats);\r\n    this.sim.listen_available_frame((grid, unprocessed_blocks, local) => {\r\n      this.update_vertex_buffer(grid, unprocessed_blocks, local);\r\n    });\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n    this.sim.set_size(size);\r\n    this.create_data();\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n  }\r\n\r\n  randomise() {\r\n    let randomiser = this.randomiser_browser.current_randomiser;\r\n    this.sim.set_randomiser(randomiser.to_json());\r\n    this.sim.randomise();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n    this.sim.start();\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.sim.stop();\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.sim.step();\r\n  }\r\n\r\n  update_vertex_buffer(grid, unprocessed_blocks, local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? unprocessed_blocks : range(0, grid.count);\r\n    let rule = this.entry_browser.selected_entry.rule;\r\n    let max_neighbours = rule.neighbour.max;\r\n\r\n    let cells = grid.cells;\r\n    let neighbours = grid.neighbours;\r\n\r\n    let total_items = 0;\r\n\r\n    let start = performance.now();\r\n    const width = this.cell_data_width;\r\n    let cell_data = this.cell_data;\r\n    for (let i of items) {\r\n      let offset = i*width;\r\n      let state = cells[i];\r\n      let neighbour = neighbours[i];\r\n      cell_data[offset+0] = state;\r\n      cell_data[offset+1] = Math.floor(Math.min(neighbour, max_neighbours)/max_neighbours * 255);\r\n      total_items += 1;\r\n    }\r\n    let end = performance.now();\r\n    this.stats.recieve('texture_data_update', end-start);\r\n    // console.log('Vertex update took', performance.now()-start, 'ms @', total_items);\r\n\r\n    this.data_updated = this.data_updated || (total_items > 0);\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.sim.request_frame();\r\n\r\n    if (this.data_updated) {\r\n      let start = performance.now();\r\n      gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n      let end = performance.now();\r\n      this.stats.recieve('texture_data_upload', end-start);\r\n      this.data_updated = false;\r\n    }\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n\r\n    {\r\n      let start = performance.now();\r\n      this.shader_manager.on_render();\r\n      let end = performance.now();\r\n      this.stats.recieve('draw_time', end-start);\r\n    }\r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n\r\nfunction *should_update(list) {\r\n  for (let i = 0; i < list.length; i++) {\r\n    if (list[i]) {\r\n      yield i;\r\n    }\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","class AdjustableValue {\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this._value = value;\r\n    this.listeners = new Set();\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.notify();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  listen(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  unlisten(listener) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  notify() {\r\n    for (let listener of this.listeners) {\r\n      listener(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Toggle extends AdjustableValue {\r\n  constructor(value) {\r\n    super('toggle', value);\r\n  }\r\n\r\n  // javascript doesnt extend accessors\r\n  set value(val) {\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Slider extends AdjustableValue {\r\n  constructor(min, max, value) {\r\n    super('slider', value);\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}\r\n\r\nexport class Dropdown extends AdjustableValue {\r\n  constructor(options, index=0) {\r\n    super('dropdown', index);\r\n    this.options = options;\r\n  }\r\n\r\n  set value(index) {\r\n    index = Math.min(index, this.options.length-1);\r\n    super.value = index;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  get current_option() {\r\n    let option = this.options[this.value];\r\n    return option;\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class Renderer {\r\n    constructor(gl, props, params) {\r\n        this.gl = gl;\r\n        this.props = {\r\n            size: vec3.create(),\r\n            ...props};\r\n        this.params = params;\r\n    }\r\n\r\n    // arbitary values\r\n    update_props(props) {\r\n        this.props = {...this.props, ...props};\r\n    } \r\n\r\n    add_params(params) {\r\n        this.params = {...this.params, ...params};\r\n    }\r\n\r\n    // adjustable values\r\n    update_params(params) {\r\n        for (let key in params) {\r\n            let param = this.params[key];\r\n            param.value = params[key];\r\n        }\r\n        this.params = {...this.params};\r\n    }\r\n\r\n    // base uniforms\r\n    add_uniforms(shader) {\r\n        let gl = this.gl;\r\n        // camera data\r\n        shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.props.camera.model));\r\n        shader.add_uniform(\"uView\", new UniformMat4f(gl, this.props.camera.view));\r\n        shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.props.camera.projection));\r\n        // shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.props.camera.view_position));\r\n        shader.add_uniform(\"uViewPosition\", new Uniform(loc => gl.uniform3f(loc, ...this.props.camera.view_position)));\r\n        shader.add_uniform(\"uGridSize\", new Uniform(loc => gl.uniform3f(loc, this.props.size[0], this.props.size[1], this.props.size[2])));\r\n        // default texture slots\r\n        shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n        shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n        shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    }\r\n\r\n    bind() {\r\n\r\n    }\r\n\r\n    on_render() {\r\n\r\n    }\r\n}","const vert_shader = (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 position;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\n\r\nuniform vec3 uGridSize;\r\n\r\nout vec3 vPosition;\r\nout vec3 vTexturePosition;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    vec3 vertex_pos = position * uGridSize;\r\n    vec4 pos = MVP * vec4(vertex_pos, 1.0);\r\n    vPosition = (uModel * vec4(vertex_pos, 1.0)).xyz;\r\n    vTexturePosition = position;\r\n    gl_Position = pos;\r\n}\r\n`\r\n);\r\n\r\nconst create_frag_shader = (colouring) => (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 vPosition;\r\nin vec3 vTexturePosition;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nuniform sampler3D uStateTexture;\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\n\r\nuniform float uOcclusion;\r\nuniform float uStepFactor;\r\n\r\nout vec4 vFragColour;\r\n\r\nvoid main() {\r\n    vec3 view_direction = uViewPosition - vPosition;\r\n    vec3 step_size = normalize(view_direction);\r\n    // vec3 resize = abs(step_size);\r\n    // step_size /= max(resize.x, max(resize.y, resize.z));\r\n    step_size = step_size / uGridSize * uStepFactor;\r\n\r\n    vec3 tex_coords = vTexturePosition;\r\n    while (true) {\r\n        vec4 cell = texture(uStateTexture, tex_coords);\r\n        float state = cell[0];\r\n        float neighbours = cell[1];\r\n        float lighting = 1.0-neighbours*uOcclusion;\r\n        vec4 state_colour = texture(uStateColourTexture, vec2(state, 0.0));\r\n        vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n        ${colouring}\r\n        tex_coords -= step_size;\r\n        if (tex_coords.x < 0.0 || tex_coords.x > 1.0 || \r\n            tex_coords.y < 0.0 || tex_coords.y > 1.0 ||\r\n            tex_coords.z < 0.0 || tex_coords.z > 1.0) \r\n        {\r\n            break;\r\n        }\r\n    }\r\n    vFragColour = vec4(0, 0, 0, 0);\r\n}\r\n`\r\n);\r\n\r\nconst state_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst xyz_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(tex_coords*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst layer_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = mod(radius/10.0, 1.0); \r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst radius_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = length(distance) * 2.0;\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_colouring = create_frag_shader(\r\n`if (neighbour_colour.a != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_and_alive_colouring = create_frag_shader(\r\n`float alpha = state_colour.a * neighbour_colour.a;\r\nif (alpha != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, alpha);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\n\r\nexport const volume_shader = {\r\n    vert_src: vert_shader,\r\n    frag_src: {\r\n        state: state_colouring,\r\n        xyz: xyz_colouring, \r\n        layer: layer_colouring,\r\n        radius: radius_colouring,\r\n        neighbour: neighbour_colouring,\r\n        neighbour_and_alive: neighbour_and_alive_colouring,\r\n    },\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { cube_optimized } from \"../../gl/CubeData\";\r\nimport { volume_shader } from \"../../shaders/volume\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\n\r\nexport class VolumeRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        [this.vao, this.ibo, this.index_data] = create_volume_data(gl);\r\n        this.add_params({\r\n            occlusion: new Slider(0, 1, 0.65),\r\n            step_factor: new Slider(0.1, 2, 1)\r\n        });\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => {\r\n            this.create_shader();\r\n        })\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = volume_shader.vert_src;\r\n        let frag_src = volume_shader.frag_src[colour];\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uStepFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.step_factor.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\nconst create_volume_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  \r\n  let vertex_data = cube_optimized.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube_optimized.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: create_no_shader\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain - y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nfloat lighting = 1.0-(neighbours*uOcclusion);\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\nuniform float uOcclusion;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\n\r\nimport { Dropdown, Slider, Toggle } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\nimport { Uniform } from \"../../gl/Uniform\";\r\n\r\nexport class PointCloudRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        this.add_params({\r\n            point_type: new Dropdown(['quad', 'tri']),\r\n            brightness: new Slider(0, 1, 1),\r\n            occlusion: new Slider(0, 1, 0.65),\r\n            scaling_enabled: new Toggle(0),\r\n        });\r\n        this.data = {\r\n            quad: create_quad_data(gl),\r\n            tri: create_triangle_data(gl),\r\n        };\r\n        this.create_shader();\r\n        this.params.colouring.listen(colouring => {\r\n            this.create_shader();\r\n        });\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = vertex_shader_src[colour](true);\r\n        let frag_src = fragment_shader_src.no_shading(true);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n    }\r\n\r\n    get current_data() {\r\n        return this.data[this.params.point_type.current_option];\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        let data = this.current_data;\r\n        data.vao.bind();\r\n        data.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let data = this.current_data;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, data.ibo.count, gl.UNSIGNED_INT, data.index_data, total_cells); \r\n    }\r\n}\r\n\r\n// square for each point\r\nconst create_quad_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                        1, 1, 0.5,\r\n                                        0, 0, 0.5,\r\n                                        1, 0, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}\r\n\r\n// triangle for each point\r\nconst create_triangle_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                        1.5, -0.5, 0.5,\r\n                                        0.5, -1.5, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { Shader } from \"../../gl/Shader\";\r\nimport { UniformMat4f, UniformVec3f, Uniform } from \"../../gl/Uniform\";\r\nimport { IndexBuffer } from \"../../gl/IndexBuffer\";\r\nimport { cube } from \"../../gl/CubeData\";\r\n\r\nimport { Toggle, Slider, Dropdown } from \"../../ui/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../../shaders/vertex_shader\";\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport class VoxelRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, {});\r\n        this.shading_params = {\r\n            ambient_strength: new Slider(0, 1, 0.4),\r\n            diffuse_strength: new Slider(0, 1, 0.95),\r\n            specular_strength: new Slider(0, 1, 0.6),\r\n            specular_power_factor: new Slider(0, 128.0, 4.0),\r\n            scaling_enabled: new Toggle(0),\r\n            fog_near: new Slider(0, 1, 0),\r\n            fog_far: new Slider(0, 1, 0),\r\n            sun_strength: new Slider(0, 1, 0.95),\r\n            sky_strength: new Slider(0, 1, 0.25),\r\n            brightness: new Slider(0, 1, 1.0),\r\n            occlusion: new Slider(0, 1, 0.0),\r\n        };\r\n\r\n        this.global_params = {\r\n            ...params,\r\n            shading: new Dropdown(Object.keys(fragment_shader_src)),\r\n        };\r\n\r\n        this.shading_keys = {\r\n          basic: ['occlusion', 'sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n          basic_alternate: ['occlusion', 'ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n          no_shading: ['occlusion', 'brightness', 'scaling_enabled']\r\n        };\r\n\r\n        this.update_props({\r\n            light_position: vec3.create()\r\n        });\r\n        [this.vao, this.ibo, this.index_data] = create_cube_data(gl);\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => this.create_shader());\r\n        this.params.shading.listen(() => this.create_shader());\r\n    }\r\n\r\n    create_shader() {\r\n        this.load_params();\r\n        let colour = this.global_params.colouring.current_option;\r\n        let shading = this.global_params.shading.current_option;\r\n        let vert_src = vertex_shader_src[colour](false);\r\n        let frag_src = fragment_shader_src[shading](false);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    // depending on shading type, we get different parameters to configure\r\n    load_params() {\r\n        let params = {};\r\n        let shading = this.global_params.shading.current_option;\r\n        let keys = this.shading_keys[shading];\r\n        for (let key of keys) {\r\n            params[key] = this.shading_params[key];\r\n        }\r\n        this.params = {...this.global_params, ...params};\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        // lighting\r\n        shader.add_uniform('light.position', new UniformVec3f(gl, this.props.light_position));\r\n        shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n        // // lighting params\r\n        shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.ambient_strength.value)));\r\n        shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.diffuse_strength.value)));\r\n        shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_strength.value)));\r\n        shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_power_factor.value)));\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        // post processing\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n        shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_near.value)));\r\n        shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_far.value)));\r\n        shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sun_strength.value)));\r\n        shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sky_strength.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let size = this.props.size;\r\n        let total_cells = size[0]*size[1]*size[2];\r\n        gl.drawElementsInstanced(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, this.index_data, total_cells); \r\n    }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","import { vec3 } from 'gl-matrix';\r\n\r\nimport { Dropdown } from '../ui/AdjustableValues';\r\nimport { VolumeRenderer } from './renderers/VolumeRenderer';\r\nimport { PointCloudRenderer } from './renderers/PointCloudRenderer';\r\nimport { VoxelRenderer } from './renderers/VoxelRenderer';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    let props = {\r\n      size: this.size,\r\n      camera: this.camera\r\n    };\r\n\r\n    this.global_params = {\r\n      colouring: new Dropdown(Object.keys(vertex_shader_src)),\r\n    };\r\n\r\n    this.renderers = {\r\n      volume: new VolumeRenderer(gl, props, this.global_params),\r\n      point: new PointCloudRenderer(gl, props, this.global_params),\r\n      voxel: new VoxelRenderer(gl, props, this.global_params),\r\n    };\r\n\r\n    this.renderer_type = new Dropdown(Object.keys(this.renderers));\r\n  }\r\n\r\n  set_size(size) {\r\n    this.size = size;\r\n    Object.values(this.renderers).forEach(renderer => {\r\n      renderer.update_props({size: size});\r\n    })\r\n  }\r\n\r\n  get current_renderer() {\r\n    let key = this.renderer_type.current_option;\r\n    return this.renderers[key];\r\n  }\r\n\r\n  select_renderer(index) {\r\n    this.renderer_type.value = index;\r\n  }\r\n\r\n  get params() {\r\n    return this.current_renderer.params;\r\n  }\r\n\r\n  update_params(params) {\r\n    this.current_renderer.update_params(params);\r\n  }\r\n\r\n  bind() {\r\n    this.current_renderer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    this.current_renderer.on_render();\r\n  }\r\n\r\n\r\n}\r\n","class MooreNeighbour {\r\n    constructor() {\r\n        this.max_neighbours = 26;\r\n    }\r\n\r\n    count_neighbours(x, y, z, grid, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, grid.shape[0]);\r\n                    const yn = pos_mod(y+yoff, grid.shape[1]);\r\n                    const zn = pos_mod(z+zoff, grid.shape[2]); \r\n\r\n                    const i = grid.xyz_to_i(xn, yn, zn);\r\n                    const state = grid.cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, grid, updates) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, grid.shape[0]);\r\n                    const yn = pos_mod(y+yoff, grid.shape[1]);\r\n                    const zn = pos_mod(z+zoff, grid.shape[2]); \r\n\r\n                    const i = grid.xyz_to_i(xn, yn, zn);\r\n                    updates.add(i);\r\n                    // updates[i] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n        this.max_neighbours = 6;\r\n    }\r\n\r\n    count_neighbours(x, y, z, grid, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], grid.shape[0]);\r\n            const yn = pos_mod(y+off[1], grid.shape[1]);\r\n            const zn = pos_mod(z+off[2], grid.shape[2]); \r\n\r\n            const i = grid.xyz_to_i(xn, yn, zn);\r\n\r\n            const state = grid.cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, grid, updates) {\r\n        let i = grid.xyz_to_i(x, y, z);\r\n        updates.add(i);\r\n        // updates[i] = true;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], grid.shape[0]);\r\n            const yn = pos_mod(y+off[1], grid.shape[1]);\r\n            const zn = pos_mod(z+off[2], grid.shape[2]); \r\n\r\n            i = grid.xyz_to_i(xn, yn, zn);\r\n            updates.add(i);\r\n            // updates[i] = true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}\r\n\r\nconst Moore = new MooreNeighbour();\r\nconst VN = new VonNeumanNeighbour();\r\n\r\nexport class Neighbour {\r\n    static Create(neighbour) {\r\n        let type = neighbour.type;\r\n        switch (type) {\r\n            case 'M':\r\n                return Moore;\r\n            case 'VN':\r\n                return VN;\r\n            default:\r\n                throw new Error(`Unknown neighbour type: ${type}`);\r\n        }\r\n    }\r\n}\r\n","import  { Slider } from '../ui/AdjustableValues';\r\n\r\nclass SerializedRandomiser {\r\n    constructor(type, params) {\r\n        this.type = type;\r\n        this.params = params;\r\n    }\r\n\r\n    to_json() {\r\n        let params = {};\r\n        for (let key in this.params) {\r\n            params[key] = this.params[key].value;\r\n        }\r\n        return {\r\n            type: this.type,\r\n            params: params \r\n        };\r\n    }\r\n}\r\n\r\nexport class SeedCrystalSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super('Seed Crystal', {\r\n            density: new Slider(0, 1, density),\r\n            radius: new Slider(0, 0.5, radius),\r\n        });\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsoluteSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super('Seed Crystal Absolute', {\r\n            density: new Slider(0, 1, density),\r\n            radius: new Slider(0, 100, radius),\r\n        });\r\n    }\r\n}\r\n\r\nexport class RuleSerialized {\r\n    constructor(remain, become, total_states, neighbour) {\r\n        this.remain = remain;\r\n        this.become = become;\r\n        this.total_states = total_states;\r\n        this.neighbour = neighbour;\r\n    }\r\n\r\n    to_json() {\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class NeighbourSerialized {\r\n    constructor(type, max) {\r\n        this.type = type;\r\n        this.max = max;\r\n    }\r\n    \r\n    to_json() {\r\n        return this;\r\n    }\r\n}","import { RuleSerialized, NeighbourSerialized } from \"./Serialised\";\r\n\r\nconst NeighbourRules = {\r\n  'M': new NeighbourSerialized('M', 26),\r\n  'VN': new NeighbourSerialized('VN', 6),\r\n};\r\n\r\nexport class RuleReader {\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour] = substrings;\r\n\r\n\r\n    if (NeighbourRules[neighbour] === undefined) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour}`);\r\n    }\r\n\r\n    total_states = Number(total_states);\r\n    neighbour = NeighbourRules[neighbour];\r\n    let remain = this.retrieve_rule(remain_alive);\r\n    let become = this.retrieve_rule(become_alive);\r\n\r\n    return new RuleSerialized(remain, become, total_states, neighbour);\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n}","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { RuleReader } from './RuleReader';\r\nimport { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"./Serialised\";\r\n\r\nexport class EntryBrowser {\r\n  constructor(randomiser_manager) {\r\n    this.entries = [];\r\n    this.randomiser_manager = randomiser_manager;\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystalSerialized(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystalSerialized(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new Entry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsoluteSerialized(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsoluteSerialized(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsoluteSerialized(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystalSerialized(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsoluteSerialized(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsoluteSerialized(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsoluteSerialized(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsoluteSerialized(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new Entry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystalSerialized(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.listeners = new Set();\r\n    this.select(0);\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  get selected_entry() {\r\n    return this.entries[this.current_index];\r\n  }\r\n\r\n  select(idx) {\r\n    this.current_index = idx;\r\n    let entry = this.selected_entry;\r\n    this.notify(entry);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nclass Entry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    let reader = new RuleReader();\r\n    let rule = reader.generate(ca_string);\r\n    this.rule = rule;\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n            texture_data_update: 0,\r\n            texture_data_upload: 0,\r\n            draw_time: 0,\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"./Serialised\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystalSerialized());\r\n        this.add_randomiser(new SeedCrystalAbsoluteSerialized());\r\n\r\n        this.current_index = 0;\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    listen_select(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    notify(randomiser) {\r\n        for (let listener of this.listeners) {\r\n            listener(randomiser);\r\n        }\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push(randomiser);\r\n    }\r\n\r\n    update_randomiser(randomiser) {\r\n        let {type, params} = randomiser;\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            let other = this.entries[i];\r\n            if (other.type !== type) continue;\r\n\r\n            for (let key in params) {\r\n                other.params[key].value = params[key].value;\r\n            }\r\n            other.params = {...other.params};\r\n            this.current_index = i;\r\n            break;\r\n        }\r\n    }\r\n\r\n    update_current(key, value) {\r\n        let param = this.current_randomiser.params[key];\r\n        param.value = value;\r\n        this.current_randomiser.params = {...this.current_randomiser.params}; // force update react\r\n    }\r\n\r\n    select(index) {\r\n        this.current_index = index;\r\n        this.notify(this.current_randomiser);\r\n    }\r\n\r\n    get current_randomiser() {\r\n        return this.entries[this.current_index];\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { EntryBrowser } from './EntryBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.entry_browser = new EntryBrowser(this.randomiser_manager);\r\n    this.stats = new Statistics(this.store);\r\n    this.sim = new SimulationRenderer(gl, this.camera, this.shader_manager, this.entry_browser, this.randomiser_manager, this.stats);\r\n\r\n    let x = 100;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.show_border = new Toggle(true);\r\n    this.show_render = new Toggle(true);\r\n\r\n    this.entry_browser.listen_select((entry) => {\r\n      this.randomiser_manager.update_randomiser(entry.randomiser);\r\n    });\r\n\r\n    // select amoeba with layer colouring\r\n    this.entry_browser.select(2);\r\n    this.shader_manager.update_params({colouring: 2});\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n    this.size = size;\r\n    this.sim.set_size(size);\r\n    this.shader_manager.set_size(size);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    // zoom along minimum axis\r\n    // zoom by maximum axis\r\n    let distance = Math.max(...size);\r\n    let min_index = argmin([...size]); \r\n\r\n    this.camera.view_position = vec3.create();\r\n    this.camera.view_position[min_index] = distance*1.5;\r\n    // glitchy around y axis due to euler angle rotation, so add offset\r\n    if (min_index === 1) {\r\n      this.camera.view_position[2] = 1;\r\n    }\r\n    // vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    // vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  resize() {\r\n    let gl = this.gl;\r\n    let canvas = gl.canvas;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    if (width === canvas.width && height === canvas.height)\r\n      return;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    gl.viewport(0, 0, width, height);\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.resize();\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim.on_render();\r\n    }\r\n  }\r\n}\r\n\r\nfunction argmin(list) {\r\n  let min_i = 0;\r\n  let min_val = list[0];\r\n  for (let i = 1; i < list.length; i++) {\r\n    let val = list[i];\r\n    if (val < min_val) {\r\n      min_val = val;\r\n      min_i = i;\r\n    }\r\n  } \r\n  return min_i;\r\n}\r\n\r\n\r\n\r\n","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function entry_reducer(entry_browser) {\r\n    const reducer = (browser=entry_browser, action) => {\r\n        switch (action.type) {\r\n            case 'entry.select':\r\n                let index = action.value;\r\n                browser.select(index);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_renderer':\r\n                manager.select_renderer(action.value);\r\n                break;\r\n            case 'shader.update_params':\r\n                manager.update_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.update_current(action.name, action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}\r\n\r\nexport function gui_reducer(init) {\r\n    let default_settings = init ? init : {\r\n        fullscreen: false,\r\n    };\r\n    const reducer = (settings=default_settings, action) => {\r\n        switch (action.type) {\r\n            case 'fullscreen':\r\n                return {...settings, fullscreen: action.value};\r\n            default:\r\n                break;\r\n        }\r\n        return settings;\r\n    }\r\n    return reducer;\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class MouseController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n    this.listeners = {\r\n      onMouseDown: ev => this.on_mouse_down(ev),\r\n      onMouseUp: ev => this.on_mouse_up(ev),\r\n      onMouseMove: ev => this.on_mouse_move(ev),\r\n      onWheel: ev => this.on_wheel(ev)\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.rotating = false;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class TouchScreenController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n\r\n    this.listeners = {\r\n      onTouchStart: ev => this.on_touch_start(ev), \r\n      onTouchMove: ev => this.on_touch_move(ev),\r\n      onTouchEnd: ev => this.on_touch_end(ev),\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n}","import React from 'react';\r\nimport { App } from '../../app/App';\r\n\r\nimport { app_reducer, shader_reducer, stats_reducer, randomiser_reducer, gui_reducer, entry_reducer } from '../reducers/app';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport { MouseController } from './MouseController';\r\nimport { TouchScreenController } from './TouchScreenController';\r\n\r\nexport class Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouse_controller = new MouseController();\r\n    this.touch_controller = new TouchScreenController();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.props.canvas.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n    let app = this.create_app(gl);\r\n    let camera = app.camera;\r\n    this.mouse_controller.camera = camera;\r\n    this.touch_controller.camera = camera;\r\n  }\r\n\r\n  create_app(gl) {\r\n    let store = this.props.store;\r\n    let app = store.getState().app;\r\n    if (app) {\r\n      return app;\r\n    }\r\n\r\n    app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      entry_browser: entry_reducer(app.entry_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n      gui: gui_reducer(store.gui),\r\n    });\r\n    store.replaceReducer(reducers);\r\n    app.run();\r\n    return app;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        className=\"w-100 h-100\" ref={this.props.canvas} \r\n        {...this.mouse_controller.listeners} {...this.touch_controller.listeners}></canvas>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Controls } from '../Controls';\r\nimport { useSelector, useStore, useDispatch } from 'react-redux';\r\nimport { Canvas } from './Canvas';\r\n\r\nexport function SimulationView(props) {\r\n  const store = useStore();\r\n  const app = useSelector(store => store.app);\r\n\r\n  function render_float_controls() {\r\n    return (\r\n      <div style={{zIndex:1, position:'absolute', bottom:'1.5rem', alignSelf:'center'}}>\r\n        <div>\r\n          <Controls></Controls>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_fullscreen_button() {\r\n    return (\r\n      <div style={{zIndex:2, position:'absolute', top:'3.5rem', right:'1.5rem'}}>\r\n        <FullScreenButton></FullScreenButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"card shadow\" style={{height:'calc(100vh - 1.0rem)'}}>\r\n      <div className=\"card-header\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Render</h6>\r\n      </div>\r\n      <Canvas store={store} canvas={props.canvas}></Canvas>\r\n      {app ? render_float_controls() : <div></div>}\r\n      {render_fullscreen_button()}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FullScreenButton() {\r\n  const dispatch = useDispatch();\r\n  const fullscreen = useSelector(state => state.gui.fullscreen);\r\n\r\n  const font = !fullscreen ? 'arrows-alt' : 'compress-arrows-alt';\r\n\r\n  const onClick = () => dispatch({type:'fullscreen', value: !fullscreen});\r\n\r\n  return (\r\n    <button className={`btn btn-secondary`} onClick={onClick}>\r\n      <i className={`fas fa-${font} fa-sm`}></i>\r\n    </button>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function EntryBrowser() {\r\n  const dispatch = useDispatch();\r\n  const browser = useSelector(state => state.entry_browser);\r\n  const current_index = useSelector(state => state.entry_browser.current_index);\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === current_index;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'entry.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRulesBrowser\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRulesBrowser\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Rules</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRulesBrowser\">\r\n        <ul className=\"list-group\">{rule_items}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    case 'dropdown':\r\n      return DropdownView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label>{name}: {slider.value.toFixed(2)}</label>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className='form-check' key={key}>\r\n      <input \r\n        type='checkbox' className='form-check-input'\r\n        checked={toggle.value}\r\n        onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      <label className='form-check-label'>{name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownView(dropdown, key, name, valueChanged) {\r\n  let onChange = ev => valueChanged(Number(ev.target.value));\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label className='mr-2'>{name} </label>\r\n      <select className='custom-select custom-select-sm' value={dropdown.value} onChange={onChange}>\r\n        {dropdown.options.map((option, i) => (\r\n          <option value={i} key={`${name}_${key}_${i}`}>{option}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const show_border = useSelector(state => state.app.show_border);\r\n  const show_render = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(show_border, 0, 'Show Border', value => {\r\n        dispatch({type: 'app.show_border', value: value});\r\n      })}\r\n      {RenderAdjustableValue(show_render, 1, 'Show Render', value => {\r\n        dispatch({type: 'app.show_render', value: value});\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\nimport { BorderControls } from './BorderControls';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type);\r\n  const current_renderer_type = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  const card_body = (\r\n    <div>\r\n      <form className='form-inline'>\r\n        {RenderAdjustableValue(renderer_type, 0, 'Renderer', value => {\r\n          dispatch({type:'shader.select_renderer', value:value});\r\n        })}\r\n      </form>\r\n      <BorderControls></BorderControls>\r\n      <hr></hr>\r\n      <ShaderSettings></ShaderSettings>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseGraphicsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseGraphicsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Graphics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseGraphicsMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const params = useSelector(state => state.shader_manager.params);\r\n\r\n  return (\r\n    <form>{Object.entries(params).map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        let data = {};\r\n        data[name] = value;\r\n        dispatch({type: 'shader.update_params', value: data}) \r\n      })\r\n    })}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  const size_changer_form = (\r\n    <form onSubmit={(event) => on_size_change(event)}>\r\n      <div className=\"input-group mb-0\">\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <div className=\"input-group-append\">\r\n          <button type=\"submit\" className='btn btn-primary btn-sm' role=\"button\">Apply</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseSizeChanger\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseSizeChanger\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Size Controls</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseSizeChanger\">\r\n        <div className=\"card-body\">\r\n          {size_changer_form}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n  const texture_data_update = useSelector(state => state.stats.data.texture_data_update);\r\n  const texture_data_upload = useSelector(state => state.stats.data.texture_data_upload);\r\n  const draw_time = useSelector(state => state.stats.data.draw_time);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  const stats = (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div>Total Steps: {total_steps}</div>\r\n          <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n          <div>Draw Time (ms): {draw_time.toFixed(2)}</div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div>Tex Update (ms): {texture_data_update.toFixed(2)}</div>\r\n          <div>Tex Upload (ms): {texture_data_upload.toFixed(2)}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <a href=\"#collapseStatsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseStatsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Statistics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseStatsMenu\">\r\n        <div className=\"card-body\">\r\n          {stats}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let current_index = useSelector(state => state.randomiser.current_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'randomiser.select', value:index});\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.type}</option>);\r\n  });\r\n\r\n  const card_body = (\r\n    <div>\r\n      <form>\r\n        <div className='form-inline'>\r\n          <label className='mr-2'>Randomiser</label>\r\n          <select className='custom-select custom-select-sm' value={current_index} onChange={select_randomiser}>\r\n            {randomiser_options}\r\n          </select>\r\n        </div>\r\n      </form>\r\n      <hr></hr>\r\n      <SeedCrystalEditor></SeedCrystalEditor>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRandomiserMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRandomiserMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Randomiser</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRandomiserMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.current_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    dispatch({\r\n      type: 'randomiser.update', \r\n      name: name,\r\n      value: value,\r\n    });\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView/SimulationView';\r\nimport { EntryBrowser } from './ui/EntryBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\nimport { RandomiserMenu } from './ui/Randomiser';\r\nimport { gui_reducer } from './ui/reducers/app';\r\n\r\nexport function App() {\r\n  const [store, setStore] = useState(\r\n    createStore(\r\n      () => ({\r\n        gui: gui_reducer()\r\n      }), \r\n      compose(\r\n        applyMiddleware(thunk),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n      )\r\n    )\r\n  );\r\n\r\n  const [canvas, setCanvas] = useState(React.createRef());\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Main canvas={canvas}></Main>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nfunction Main(props) {\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className='col-sm-3'>\r\n        <SizeChanger></SizeChanger>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return (\r\n      <div className=\"col-sm-3\">\r\n        <EntryBrowser></EntryBrowser>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const canvas = <SimulationView canvas={props.canvas}></SimulationView>;\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        {app && !fullscreen ? render_left_panel() : <div></div>}\r\n        <div className=\"col\">{canvas}</div>\r\n        {app && !fullscreen ? render_right_panel() : <div></div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App></App>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}