{"version":3,"sources":["gl/Renderer.js","app/Camera.js","gl/VertexBuffer.js","gl/IndexBuffer.js","simulation/CellularAutomaton3D.js","gl/CubeData.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/Uniform.js","shaders/border.js","app/BoundingBox.js","app/Border.js","shaders/fragment_shader.js","shaders/vertex_shader.js","app/ShaderManager.js","simulation/Neighbours3D.js","simulation/Rule3D.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","layout","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","push","start","end","slice","FLOAT","Error","IndexBuffer","buffer","length","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","Uint8Array","cells_buffer","neighbours","should_update","should_update_buffer","remove_queue","listeners","current_slice","slice_size","listener","fill","rule","x","y","z","i","xyz_to_i","dead_state","delete","on_location_update","recieve","value","complete","sliced_step","res","next","done","performance","now","cell_count","completed","total","slice_start","state","i_to_xyz","count_neighbours","next_state","get_next_state","e","tmp","pop","tmp_update","dt","floor","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","Texture3D","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","total_cells","running","total_queued_steps","create_data","sim","listen_rerender","update_vertex_buffer","terrain_vbo_layout","push_attribute","terrain_vbo","add_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","hue","colorsys","hsv_to_rgb","r","g","b","entry","get_selected_entry","randomiser","randomise","seed_updates","step","stop","local","max_value","alive_state","items","min","texSubImage3D","drawElementsInstanced","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","name","uniform","location","getUniformLocation","warn","useProgram","apply","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","BoundingBox","thickness","generate","triangle_count","push_data","v","shifted_index","map","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","add_uniform","vec4","draw","basic","no_shading","create_vertex_shader","main","body","xyz","layer","radius","neighbour","ShaderManager","vert_type","shaders","add_uniforms","current_shader","light_position","loc","uniform1f","uniform1i","MooreNeighbour","total_neighbours","xoff","yoff","zoff","pos_mod","is_neighbour","VonNeumanNeighbour","offsets","dim","n","m","off","Rule3D","remain_alive","become_alive","SeedCrystal","density","max","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","entries","add_entry","RuleEntry","selected_entry","NeighbourRules","ca_string","description","rule_reader","RuleReader","neighbour_type","string","substrings","replace","split","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Statistics","store","completed_blocks","frame_time","total_blocks","event","undefined","dispatch","setTimeout","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","requestAnimationFrame","loop","on_update","on_render","SimulationView","props","canvas_ref","React","createRef","rotating","mouse_start_pos","vec2","canvas","current","getContext","init_stats","init_app","rules_browser","app","reducers","combineReducers","browser","action","select_entry","manager","select_shader","toggle","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","Component","Controls","is_running","useSelector","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","key","render_entry","ShaderMenu","SizeChanger","app_size","useState","set_x","set_y","set_z","clamp","val","clamped","onChange","log","on_size_change","progress","role","style","toFixed","createStore","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4869041.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3, vec2 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 1000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Uint8Array(this.count);\r\n        this.cells_buffer = new Uint8Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (this.cells[i] === rule.dead_state) {\r\n                        this.should_update.delete(i);\r\n                    } else {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({type:'completed_blocks', value: 0});\r\n        this.stats.recieve({type:'total_blocks', value: this.should_update.size});\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            for (let res of this.current_slice) {\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({type:'completed_blocks', value: completed});\r\n        this.stats.recieve({type:'total_blocks', value: total});\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 33) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({type:'completed_blocks', value:completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({type:'completed_blocks', value:completed});\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({type:'frame_time', value: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { cube } from '../gl/CubeData';\r\n\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n    terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    terrain_vbo_layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n    let index_data = cube.index_data;\r\n\r\n    let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 80;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 80;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let entry = this.rule_browser.get_selected_entry();\r\n    // this.clear();\r\n    entry.randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(entry.rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let max_value = rule.alive_state;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state/max_value * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, 26)/26 * 255);\r\n    }\r\n\r\n    this.cell_data_texture.bind();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n    this.vao.bind();\r\n    this.index_buffer.bind();\r\n\r\n    gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    let gl = this.gl;\r\n\r\n    const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertex_shader, vertex_shader_src);\r\n    gl.compileShader(vertex_shader);\r\n    if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(vertex_shader));\r\n      throw new Error('Unable to compile vertex shader');\r\n    }\r\n\r\n    const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragment_shader, fragment_shader_src);\r\n    gl.compileShader(fragment_shader);\r\n    if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(fragment_shader));\r\n      throw new Error('Unable to compile fragment shader');\r\n    }\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertex_shader);\r\n    gl.attachShader(program, fragment_shader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(gl.getProgramInfoLog(program));\r\n      throw new Error('Unable to construct shader program');\r\n    }\r\n\r\n    this.vertex_shader = vertex_shader;\r\n    this.fragment_shader = fragment_shader;\r\n    this.program = program;\r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 0.8)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","const basic_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nfloat uSunStrength = 1.0;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n  \treturn mix(uSkyBottom, uSkyTop, sky_blend);\r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    return mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_direction = normalize(light.position - vFragPos);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n\r\n\r\n    // float diff = dot(view_direction, reflect_direction);\r\n    float diff = dot(light_direction, normal);\r\n    diff = max(diff, 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n\r\n    // vec3 total_lighting = ambient + diffuse + specular;\r\n    vec3 total_lighting = specular + sky_lighting + sun_lighting;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst no_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n    fragColour = vColour;\r\n}`;\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    no_shading: no_shading,\r\n}","function create_vertex_shader(main, body='') {\r\nreturn (\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump sampler3D;\r\nprecision mediump sampler2D;\r\nprecision mediump int;\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\n\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uGridSize;\r\nuniform int uScalingEnabled;\r\n\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 centre = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\nout vec3 vNormal;\r\nout vec3 vFragPos;\r\n\r\nvec3 calculate_position(float index) {\r\n    float remain = float(gl_InstanceID);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain-y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}\r\n\r\n${body}\r\n\r\n${main}\r\n`\r\n)};\r\n\r\nconst state_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst xyz_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vec3 cube_colour = normalize(new_position / (uGridSize * 2.0));\r\n\r\n    vColour = vec4(cube_colour, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst layer_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = new_position-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    float normalised_distance = length(distance/10.0);\r\n    normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    // float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    // float total_repeats = 1.0;\r\n    // normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst radius_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = new_position-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    // float normalised_distance = length(distance/10.0);\r\n    // normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    float total_repeats = 1.0;\r\n    normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[1];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_and_alive_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float state = result[0];\r\n    float neighbours = result[1];\r\n\r\n    float scale = max(neighbours, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0)); \r\n    vColour = vec4(neighbour_colour.xyz, state_colour.a*neighbour_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nexport const vertex_shader_src = {\r\n    state: state_shading,\r\n    xyz: xyz_shading,\r\n    layer: layer_shading,\r\n    radius: radius_shading,\r\n    neighbour: neighbour_shading,\r\n    'neighbour and alive': neighbour_and_alive_shading,\r\n};","import { Shader } from '../gl/Shader';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../gl/Uniform';\r\n\r\nimport { fragment_shader_src } from '../shaders/fragment_shader';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    this.create();\r\n  }\r\n\r\n  set_size(size) {\r\n    for (let i = 0; i < 3; i++)\r\n      this.size[i] = size[i];\r\n  }\r\n\r\n  create() {\r\n    let gl = this.gl;\r\n    this.shaders = [];\r\n    for (let vert_type in vertex_shader_src) {\r\n      // for (let frag_type in fragment_shader_src) {\r\n        let frag_type = 'basic';\r\n        let vert_src = vertex_shader_src[vert_type];\r\n        let frag_src = fragment_shader_src[frag_type];\r\n        let shader = new Shader(gl, vert_src, frag_src); \r\n        this.add_uniforms(shader);\r\n\r\n        // this.shaders.push({name:`${vert_type} (${frag_type})`, shader:shader});\r\n        this.shaders.push({name:`${vert_type}`, shader:shader});\r\n      // }\r\n    }\r\n    this.current_shader = 0;\r\n  }\r\n\r\n  select_shader(index) {\r\n    this.current_shader = index;\r\n  }\r\n\r\n  bind() {\r\n    let shader_entry = this.shaders[this.current_shader];\r\n    let shader = shader_entry.shader;\r\n    shader.bind();\r\n  }\r\n\r\n  add_uniforms(shader) {\r\n    let gl = this.gl;\r\n\r\n    shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    shader.add_uniform(\"uGridSize\", new UniformVec3f(gl, this.size));\r\n    shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.camera.view_position));\r\n\r\n    // lighting\r\n    let light_position = vec3.create();\r\n    vec3.scale(light_position, this.size, 2.5);\r\n    shader.add_uniform('light.position', new UniformVec3f(gl, light_position));\r\n    shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n    // // lighting params\r\n    shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, 0.3)));\r\n    shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, 0.9)));\r\n    shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, 0.5)));\r\n    shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, 4.0)));\r\n    // add texture id\r\n    shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n    shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    // post processing\r\n    shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, 0)));\r\n    shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, 0)));\r\n  }\r\n}","export class MooreNeighbour {\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour } from \"./Neighbours3D\";\r\n\r\nexport class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        this.alive_state = this.total_states-1;\r\n        this.dead_state = 0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // refractory\r\n        if (state > this.dead_state && state < this.alive_state) {\r\n            return state-1;\r\n        }\r\n        // alive to dead\r\n        if (state === this.total_states-1) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-1;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (state === this.dead_state && this.become_alive(neighbours)) {\r\n            return this.alive_state;\r\n        }\r\n        // remain dead\r\n        return state;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n}","export class SeedCrystal {\r\n    constructor(density=0.2, radius=0.1) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let [lower, upper] = [Math.max(0.5-this.radius, 0.0), Math.min(0.5+this.radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute {\r\n    constructor(density=0.2, radius=3) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-this.radius, 0), Math.min(X+this.radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-this.radius, 0), Math.min(Y+this.radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-this.radius, 0), Math.min(Z+this.radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\nimport { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.selected_entry = 0;\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\nclass RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.completed_blocks = 0;\r\n        this.frame_time = 0;\r\n        this.total_blocks = 0;\r\n    }\r\n\r\n    recieve(event) {\r\n        switch (event.type) {\r\n            case 'total_blocks':\r\n                this.total_blocks = event.value;\r\n                break;\r\n            case 'completed_blocks':\r\n                this.completed_blocks = event.value;\r\n                break;\r\n            case 'frame_time': \r\n                this.frame_time = event.value;\r\n                break;\r\n            case undefined:\r\n                throw new Error('Need to specify statistic type');\r\n            default:\r\n                console.warn(`Unknown statistics type: ${event.type}`);\r\n        }\r\n\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.rule_browser = new RuleBrowser();\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 50;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    this.camera.view_position[2] = -this.size[2] * 2.5;\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    this.border.on_render();\r\n    this.sim.on_render();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      app: app_reducer(app),\r\n      stats: stats_reducer(app.stats),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={550}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}></canvas>\r\n    );\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\n\r\nexport function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select':\r\n                let index = action.value;\r\n                manager.select_shader(index);\r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Tick</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function ShaderMenu() {\r\n  const shader_manager = useSelector(state => state.shader_manager);\r\n  const current_shader = useSelector(state => state.shader_manager.current_shader);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = current_shader === index;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'shader.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const entries = shader_manager.shaders.map((e, i) => render_entry(e, i));\r\n  return (\r\n    <ul className='list-group'>{entries}</ul>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  const [x, set_x] = useState(app_size[0]);\r\n  const [y, set_y] = useState(app_size[1]);\r\n  const [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 300;\r\n  const min_size = 20;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change() {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    console.log(size);\r\n    dispatch({type: 'app.set_size', value: size});\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(clamp(ev.target.value))}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(clamp(ev.target.value))}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(clamp(ev.target.value))}></input> \r\n        <button onClick={() => on_size_change()}>Apply</button>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const dispatch = useDispatch();\r\n  const completed_blocks = useSelector(state => state.stats.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.frame_time);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"progress\">\r\n        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress.toFixed(0)}%`}}></div>\r\n      </div>\r\n      <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\n\r\nexport const store = createStore(\r\n  () => {}, \r\n  compose(\r\n    applyMiddleware(thunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  )\r\n);\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? <div className=\"col-sm\">\r\n          <div>\r\n            <Controls></Controls>\r\n            <SizeChanger></SizeChanger>\r\n            <ShaderMenu></ShaderMenu>\r\n            <Statistics></Statistics>\r\n          </div>\r\n        </div> : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">\r\n          <RulesBrowser></RulesBrowser>\r\n        </div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}