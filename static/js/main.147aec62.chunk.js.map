{"version":3,"sources":["gl/Renderer.js","app/Camera.js","gl/VertexBuffer.js","gl/IndexBuffer.js","simulation/CellularAutomaton3D.js","gl/CubeData.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/Uniform.js","shaders/border.js","app/BoundingBox.js","app/Border.js","shaders/fragment_shader.js","shaders/vertex_shader.js","ui/AdjustableValues.js","app/ShaderManager.js","simulation/Rule3D.js","simulation/Neighbours3D.js","app/RuleReader.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/AdjustableValueViews.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","ui/Randomiser.jsx","ui/BorderControls.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","layout","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","push","start","end","slice","FLOAT","Error","IndexBuffer","buffer","length","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","cells_buffer","neighbours","Uint8Array","should_update","should_update_buffer","remove_queue","listeners","current_slice","slice_size","total_steps","listener","fill","recieve","completed_blocks","total_blocks","rule","x","y","z","i","xyz_to_i","state","is_neighbour","on_location_update","complete","sliced_step","res","next","done","performance","now","cell_count","completed","total","slice_start","i_to_xyz","count_neighbours","next_state","get_next_state","e","tmp","pop","delete","tmp_update","dt","frame_time","floor","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","Texture3D","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","randomiser_browser","total_cells","running","total_queued_steps","create_data","sim","listen_rerender","update_vertex_buffer","terrain_vbo_layout","push_attribute","terrain_vbo","add_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","hue","colorsys","hsv_to_rgb","r","g","b","get_selected_entry","selected_randomiser","randomise","seed_updates","step","stop","local","items","neighbour_config","max_neighbours","min","texSubImage3D","drawElementsInstanced","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","name","uniform","location","getUniformLocation","warn","useProgram","apply","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","BoundingBox","thickness","generate","triangle_count","push_data","v","shifted_index","map","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","add_uniform","vec4","draw","basic","basic_alternate","no_shading","create_vertex_shader","main","body","xyz","layer","radius","neighbour","Toggle","value","Slider","max","val","clamp","_value","ShaderManager","light_position","global_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","scaling_enabled","fog_near","fog_far","sun_strength","sky_strength","create_options","create_shader","create_params","vert_type","colourings","shadings","shadings_params","frag_type","current_colouring","current_shading","vert_name","frag_name","vert_src","frag_src","add_uniforms","param_names","params","param","loc","uniform1f","uniform1i","Rule3D","remain_alive","become_alive","alive_state","dead_state","alive_threshold","dead_threshold","is_alive","is_dead","pos_mod","n","m","NeighbourRules","total_neighbours","xoff","yoff","zoff","offsets","dim","off","RuleReader","string","substrings","replace","split","neighbour_type","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Randomiser","key","SeedCrystal","density","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","randomiser_manager","entries","add_entry","RuleEntry","selected_entry","randomiser","select_randomiser","entry","ca_string","description","rule_reader","Statistics","store","dispatch","setTimeout","undefined","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","selected_index","instance","filter","forEach","rand","Object","adjustable","select","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","show_border","show_render","requestAnimationFrame","loop","on_update","on_render","SimulationView","props","canvas_ref","React","createRef","rotating","mouse_start_pos","vec2","canvas","current","getContext","init_stats","rules_browser","init_app","app","reducers","combineReducers","action","toggle","browser","select_entry","manager","select_colouring","select_shading","set_param","set_params","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","Component","Controls","is_running","useSelector","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","render_entry","RenderAdjustableValue","valueChanged","slider","toFixed","onChange","SliderView","checked","ToggleView","ShaderMenu","colouring_options","shading_options","event","ShaderSettings","shader_params","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","onSubmit","preventDefault","on_size_change","progress","RandomiserMenu","randomiser_options","SeedCrystalEditor","param_options","new_params","change_param","BorderControls","createStore","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.147aec62.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3, vec2 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Float32Array(this.count);\r\n        this.cells_buffer = new Float32Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n        this.total_steps = 0;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n        this.total_steps = 0;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        });\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        this.should_update.clear();\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n                    let state = this.cells[i];\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (rule.is_neighbour(state)) {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: this.should_update.size\r\n        });\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            for (let res of this.current_slice) {\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_blocks: total\r\n        });\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 16) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({completed_blocks: completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.total_steps += 1;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_steps: this.total_steps,\r\n        });\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({frame_time: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { cube } from '../gl/CubeData';\r\n\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, randomiser_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.randomiser_browser = randomiser_browser;\r\n\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n    terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    terrain_vbo_layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n    let index_data = cube.index_data;\r\n\r\n    let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let randomiser = this.randomiser_browser.selected_randomiser;\r\n    // this.clear();\r\n    randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let neighbour_config = rule.neighbours;\r\n    let max_neighbours = neighbour_config.max_neighbours;\r\n\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, max_neighbours)/max_neighbours * 255);\r\n    }\r\n\r\n    this.cell_data_texture.bind();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n    this.vao.bind();\r\n    this.index_buffer.bind();\r\n\r\n    gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    let gl = this.gl;\r\n\r\n    const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertex_shader, vertex_shader_src);\r\n    gl.compileShader(vertex_shader);\r\n    if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(vertex_shader));\r\n      throw new Error('Unable to compile vertex shader');\r\n    }\r\n\r\n    const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragment_shader, fragment_shader_src);\r\n    gl.compileShader(fragment_shader);\r\n    if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(fragment_shader));\r\n      throw new Error('Unable to compile fragment shader');\r\n    }\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertex_shader);\r\n    gl.attachShader(program, fragment_shader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(gl.getProgramInfoLog(program));\r\n      throw new Error('Unable to construct shader program');\r\n    }\r\n\r\n    this.vertex_shader = vertex_shader;\r\n    this.fragment_shader = fragment_shader;\r\n    this.program = program;\r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 0.8)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","const basic_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    //vec3 light_position = light.position;\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst no_shading =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vColour;\r\n}`;\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: no_shading,\r\n}","function create_vertex_shader(main, body='') {\r\nreturn (\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump sampler3D;\r\nprecision mediump sampler2D;\r\nprecision mediump int;\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\n\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uGridSize;\r\n\r\nuniform int uScalingEnabled;\r\n\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 centre = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\nout vec3 vNormal;\r\nout vec3 vFragPos;\r\n\r\nvec3 calculate_position(float index) {\r\n    float remain = float(gl_InstanceID);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain-y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}\r\n\r\n${body}\r\n\r\n${main}\r\n`\r\n)};\r\n\r\nconst state_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst xyz_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vec3 cube_colour = normalize(offset / uGridSize);\r\n\r\n    vColour = vec4(cube_colour.xyz, state_colour.a); \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst layer_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = offset-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    float normalised_distance = length(distance/10.0);\r\n    normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    // float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    // float total_repeats = 1.0;\r\n    // normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst radius_shading = create_vertex_shader(\r\n`\r\nvoid main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = offset-uGridSize/2.0;\r\n    // repeat every n blocks\r\n    // float normalised_distance = length(distance/10.0);\r\n    // normalised_distance = mod(normalised_distance, 1.0);\r\n\r\n    // scale to size of grid and repeat n times\r\n    // float normalised_distance = length(distance)/length(uGridSize/2.0);\r\n    float normalised_distance = length(distance/(uGridSize/2.0));\r\n    float total_repeats = 1.0;\r\n    normalised_distance = clamp(normalised_distance, 0.0, 1.0) * total_repeats;\r\n\r\n    vec4 distance_colour = texture(uRadiusColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[1];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_and_alive_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float state = result[0];\r\n    float neighbours = result[1];\r\n\r\n    float scale = max(neighbours, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0)); \r\n    \r\n    vColour = vec4(neighbour_colour.xyz, state_colour.a*neighbour_colour.a); \r\n    new_position *= vColour.a;\r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nexport const vertex_shader_src = {\r\n    state: state_shading,\r\n    xyz: xyz_shading,\r\n    layer: layer_shading,\r\n    radius: radius_shading,\r\n    neighbour: neighbour_shading,\r\n    'neighbour and alive': neighbour_and_alive_shading,\r\n};","export class Toggle {\r\n  constructor(value) {\r\n    this.type = 'toggle';\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class Slider {\r\n  constructor(min, max, value) {\r\n    this.type = 'slider';\r\n    this.min = min;\r\n    this.max = max;\r\n    this.value = value;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    this._value = val;\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}","import { Shader } from '../gl/Shader';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../gl/Uniform';\r\n\r\nimport { fragment_shader_src } from '../shaders/fragment_shader';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { Slider, Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.light_position = vec3.create();\r\n    this.camera = camera;\r\n\r\n    this.global_params = {\r\n      ambient_strength: new Slider(0, 1, 0.4),\r\n      diffuse_strength: new Slider(0, 1, 0.95),\r\n      specular_strength: new Slider(0, 1, 0.6),\r\n      specular_power_factor: new Slider(0, 128.0, 4.0),\r\n      scaling_enabled: new Toggle(0),\r\n      fog_near: new Slider(0, 1, 0),\r\n      fog_far: new Slider(0, 1, 0),\r\n      sun_strength: new Slider(0, 1, 0.95),\r\n      sky_strength: new Slider(0, 1, 0.25),\r\n    };\r\n\r\n    this.create_options();\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  create_options() {\r\n    this.colourings = [];\r\n    this.shadings = [];\r\n\r\n    this.shadings_params = [\r\n      ['sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n      ['ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n      ['scaling_enabled']\r\n    ];\r\n\r\n    for (let vert_type in vertex_shader_src) {\r\n      this.colourings.push(vert_type);\r\n    }\r\n    for (let frag_type in fragment_shader_src) {\r\n      this.shadings.push(frag_type);\r\n    }\r\n\r\n    this.current_colouring = 0;\r\n    this.current_shading = 0;\r\n  }\r\n\r\n  create_shader() {\r\n    let vert_name = this.colourings[this.current_colouring];\r\n    let frag_name = this.shadings[this.current_shading];\r\n\r\n    let vert_src = vertex_shader_src[vert_name];\r\n    let frag_src = fragment_shader_src[frag_name];\r\n    this.shader = new Shader(this.gl, vert_src, frag_src);\r\n    this.add_uniforms(this.shader);\r\n  }\r\n\r\n  create_params() {\r\n    let param_names = this.shadings_params[this.current_shading];\r\n    let params = {};\r\n    for (let name of param_names) {\r\n      let param = this.global_params[name];\r\n      params[name] = param;\r\n    }\r\n    this.params = params;\r\n  }\r\n\r\n  set_size(size) {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.size[i] = size[i];\r\n    }\r\n\r\n    vec3.scale(this.light_position, this.size, 2.5);\r\n  }\r\n\r\n  set_param(name, value) {\r\n    let param = this.params[name];\r\n    param.value = value;\r\n    this.params = {...this.params};\r\n  }\r\n\r\n  select_colouring(index) {\r\n    this.current_colouring = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  select_shading(index) {\r\n    this.current_shading = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  bind() {\r\n    this.shader.bind();\r\n  }\r\n\r\n  add_uniforms(shader) {\r\n    let gl = this.gl;\r\n\r\n    shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    shader.add_uniform(\"uGridSize\", new UniformVec3f(gl, this.size));\r\n    shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.camera.view_position));\r\n\r\n    // lighting\r\n    shader.add_uniform('light.position', new UniformVec3f(gl, this.light_position));\r\n    shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n    // // lighting params\r\n    shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.ambient_strength.value)));\r\n    shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.diffuse_strength.value)));\r\n    shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_strength.value)));\r\n    shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_power_factor.value)));\r\n    // add texture id\r\n    shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n    shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    // post processing\r\n    shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.global_params.scaling_enabled.value)));\r\n    shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_near.value)));\r\n    shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_far.value)));\r\n    shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sun_strength.value)));\r\n    shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sky_strength.value)));\r\n  }\r\n}\r\n\r\n","export class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        // this.alive_state = this.total_states-1;\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n        this.delta = (this.alive_state-this.dead_state)/(this.total_states-1);\r\n\r\n        this.alive_threshold = this.alive_state-this.delta/2.0;\r\n        this.dead_threshold = this.delta/2.0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // alive to dead\r\n        if (this.is_alive(state)) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-this.delta;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (this.is_dead(state)) {\r\n            if (this.become_alive(neighbours)) {\r\n                return this.alive_state;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // refractory\r\n        return state-this.delta;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n\r\n    is_alive(state) {\r\n        return (state > this.alive_threshold);\r\n    }\r\n\r\n    is_dead(state) {\r\n        return (state < this.dead_threshold);\r\n    }\r\n}","export class MooreNeighbour {\r\n    constructor() {\r\n        this.max_neighbours = 26;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n        this.max_neighbours = 6;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nexport class RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","import  { Toggle, Slider } from '../ui/AdjustableValues';\r\n\r\nclass Randomiser {\r\n    constructor(params={}) {\r\n        this.params = params;\r\n    }\r\n\r\n    update(params) {\r\n        for (let key in params) {\r\n            let value = params[key];\r\n            this.params[key].value = value;\r\n        }\r\n\r\n        this.params = {...this.params};\r\n    }\r\n}\r\n\r\nexport class SeedCrystal extends Randomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 0.5, radius)\r\n        });\r\n        this.type = 'Seed Crystal';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density = this.params.density.value; \r\n\r\n        let [lower, upper] = [\r\n            Math.max(0.5-radius, 0.0),  \r\n            Math.min(0.5+radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute extends Randomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 100, radius)\r\n        });\r\n        this.type = 'Seed Crystal Absolute';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density =  this.params.density.value;\r\n\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-radius, 0), Math.min(X+radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-radius, 0), Math.min(Y+radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-radius, 0), Math.min(Z+radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { RuleReader } from './RuleReader';\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor(randomiser_manager) {\r\n    this.entries = [];\r\n    this.randomiser_manager = randomiser_manager;\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.selected_entry = 0;\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n    let randomiser = this.get_selected_entry().randomiser;\r\n    this.randomiser_manager.select_randomiser(randomiser);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystal());\r\n        this.add_randomiser(new SeedCrystalAbsolute());\r\n\r\n        this.selected_index = 0;\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push({\r\n            name: randomiser.type,\r\n            instance: randomiser\r\n        });\r\n    }\r\n\r\n    select_randomiser(randomiser) {\r\n        let entries = this.entries.map((v, i) => [v, i]);\r\n        let matching_entries = entries.filter(([entry, i]) => entry.instance.type === randomiser.type);\r\n        let other_rands = matching_entries.map(([entry, i]) => [entry.instance, i]);\r\n        other_rands.forEach(([rand, i]) => {\r\n            let params = {};\r\n            Object.entries(randomiser.params).forEach(([key, adjustable]) => {\r\n                params[key] = adjustable.value;\r\n            });\r\n            rand.update(params);\r\n            this.select(i);\r\n        });\r\n    }\r\n\r\n    select(index) {\r\n        this.selected_index = index;\r\n    }\r\n\r\n    set_params(params) {\r\n        let randomiser = this.selected_randomiser;\r\n        randomiser.update(params);\r\n    }\r\n\r\n    get selected_randomiser() {\r\n        return this.entries[this.selected_index].instance;\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.rule_browser = new RuleBrowser(this.randomiser_manager);\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 50;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.show_border = new Toggle(true);\r\n    this.show_render = new Toggle(true);\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.randomiser_manager, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim.on_render();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer, randomiser_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={800}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}></canvas>\r\n    );\r\n  }\r\n}","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_colouring':\r\n                manager.select_colouring(action.value);\r\n                break;\r\n            case 'shader.select_shading':\r\n                manager.select_shading(action.value);\r\n                break;\r\n            case 'shader.set_param':\r\n                manager.set_param(action.name, action.value);\r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.set_params(action.value);\r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label>{name}: {slider.value.toFixed(2)}</label>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className='form-check' key={key}>\r\n      <input \r\n        type='checkbox' className='form-check-input'\r\n        checked={toggle.value}\r\n        onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      <label className='form-check-label'>{name}</label>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n\r\n  const colourings = useSelector(state => state.shader_manager.colourings);\r\n  const current_colouring = useSelector(state => state.shader_manager.current_colouring);\r\n  const shadings = useSelector(state => state.shader_manager.shadings);\r\n  const current_shading = useSelector(state => state.shader_manager.current_shading);\r\n\r\n  function select_colouring(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_colouring', value:index});\r\n  }\r\n\r\n  function select_shading(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_shading', value:index});\r\n  }\r\n\r\n  const colouring_options = colourings.map((name, i) => {\r\n    return <option value={i} key={i}>{name}</option>\r\n  })\r\n\r\n  const shading_options = shadings.map((name, i) => {\r\n    return <option value={i} key={i}>{name}</option>\r\n  })\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className='card-header'>Shaders</div>\r\n      <div className=\"card-body\">\r\n        <form className='form-inline'>\r\n          <div className='form-group'>\r\n            <label className='mr-2'>Colouring </label>\r\n            <select className='custom-select custom-select-sm' value={current_colouring} onChange={select_colouring}>\r\n              {colouring_options}\r\n            </select>\r\n          </div>\r\n        </form>\r\n        <form className='form-inline'>\r\n          <div className='form-group'>\r\n            <label className='mr-2'>Shading </label>\r\n            <select className='custom-select custom-select-sm' value={current_shading} onChange={select_shading}>\r\n              {shading_options}\r\n            </select>\r\n          </div>\r\n        </form>\r\n        <hr></hr>\r\n        <ShaderSettings></ShaderSettings>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const shader_params = useSelector(state => state.shader_manager.params);\r\n\r\n  function set_param(name, value) {\r\n    let action = {type:'shader.set_param', name:name, value:value};\r\n    dispatch(action);\r\n  }\r\n\r\n  const params = Object\r\n    .entries(shader_params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        set_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>{params}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <form className='form-group' onSubmit={(event) => on_size_change(event)}>\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <button type=\"submit\" className='btn btn-primary'>Apply</button>\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const dispatch = useDispatch();\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Statistics</div>\r\n      <div className='card-body'>\r\n        <div>Total Steps: {total_steps}</div>\r\n        <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n        <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let selected_index = useSelector(state => state.randomiser.selected_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch({type: 'randomiser.select', value: index});\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.name}</option>);\r\n  })\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Randomiser</div>\r\n      <div className='card-body'>\r\n        <form>\r\n          <div className='form-inline'>\r\n            <label className='mr-2'>Randomiser</label>\r\n            <select className='custom-select custom-select-sm' value={selected_index} onChange={select_randomiser}>\r\n              {randomiser_options}\r\n            </select>\r\n          </div>\r\n       </form>\r\n       <hr></hr>\r\n        <SeedCrystalEditor></SeedCrystalEditor>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.selected_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    let new_params = {};\r\n    new_params[name] = Number(value);\r\n    dispatch({\r\n      type: 'randomiser.update', \r\n      value: new_params\r\n    });\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const show_border = useSelector(state => state.app.show_border);\r\n  const show_render = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(show_border, 0, 'Show Border', value => {\r\n        dispatch({type: 'app.show_border', value: value});\r\n      })}\r\n      {RenderAdjustableValue(show_render, 0, 'Show Render', value => {\r\n        dispatch({type: 'app.show_render', value: value});\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\nimport { RandomiserMenu } from './ui/Randomiser';\r\nimport { BorderControls } from './ui/BorderControls';\r\n\r\nexport const store = createStore(\r\n  () => {}, \r\n  compose(\r\n    applyMiddleware(thunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  )\r\n);\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className='col-sm'>\r\n        <Controls></Controls>\r\n        <SizeChanger></SizeChanger>\r\n        <BorderControls></BorderControls>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return <RulesBrowser></RulesBrowser>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? render_left_panel() : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">{render_right_panel()}</div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}