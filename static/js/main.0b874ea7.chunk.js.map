{"version":3,"sources":["simulation/worker.js","ui/reducers/gui.js","ui/actions/index.js","ui/components/Controls.jsx","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/rendering/SimulationRenderer.js","app/rendering/ColourMaps.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","app/rendering/shaders/border.js","gl/CubeData.js","app/rendering/BoundingBox.js","ui/util/AdjustableValues.js","app/rendering/Border.js","app/rendering/renderers/Renderer.js","app/rendering/shaders/volume.js","app/rendering/renderers/VolumeRenderer.js","app/rendering/shaders/fragment_shader.js","app/rendering/shaders/vertex_shader.js","app/rendering/renderers/PointCloudRenderer.js","app/rendering/renderers/VoxelRenderer.js","app/rendering/ShaderManager.js","simulation/Serialised.js","app/RuleReader.js","app/entry_browser/Entry.js","app/entry_browser/DefaultEntryBrowser.js","app/entry_browser/StoredEntryBrowser.js","app/entry_browser/EntryBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/Observable.js","app/App.js","ui/components/SimulationView/MouseController.js","ui/components/SimulationView/TouchScreenController.js","ui/components/SimulationView/Canvas.jsx","ui/reducers/index.js","ui/reducers/randomiser_manager.js","ui/reducers/statistics.js","ui/reducers/shader_manager.js","ui/reducers/entry_manager.js","ui/reducers/app.js","ui/components/SimulationView/FullScreenButton.jsx","ui/components/SimulationView/SimulationView.jsx","ui/components/EntryBrowser/EntryEditor.jsx","ui/components/EntryBrowser/EntryView.jsx","ui/components/EntryBrowser/Entry.jsx","ui/components/EntryBrowser/AddButton.jsx","ui/components/EntryBrowser/EntryBrowser.jsx","ui/util/Help.jsx","ui/util/ColorPicker.jsx","ui/util/AdjustableValueViews.jsx","ui/components/GraphicsControls.jsx","ui/components/ShaderMenu.jsx","ui/components/SizeChanger.jsx","ui/components/Statistics.jsx","ui/components/Randomiser.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Worker","gui_reducer","init","default_settings","fullscreen","focused","settings","action","type","value","sim","set_fullscreen","Controls","is_running","useSelector","state","app","dispatch","useDispatch","on_off","run_btn","className","onClick","Camera","size","this","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","on_size_change","listen","update","scale","distance","Math","max","min_index","list","min_i","min_val","i","length","val","argmin","identity","translate","lookAt","perspective","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","stats","worker","promise_id","set_size","addEventListener","event","msg","data","error","console","recieve","notify","grid","local","ev","message","listeners","Set","listener","set_grid","delete","use_worker","rule","randomiser","stop","start","transferables","id","postMessage","Texture3D","gl","shape","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","shader_manager","max_neighbours","data_updated","listen_available_frame","unprocessed_blocks","update_texture_buffer","x","y","z","total_cells","create_textures","state_colour_texture","state_colours_data","Uint8Array","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","items","render_updates","count","cells","neighbours","total_items","performance","now","width","neighbour","floor","min","end","texSubImage3D","bind","request_frame","load_texture_data","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","UNSIGNED_INT","layout","attributes","attribute","enableVertexAttribArray","index","has","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","Float32Array","index_data","Uint32Array","cube_optimized","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","create_cube","centre","AdjustableValue","help","_value","Toggle","Color","color","Slider","clamp","Dropdown","options","undefined","Border","camera","colour","shader","border_shader","bind_uniforms","adjusted_size","offset_vec","border","index_buffer","push_attribute","add_vertex_buffer","add_uniform","loc","c","uniform4f","drawElements","TRIANGLES","Renderer","props","params","key","uniform1i","create_frag_shader","colouring","volume_shader","vert_src","frag_src","xyz","layer","radius","neighbour_and_alive","VolumeRenderer","create_volume_data","ibo","add_params","occlusion","step_factor","create_shader","current_option","add_uniforms","uniform1f","enable","CULL_FACE","n","abs","X","Y","Z","cullFace","FRONT","BACK","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","PointCloudRenderer","point_type","brightness","scaling_enabled","quad","create_quad_data","tri","create_triangle_data","current_data","drawElementsInstanced","VoxelRenderer","shading_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","fog_near","fog_far","sun_strength","sky_strength","light_colour","global_params","shading","Object","keys","shading_keys","update_props","light_position","create_cube_data","load_params","ShaderManager","renderers","volume","point","voxel","renderer_type","current_renderer","update_params","SerializedRandomiser","SeedCrystalSerialized","density","SeedCrystalAbsoluteSerialized","RuleSerialized","remain","become","NeighbourSerialized","NeighbourRules","RuleReader","string","substrings","replace","remain_alive","become_alive","convert_to_number","retrieve_rule","number_range","N","Array","fill","numbers","number","assert_number","word","isNaN","Number","Entry","ca_string","description","DefaultEntryBrowser","entries","add_entry","select","entry","current_index","selected_entry","StoredEntryBrowser","db_cfg","store","db_request","window","indexedDB","open","onerror","onsuccess","db","result","on_db_load","onupgradeneeded","createObjectStore","keyPath","autoIncrement","createIndex","unique","cfg","transaction","objectStore","corrupted_ids","openCursor","cursor","StoredEntry","ex","continue","purge_corrupted_ids","ids","warn","original","put","Promise","resolve","reject","oncomplete","request","EntryBrowser","browsers","current_browser_key","listen_select","selected_browser","then","err","String","stored","edit","Statistics","completed_blocks","frame_time","total_blocks","total_steps","texture_data_update","texture_data_upload","draw_time","cooldown","setTimeout","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","other","current_randomiser","Observable","App","DEPTH_TEST","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","show_border","show_render","background_colour","randomiser_manager","entry_browser","sim_renderer","set_randomiser","to_json","update_randomiser","set_rule","randomise","xi","yi","zi","xf","yf","zf","requestAnimationFrame","loop","on_update","canvas","clientWidth","height","clientHeight","viewport","resize","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","MouseController","onMouseDown","on_mouse_down","onMouseUp","on_mouse_up","onMouseMove","on_mouse_move","onWheel","on_wheel","rotating","zooming","mouse_start_pos","vec2","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","TouchScreenController","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","total_touches","touch_start_pos","touch_zoom_distance","touch_list","touches","touch","zoom_touches","calculate_touch_distance","on_touch_rotate","on_touch_zoom","touch_a","touch_b","dist_a","dist_b","first","second","pos_start","pos_end","Canvas","mouse_controller","touch_controller","current","getContext","create_app","focus_timeout","create_focus_timeout","clearTimeout","delay","change_focus","getState","gui","set_focused","reducer","init_stats","init_app","combineReducers","step","toggle","browser","manager","select_renderer","update_current","create_reducer","replaceReducer","run","ref","React","Component","FullScreenButton","font","is_fullscreen","e","document","documentElement","d","request_fullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","cancel_fullscreen","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","fullscreenElement","mozFullscreen","webkitIsFullScreen","action_fullscreen","SimulationView","useStore","float_controls","rgb","style","zIndex","position","alignSelf","href","rel","data-toggle","data-placement","title","EntryEditor","useState","set_name","set_ca_string","show_actions","set_show_actions","onSubmit","onExit","errors","on_submit","preventDefault","err_fmt","form","onKeyDown","keyCode","onChange","data-html","str","lines","line","render_errors","actions","onMouseOver","onMouseEnter","onMouseLeave","EntryView","copy_success","set_copy_success","selected","del","copy","onEdit","on_delete","delete_entry","on_copy","navigator","permissions","query","res","clipboard","writeText","on_edit","render_copy_button","role","select_entry","editing","set_editing","set_errors","on_error","edit_entry","on_exit","AddButton","create_entry","textAlign","selected_browser_key","selected_index","browser_key","set_browser_key","get_entries","is_user","browser_keys","render_controls","Help","text","ColorPicker","valueChanged","show_picker","set_show_picker","rgba","a","background","disableAlpha","RenderAdjustableValue","adjustable","slider","toFixed","SliderView","checked","ToggleView","dropdown","option","DropdownView","valueChange","ColorView","GraphicsControls","border_checkbox","render_checkbox","border_colour","ShaderMenu","card_body","ShaderSettings","aria-expanded","aria-controls","update_shader_params","SizeChanger","app_size","set_x","set_y","set_z","clamped","size_changer_form","progress","RandomiserMenu","randomiser_options","select_randomiser","SeedCrystalEditor","param_options","change_param","createStore","compose","applyMiddleware","thunk","createRef","Main","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"mHAAAA,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAO,IAA0B,oC,kRCDvC,SAASC,EAAYC,GACxB,IAAIC,EAAgB,aAChBC,YAAY,EACZC,SAAS,GACNH,GAaP,OAXgB,WAAwC,IAAvCI,EAAsC,uDAA7BH,EAAkBI,EAAW,uCACnD,OAAQA,EAAOC,MACX,IAAK,iBACD,OAAO,eAAIF,EAAX,CAAqBF,WAAYG,EAAOE,QAC5C,IAAK,cACD,OAAO,eAAIH,EAAX,CAAqBD,QAASE,EAAOE,QAI7C,OAAOH,G,2BCOFI,EACG,iBAAO,CAACF,KAAM,SADjBE,EAEG,iBAAO,CAACF,KAAM,cAFjBE,EAGG,iBAAO,CAACF,KAAM,UAHjBE,EAIG,iBAAO,CAACF,KAAM,WAoEjBG,EAAiB,SAAAP,GAAU,MAAK,CACzCI,KAAM,iBAAkBC,MAAOL,ICzF5B,SAASQ,IACd,IAAMC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIN,IAAIG,cAChDI,EAAWC,cAEXC,EAASN,EAAa,QAAS,MAC/BO,EAAUP,EAAa,SAAW,UAExC,OACE,yBAAKQ,UAAU,aACb,4BAAQA,UAAU,oBAAoBC,QAAS,kBAAML,EAASP,OAA9D,QACA,4BAAQW,UAAU,kBAAkBC,QAAS,kBAAML,EAASP,OAA5D,aACA,4BAAQW,UAAU,kBAAkBC,QAAS,kBAAML,EAASP,OAA5D,SACA,4BAAQW,UAAW,WAAWD,EAASE,QAAS,kBAAML,EAASP,OAAgBS,I,mBChBxEI,EAAb,WACE,WAAYC,GAAO,IAAD,2BAChBC,KAAKD,KAAOA,EAEZC,KAAKC,IAAM,GACXD,KAAKE,aAAe,EACpBF,KAAKG,cAAgBC,IAAKC,WAAW,EAAG,EAAG,GAC3CL,KAAKM,cAAgBF,IAAKG,SAC1BP,KAAKQ,OAASJ,IAAKC,WAAW,EAAG,EAAG,GACpCL,KAAKS,kBAAoBL,IAAKG,SAE9BP,KAAKU,MAAQC,IAAKJ,SAClBP,KAAKY,KAAOD,IAAKJ,SACjBP,KAAKa,WAAaF,IAAKJ,SAEvBP,KAAKc,eAAed,KAAKD,KAAKf,OAC9BgB,KAAKD,KAAKgB,QAAO,SAAAhB,GAAI,OAAI,EAAKe,eAAef,EAAKf,UAElDgB,KAAKgB,SAlBT,2DAqBiBjB,GACbC,KAAKS,kBAAoBL,IAAKG,SAC9BH,IAAKa,MAAMjB,KAAKS,kBAAmBV,GAAO,IAI1C,IAAImB,EAAWC,KAAKC,IAAL,MAAAD,KAAI,YAAQpB,IACvBsB,EAkDR,SAAgBC,GAGd,IAFA,IAAIC,EAAQ,EACRC,EAAUF,EAAK,GACVG,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CACpC,IAAIE,EAAML,EAAKG,GACXE,EAAMH,IACRA,EAAUG,EACVJ,EAAQE,GAGZ,OAAOF,EA5DWK,CAAO,YAAI7B,IAE3BC,KAAKG,cAAgBC,IAAKG,SAC1BP,KAAKG,cAAckB,GAAsB,IAATH,EAEd,IAAdG,IACFrB,KAAKG,cAAc,GAAK,KAlC9B,+BAwCIQ,IAAKkB,SAAS7B,KAAKU,OACnBC,IAAKmB,UAAU9B,KAAKU,MAAOV,KAAKU,MAAOV,KAAKS,mBAC5CE,IAAKM,MAAMjB,KAAKU,MAAOV,KAAKU,MAAO,CAAC,EAAG,EAAG,IAE1CC,IAAKoB,OAAO/B,KAAKY,KAAMZ,KAAKG,cAAeH,KAAKQ,OAAQ,CAAC,EAAG,EAAG,IAG/DG,IAAKqB,YAAYhC,KAAKa,WAAYb,KAAKC,IAAMkB,KAAKc,GAAK,IAAKjC,KAAKE,aAAc,IAAM,OA/CzF,6BAkDSgC,EAAIC,GAIT,IAAIC,EAAWzB,IAAKJ,SACpBI,IAAK0B,QAAQD,EAAUA,EAAUF,GAEjC,IAAII,EAAqBlC,IAAKG,SAC9BH,IAAKmC,IAAID,EAAoBtC,KAAKM,cAAeN,KAAKG,eACtDmC,EAAmB,GAAKtC,KAAKM,cAAc,GAC3CF,IAAKiC,QAAQC,EAAoBA,EAAoBtC,KAAKM,cAAea,KAAKc,GAAG,GAEjFtB,IAAK6B,OAAOJ,EAAUA,GAAWD,EAAIG,GAGrClC,IAAKqC,cAAczC,KAAKG,cAAeH,KAAKG,cAAeiC,KAjE/D,2BAoEOM,GACH,IAAIC,EAAOvC,IAAKG,SAChBH,IAAKmC,IAAII,EAAM3C,KAAKG,cAAeH,KAAKM,eACxCF,IAAKa,MAAM0B,EAAMA,EAAM,EAAID,GAE3BtC,IAAKwC,IAAI5C,KAAKG,cAAeH,KAAKM,cAAeqC,OAzErD,K,6BCGaE,EAAb,WACI,WAAY9C,EAAM+C,GAAQ,IAAD,2BACrB9C,KAAKD,KAAOA,EACZC,KAAK8C,MAAQA,EAEb9C,KAAK+C,OAASA,MACd/C,KAAKgD,WAAa,EAClBhD,KAAKZ,YAAa,EAElBY,KAAKiD,SAASjD,KAAKD,KAAKf,OACxBgB,KAAKD,KAAKgB,QAAO,SAAAhB,GACb,EAAKkD,SAASlD,EAAKf,UAGvBgB,KAAK+C,OAAOG,iBAAiB,WAAW,SAACC,GACrC,IAAIC,EAAMD,EAAME,KAEhB,GAAID,EAAIE,MAEJC,QAAQD,MAAMF,QAIlB,OAAQA,EAAItE,QACR,IAAK,QACD,EAAKgE,MAAMU,QAAQJ,EAAIC,MACvB,MACJ,IAAK,OACD,EAAKI,OAAOL,EAAIM,KAAMN,EAAIO,WAOtC3D,KAAK+C,OAAOG,iBAAiB,SAAS,SAAAU,GAClCL,QAAQD,MAAMM,EAAGC,QAASD,MAG9B5D,KAAK8D,UAAY,IAAIC,IAvC7B,mDA0CWL,EAAMC,GAAQ,IAAD,gBACK3D,KAAK8D,WADV,IAChB,2BAAqC,EACjCE,EADiC,SACxBN,EAAMC,IAFH,8BAIhB3D,KAAKiE,SAASP,KA9CtB,6CAiD2BM,GACnB,OAAOhE,KAAK8D,UAAUlB,IAAIoB,KAlDlC,+CAqD6BA,GACrB,OAAOhE,KAAK8D,UAAUI,OAAOF,KAtDrC,+BAyDajE,GACLC,KAAKmE,WAAW,WAAYpE,KA1DpC,+BA6DaqE,GACLpE,KAAKmE,WAAW,WAAYC,KA9DpC,qCAiEmBC,GACXrE,KAAKmE,WAAW,iBAAkBE,KAlE1C,8BAsEQrE,KAAKmE,WAAW,WAtExB,kCA0EQnE,KAAKmE,WAAW,eA1ExB,6BA8EQnE,KAAKmE,WAAW,UA9ExB,8BAkFQnE,KAAKmE,WAAW,SAChBnE,KAAKZ,YAAa,IAnF1B,6BAuFQY,KAAKmE,WAAW,QAChBnE,KAAKZ,YAAa,IAxF1B,+BA4FQY,KAAKZ,WAAaY,KAAKsE,OAAStE,KAAKuE,UA5F7C,+BA+Fab,GACL1D,KAAKmE,WAAW,WAAYT,EAAMA,EAAKc,iBAhG/C,sCAoGQxE,KAAKmE,WAAW,mBApGxB,iCAuGerF,GAAoC,IAA5BuE,EAA2B,uDAAtB,GAAImB,EAAkB,uDAAJ,GAElCC,EAAKzE,KAAKgD,WACdhD,KAAKgD,YAAc,EAEnBhD,KAAK+C,OAAO2B,YAAY,CAAC5F,SAAQ2F,KAAIpB,QAAOmB,OA5GpD,K,iBCLaG,EAAb,WACI,WAAYC,EAAIvB,EAAMwB,GAAQ,oBAC1B7E,KAAK4E,GAAKA,EACV5E,KAAKqD,KAAOA,EACZrD,KAAK6E,MAAQA,EACb7E,KAAK8E,QAAUF,EAAGG,gBAElBH,EAAGI,YAAYJ,EAAGK,WAAYjF,KAAK8E,SAGnCF,EAAGM,cAAcN,EAAGK,WAAYL,EAAGO,mBAAoBP,EAAGQ,SAC1DR,EAAGM,cAAcN,EAAGK,WAAYL,EAAGS,mBAAoBT,EAAGQ,SAE1DR,EAAGM,cAAcN,EAAGK,WAAYL,EAAGU,eAAgBV,EAAGW,eACtDX,EAAGM,cAAcN,EAAGK,WAAYL,EAAGY,eAAgBZ,EAAGW,eACtDX,EAAGM,cAAcN,EAAGK,WAAYL,EAAGa,eAAgBb,EAAGW,eACtDX,EAAGc,YAAYd,EAAGe,iBAAkB,GAIpCf,EAAGgB,WAAWhB,EAAGK,WAAY,EAAGL,EAAGiB,IAAKhB,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAI,EAAGD,EAAGkB,GAAIlB,EAAGmB,cAAe/F,KAAKqD,MApB/G,mDAwBkB,IAAT2C,EAAQ,uDAAH,EACFpB,EAAK5E,KAAK4E,GACdA,EAAGqB,cAAcrB,EAAGsB,SAAWF,GAC/BpB,EAAGI,YAAYJ,EAAGK,WAAYjF,KAAK8E,aA3B3C,KCAaqB,EAAb,WACI,WAAYvB,EAAIvB,EAAMwB,GAAQ,oBAC1B7E,KAAK4E,GAAKA,EACV5E,KAAKqD,KAAOA,EACZrD,KAAK6E,MAAQA,EACb7E,KAAK8E,QAAUF,EAAGG,gBAElBH,EAAGI,YAAYJ,EAAGwB,WAAYpG,KAAK8E,SAGnCF,EAAGM,cAAcN,EAAGwB,WAAYxB,EAAGO,mBAAoBP,EAAGQ,SAC1DR,EAAGM,cAAcN,EAAGwB,WAAYxB,EAAGS,mBAAoBT,EAAGQ,SAE1DR,EAAGM,cAAcN,EAAGwB,WAAYxB,EAAGU,eAAgBV,EAAGW,eACtDX,EAAGM,cAAcN,EAAGwB,WAAYxB,EAAGY,eAAgBZ,EAAGW,eACtDX,EAAGc,YAAYd,EAAGe,iBAAkB,GAEpCf,EAAGyB,WAAWzB,EAAGwB,WAAY,EAAGxB,EAAG0B,MAAOzB,EAAM,GAAIA,EAAM,GAAI,EAAGD,EAAG2B,KAAM3B,EAAGmB,cAAe/F,KAAKqD,MAjBzG,mDAoBkB,IAAT2C,EAAQ,uDAAH,EACFpB,EAAK5E,KAAK4E,GACdA,EAAGqB,cAAcrB,EAAGsB,SAAWF,GAC/BpB,EAAGI,YAAYJ,EAAGwB,WAAYpG,KAAK8E,aAvB3C,K,gCC6GU0B,GAvGGC,EAAb,WACE,WAAY7B,EAAI7E,EAAMd,EAAKyH,EAAgB5D,GAAQ,IAAD,2BAChD9C,KAAK4E,GAAKA,EAEV5E,KAAKD,KAAOA,EACZC,KAAKiD,SAASjD,KAAKD,KAAKf,OACxBgB,KAAKD,KAAKgB,QAAO,SAAAhB,GAAI,OAAI,EAAKkD,SAASlD,EAAKf,UAE5CgB,KAAKf,IAAMA,EACXe,KAAK0G,eAAiBA,EACtB1G,KAAK8C,MAAQA,EACb9C,KAAK2G,eAAiB,GAEtB3G,KAAK4G,cAAe,EAEpB5G,KAAKf,IAAI4H,wBAAuB,SAACnD,EAAMoD,EAAoBnD,GACzD,EAAKoD,sBAAsBrD,EAAMoD,EAAoBnD,MAhB3D,qDAoBW5D,GAAO,IAAD,cACGA,EADH,GACRiH,EADQ,KACLC,EADK,KACFC,EADE,KAEblH,KAAKmH,YAAcH,EAAEC,EAAEC,EACvBlH,KAAKoH,gBAAgBrH,KAvBzB,sCA0BkBA,GACd,IAAI6E,EAAK5E,KAAK4E,GAGd5E,KAAKqH,qBCjCF,SAA+BzC,GAGpC,IAFA,IACI0C,EAAqB,IAAIC,WAAW,KAC/B9F,EAAI,EAAGA,EAAI+F,GAAgB/F,IAAK,CACvC,IAAIgG,EAAe,GAALhG,EAAE,GAGZiG,EADc,KACG,EAAIjG,EANR,IAEsB,EAOvBkG,IAASC,WAAWF,EAFnB,IACL,KACPG,EAPkC,EAOlCA,EAAGC,EAP+B,EAO/BA,EAAGC,EAP4B,EAO5BA,EACXT,EAAmBG,EAAO,GAAKI,EAC/BP,EAAmBG,EAAO,GAAKK,EAC/BR,EAAmBG,EAAO,GAAKM,EAC/BT,EAAmBG,EAAO,GAAK,IAGjC,IAAK,IAAIhG,EAAI,EAAGA,EAAI,EAAGA,IACrB6F,EAAmB7F,GAAK,EAG1B,OAAO,IAAI0E,EAAUvB,EAAI0C,EAAoB,CApB1B,GAoBwC,IDY7BU,CAAsBpD,GAClD5E,KAAKiI,sBCVF,SAA+BrD,GAGpC,IAFA,IACI0C,EAAqB,IAAIC,WAAW,MAC/B9F,EAAI,EAAGA,EAFG,IAEeA,IAAK,CACrC,IAAIgG,EAAa,EAAHhG,EAGViG,EADc,KACG,EAAIjG,EANR,KAEoB,EAOrBkG,IAASC,WAAWF,EAFnB,IACL,KACPG,EAPgC,EAOhCA,EAAGC,EAP6B,EAO7BA,EAAGC,EAP0B,EAO1BA,EACXT,EAAmBG,EAAO,GAAKI,EAC/BP,EAAmBG,EAAO,GAAKK,EAC/BR,EAAmBG,EAAO,GAAKM,EAC/BT,EAAmBG,EAAO,GAAK,IAGjC,OAAO,IAAItB,EAAUvB,EAAI0C,EAAoB,CAhB1B,IAgBwC,IDP5BY,CAAsBtD,GAGnD5E,KAAKmI,gBAAkB,EACvBnI,KAAKoI,UAAY,IAAIb,WAAWvH,KAAKmH,YAAYnH,KAAKmI,iBACtDnI,KAAKqI,kBAAoB,IAAI1D,EAAUC,EAAI5E,KAAKoI,UAAWrI,KApC/D,4CA4CwB2D,GAAoB,IAAdC,EAAa,wDACnC2E,EAAQ3E,EAAQD,EAAK6E,eAAiB/B,EAAM,EAAG9C,EAAK8E,OAEpD7E,IAAOD,EAAK6E,eAAiB,IAAIxE,KAErC,IALuC,EAKnC0E,EAAQ/E,EAAK+E,MACbC,EAAahF,EAAKgF,WAElBC,EAAc,EAEdpE,EAAQqE,YAAYC,MAClBC,EAAQ9I,KAAKmI,gBACfC,EAAYpI,KAAKoI,UAZkB,cAazBE,GAbyB,IAavC,2BAAqB,CAAC,IAAb7G,EAAY,QACfgG,EAAShG,EAAEqH,EACXxJ,EAAQmJ,EAAMhH,GACdsH,EAAYL,EAAWjH,GAC3B2G,EAAUX,EAAO,GAAKnI,EACtB8I,EAAUX,EAAO,GAAKtG,KAAK6H,MAAM7H,KAAK8H,IAAIF,EAAW/I,KAAK2G,gBAAgB3G,KAAK2G,eAAiB,KAChGgC,GAAe,GAnBsB,8BAqBvC,IAAIO,EAAMN,YAAYC,MACtB7I,KAAK8C,MAAMU,QAAQ,sBAAuB0F,EAAI3E,GAG9CvE,KAAK4G,aAAe5G,KAAK4G,cAAiB+B,EAAc,IArE5D,0CA0EI,IAAI/D,EAAK5E,KAAK4E,GACd,GAAK5E,KAAK4G,aAAV,CAGA,IAAIrC,EAAQqE,YAAYC,MALN,cAMF7I,KAAKD,KAAKf,MANR,GAMbgI,EANa,KAMVC,EANU,KAMPC,EANO,KAOlBtC,EAAGuE,cAAcvE,EAAGK,WAAY,EAAG,EAAG,EAAG,EAAG+B,EAAGC,EAAGC,EAAGtC,EAAGkB,GAAIlB,EAAGmB,cAAe/F,KAAKoI,UAAW,GAC9F,IAAIc,EAAMN,YAAYC,MACtB7I,KAAK8C,MAAMU,QAAQ,sBAAuB0F,EAAI3E,GAC9CvE,KAAK4G,cAAe,KAnFxB,kCAwFI5G,KAAK0G,eAAe0C,OACpBpJ,KAAKqI,kBAAkBe,KAAK,GAC5BpJ,KAAKf,IAAIoK,gBACTrJ,KAAKsJ,oBACLtJ,KAAKqH,qBAAqB+B,KAAK,GAC/BpJ,KAAKiI,sBAAsBmB,KAAK,GAE9B,IAAI7E,EAAQqE,YAAYC,MACxB7I,KAAK0G,eAAe6C,YACpB,IAAIL,EAAMN,YAAYC,MACtB7I,KAAK8C,MAAMU,QAAQ,YAAa0F,EAAI3E,OAlG1C,KAuGA,SAAUiC,EAAMjC,EAAO2E,GAAvB,uEACWzH,EAAI8C,EADf,YACsB9C,EAAIyH,GAD1B,gBAEI,OAFJ,SAEUzH,EAFV,OAC+BA,IAD/B,sDE7GO,IAAM+H,EAAb,WACE,WAAY5E,EAAI6E,EAAmBC,GAAsB,oBACvD1J,KAAK4E,GAAKA,EACV5E,KAAK2J,sBAAsBF,EAAmBC,GAC9C1J,KAAK4J,SAAW,GAChB5J,KAAK6J,UAAY,GALrB,kEAQwBJ,EAAmBC,GAAsB,IAAD,EAsChE,SAAwB9E,EAAI6E,EAAmBC,GAC7C,IAAMI,EAAgBlF,EAAGmF,aAAanF,EAAGoF,eAGzC,GAFApF,EAAGqF,aAAaH,EAAeL,GAC/B7E,EAAGsF,cAAcJ,IACZlF,EAAGuF,mBAAmBL,EAAelF,EAAGwF,gBAG3C,MAFA7G,QAAQD,MAAMsB,EAAGyF,iBAAiBP,IAClCvG,QAAQD,MAAMgH,EAAqBb,IAC7B,IAAIc,MAAM,mCAGlB,IAAMC,EAAkB5F,EAAGmF,aAAanF,EAAG6F,iBAG3C,GAFA7F,EAAGqF,aAAaO,EAAiBd,GACjC9E,EAAGsF,cAAcM,IACZ5F,EAAGuF,mBAAmBK,EAAiB5F,EAAGwF,gBAG7C,MAFA7G,QAAQD,MAAMsB,EAAGyF,iBAAiBG,IAClCjH,QAAQD,MAAMgH,EAAqBZ,IAC7B,IAAIa,MAAM,qCAGlB,IAAMG,EAAU9F,EAAG+F,gBAInB,GAHA/F,EAAGgG,aAAaF,EAASZ,GACzBlF,EAAGgG,aAAaF,EAASF,GACzB5F,EAAGiG,YAAYH,IACV9F,EAAGkG,oBAAoBJ,EAAS9F,EAAGmG,aAEtC,MADAxH,QAAQD,MAAMsB,EAAGoG,kBAAkBN,IAC7B,IAAIH,MAAM,sCAGlB,MAAO,CAACT,EAAeU,EAAiBE,GAjEqBO,CAAejL,KAAK4E,GAAI6E,EAAmBC,GAD1C,mBAC3D1J,KAAK8J,cADsD,KACvC9J,KAAKwK,gBADkC,KACjBxK,KAAK0K,QADY,OARhE,kCAacQ,EAAMC,GAChB,IACIC,EADKpL,KAAK4E,GACIyG,mBAAmBrL,KAAK0K,QAASQ,GAKnDlL,KAAK4J,SAAS0B,KAAKH,GACnBnL,KAAK6J,UAAUyB,KAAKF,KArBxB,6BAiCapL,KAAK4E,GACX2G,WAAWvL,KAAK0K,SACnB,IAAK,IAAIjJ,EAAI,EAAGA,EAAIzB,KAAK4J,SAASlI,OAAQD,IAAK,CAC7C,IAAI0J,EAAUnL,KAAK4J,SAASnI,GACxB2J,EAAWpL,KAAK6J,UAAUpI,GACb,OAAb2J,GAGJD,EAAQK,MAAMJ,QAzCpB,KA6EA,SAASd,EAAqBmB,GAG5B,OAFYA,EAAIC,MAAM,MAAMC,KAAI,SAACC,EAAGnK,GAAJ,gBAAaA,EAAE,EAAf,eAAuBmK,MACvCC,KAAK,MC7EhB,IAAMC,EAAb,WACE,WAAYlH,EAAIvB,EAAM0I,GAAQ,oBAC5B/L,KAAK4E,GAAKA,EAEV5E,KAAKqD,KAAOA,EAEZrD,KAAKgM,IAAMpH,EAAGqH,eACdrH,EAAGsH,WAAWtH,EAAGuH,aAAcnM,KAAKgM,KACpCpH,EAAGwH,WAAWxH,EAAGuH,aAAc9I,EAAM0I,GARzC,mDAYI,IAAInH,EAAK5E,KAAK4E,GACdA,EAAGsH,WAAWtH,EAAGuH,aAAcnM,KAAKgM,SAbxC,KAiBaK,EAAb,WACE,WAAYzH,GAAK,oBACf5E,KAAK4E,GAAKA,EACV5E,KAAKsM,IAAM1H,EAAG2H,oBACdvM,KAAKwM,cAAgB,IAAIzI,IAAI,CAACa,EAAG6H,IAAK7H,EAAG8H,eAJ7C,8DAOoBV,EAAKW,GACrB,IAAI/H,EAAK5E,KAAK4E,GAEd5E,KAAKoJ,OACL4C,EAAI5C,OAEJ,IAN6B,EAMzB3B,EAAS,EANgB,cAOPkF,EAAOC,YAPA,IAO7B,2BAAyC,CAAC,IAAjCC,EAAgC,QACvCjI,EAAGkI,wBAAwBD,EAAUE,OACjC/M,KAAKwM,cAAcQ,IAAIH,EAAU9N,MACnC6F,EAAGqI,qBAAqBJ,EAAUE,MAAOF,EAAUrE,MAAOqE,EAAU9N,KAAM8N,EAAUK,cAAeP,EAAOQ,OAAQ1F,GAElH7C,EAAGwI,oBAAoBP,EAAUE,MAAOF,EAAUrE,MAAOqE,EAAU9N,KAAM8N,EAAUK,cAAeP,EAAOQ,OAAQ1F,GAEnHA,GAAUoF,EAAUrE,MAAQqE,EAAU9M,MAdX,iCAPjC,6BA0BaC,KAAK4E,GACXyI,gBAAgBrN,KAAKsM,SA3B5B,KA+BagB,EAAb,WACE,WAAY1I,GAAK,oBACf5E,KAAK4E,GAAKA,EACV5E,KAAKmN,OAAS,EACdnN,KAAK4M,WAAa,GAJtB,2DAOiBG,EAAOvE,EAAOzJ,EAAMmO,GACjC,IAAInN,EAAOC,KAAKuN,OAAOxO,GACnB8N,EAAY,IAAIW,EAAsBT,EAAOvE,EAAOzJ,EAAMmO,EAAenN,GAC7EC,KAAK4M,WAAWtB,KAAKuB,GACrB7M,KAAKmN,QAAU3E,EAAQzI,IAX3B,4BAcQwE,EAAO2E,GACX,IAAIyD,EAAS,IAAIW,EAGjB,OAFAX,EAAOQ,OAASnN,KAAKmN,OACrBR,EAAOC,WAAa5M,KAAK4M,WAAWa,MAAMlJ,EAAO2E,GAC1CyD,IAlBX,6BAqBS5N,GACL,IAAI6F,EAAK5E,KAAK4E,GAEd,OAAQ7F,GACR,KAAK6F,EAAG8I,MACR,KAAK9I,EAAG8H,aACR,KAAK9H,EAAG6H,IAAK,OAAO,EACpB,QAAS,MAAM,IAAIlC,MAAJ,gCAAmCxL,SA5BtD,KAoCMyO,EACJ,WAAYT,EAAOvE,EAAOzJ,EAAMmO,EAAenN,GAAO,oBACpDC,KAAK+M,MAAQA,EACb/M,KAAKwI,MAAQA,EACbxI,KAAKjB,KAAOA,EACZiB,KAAKkN,cAAgBA,EACrBlN,KAAKD,KAAOA,GC5FH4N,EAAb,WACI,WAAY/I,EAAIvB,GAAO,oBACnBrD,KAAK4E,GAAKA,EAEV5E,KAAK4N,OAAShJ,EAAGqH,eACjBjM,KAAKwI,MAAQnF,EAAK3B,OAClBkD,EAAGsH,WAAWtH,EAAGiJ,qBAAsB7N,KAAK4N,QAC5ChJ,EAAGwH,WAAWxH,EAAGiJ,qBAAsBxK,EAAMuB,EAAGkJ,aAPxD,mDAWQ,IAAIlJ,EAAK5E,KAAK4E,GACdA,EAAGsH,WAAWtH,EAAGiJ,qBAAsB7N,KAAK4N,YAZpD,KCAaG,EAAb,WACI,WAAYnJ,EAAIvB,GAAO,oBACnBrD,KAAK4E,GAAKA,EACV5E,KAAKqD,KAAOA,EAHpB,kDAMU+H,GACHpL,KAAK4E,GAAGoJ,iBAAiB5C,GAAU,EAAOpL,KAAKqD,UAPtD,KAWa4K,EAAb,WACI,WAAYrJ,EAAIvB,GAAO,oBACnBrD,KAAK4E,GAAKA,EACV5E,KAAKqD,KAAOA,EAHpB,kDAMU+H,GACFpL,KAAK4E,GAAGsJ,UAAU9C,EAAUpL,KAAKqD,KAAK,GAAIrD,KAAKqD,KAAK,GAAIrD,KAAKqD,KAAK,QAP1E,KAsBa8K,EAAb,WACI,WAAYC,GAAW,oBACnBpO,KAAKoO,SAAWA,EAFxB,kDAKUhD,GACFpL,KAAKoO,SAAShD,OANtB,KCNe,EA3BH,wSA2BG,EAVL,uGCkBV,IAoBaiD,EAAO,CAChBC,YAxDJ,SAAqBC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GAClD,OAAO,IAAIC,aAAa,CACtBN,EAAMK,EAAQH,EAAO,EAAG,EAAG,EAC3BD,EAAOI,EAAQH,EAAO,EAAG,EAAG,EAC5BF,EAAMI,EAAKF,EAAO,EAAG,EAAG,EACxBD,EAAOG,EAAKF,EAAO,EAAG,EAAG,EAEzBF,EAAMI,EAAKF,EAAO,EAAG,EAAG,EACxBF,EAAMI,EAAKD,EAAM,EAAG,EAAG,EACvBF,EAAOG,EAAKD,EAAM,EAAG,EAAG,EACxBF,EAAOG,EAAKF,EAAO,EAAG,EAAG,EAEzBD,EAAOG,EAAKF,EAAO,EAAG,EAAG,EACzBD,EAAOI,EAAQH,EAAO,EAAG,EAAG,EAC5BD,EAAOI,EAAQF,EAAM,EAAG,EAAG,EAC3BF,EAAOG,EAAKD,EAAM,EAAG,EAAG,EAExBH,EAAMI,EAAKF,GAAQ,EAAG,EAAG,EACzBF,EAAMI,EAAKD,GAAO,EAAG,EAAG,EACxBH,EAAMK,EAAQH,GAAQ,EAAG,EAAG,EAC5BF,EAAMK,EAAQF,GAAO,EAAG,EAAG,EAE3BH,EAAMK,EAAQH,EAAO,GAAI,EAAG,EAC5BF,EAAMK,EAAQF,EAAM,GAAI,EAAG,EAC3BF,EAAOI,EAAQF,EAAM,GAAI,EAAG,EAC5BF,EAAOI,EAAQH,EAAO,GAAI,EAAG,EAE7BF,EAAMI,EAAKD,EAAM,EAAG,GAAI,EACxBF,EAAOG,EAAKD,EAAM,EAAG,GAAI,EACzBH,EAAMK,EAAQF,EAAM,EAAG,GAAI,EAC3BF,EAAOI,EAAQF,EAAM,EAAG,GAAI,KA2B5BI,WAtBe,IAAIC,YAAY,CAC/B,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,GACN,EAAG,GAAI,GAEP,GAAI,GAAI,GACR,GAAI,GAAI,GAER,GAAI,GAAI,GACR,GAAI,GAAI,GAER,GAAI,GAAI,GACR,GAAI,GAAI,MAsBZ,IAeaC,EAAiB,CAC1BV,YA9BJ,SAAiCC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GAC9D,OAAO,IAAIC,aAAa,CACtBN,EAAMK,EAAQH,EACdD,EAAOI,EAAQH,EACfF,EAAMI,EAAKF,EACXD,EAAOG,EAAKF,EACZF,EAAMK,EAAQF,EACdF,EAAOI,EAAQF,EACfH,EAAMI,EAAKD,EACXF,EAAOG,EAAKD,KAsBZI,WAjB2B,IAAIC,YAAY,CAC7C,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,KCnFKE,EAAb,WACI,WAAYlP,EAAMmP,GAAY,0BACMlP,KAAKmP,SAASpP,EAAMmP,GAD3B,mBACpBZ,EADoB,KACPQ,EADO,KAEzB9O,KAAKD,KAAOA,EACZC,KAAKkP,UAAYA,EACjBlP,KAAKsO,YAAc,IAAIO,aAAaP,GACpCtO,KAAK8O,WAAa,IAAIC,YAAYD,GAN1C,qDASa/O,EAAMmP,GACX,IAAIZ,EAAc,GACdQ,EAAa,GACbM,EAAiB,EACrB,SAASC,EAAUhM,GAAO,IAAD,cACRA,EADQ,GAChBuI,EADgB,KACbnK,EADa,KAErB6M,EAAYhD,KAAZ,MAAAgD,EAAW,YAAS1C,IACpB,IAAI0D,EAAgB7N,EAAEkK,KAAI,SAAA4D,GAAG,OAAIA,EAAIH,KACrCN,EAAWxD,KAAX,MAAAwD,EAAU,YAASQ,IACnBF,GAAkB,GAKtB,IADA,IAAIvK,EAAQzE,IAAKC,WAAW6O,EAAWA,EAAWA,GAClD,MAAc,CAAC,EAAGnP,EAAK,IAAvB,eACI,IADC,IAAIiH,EAAC,KACN,MAAc,CAAC,EAAGjH,EAAK,IAAvB,eACI,IADC,IAAIkH,EAAC,KACN,MAAc,CAAC,EAAGlH,EAAK,IAAvB,eAA4B,CAAvB,IAAImH,EAAC,KACNmI,EAAUrP,KAAKwP,YAAY,CAACxI,EAAGC,EAAGC,GAAIrC,IAKlDA,EAAQzE,IAAKC,WAAWN,EAAK,GAAGmP,EAAWA,EAAWA,GACtD,cAAc,CAAC,EAAGnP,EAAK,IAAvB,eACI,IADC,IAAIkH,EAAC,KACN,MAAc,CAAC,EAAGlH,EAAK,IAAvB,eAA4B,CAAvB,IAAImH,EAAC,KACFF,EAAIjH,EAAK,GAAG,EAChBsP,EAAUrP,KAAKwP,YAAY,CAACxI,EAAGC,EAAGC,GAAIrC,IAI9CA,EAAQzE,IAAKC,WAAW6O,EAAWnP,EAAK,GAAGmP,EAAWA,GACtD,cAAc,CAAC,EAAGnP,EAAK,IAAvB,eACI,IADC,IAAIiH,EAAC,KACN,MAAc,CAAC,EAAGjH,EAAK,IAAvB,eAA4B,CAAvB,IAAImH,EAAC,KACFD,EAAIlH,EAAK,GAAG,EAChBsP,EAAUrP,KAAKwP,YAAY,CAACxI,EAAGC,EAAGC,GAAIrC,IAI9CA,EAAQzE,IAAKC,WAAW6O,EAAWA,EAAWnP,EAAK,GAAGmP,GACtD,cAAc,CAAC,EAAGnP,EAAK,IAAvB,eACI,IADC,IAAIiH,EAAC,KACN,MAAc,CAAC,EAAGjH,EAAK,IAAvB,eAA4B,CAAvB,IAAIkH,EAAC,KACFC,EAAInH,EAAK,GAAG,EAChBsP,EAAUrP,KAAKwP,YAAY,CAACxI,EAAGC,EAAGC,GAAIrC,IAI9C,MAAO,CAACyJ,EAAaQ,KAvD7B,kCA0DgBW,EAAQ5K,GAChB,IAAI0J,EAAOkB,EAAO,GAAK5K,EAAM,GAAG,EAC5B2J,EAAQiB,EAAO,GAAK5K,EAAM,GAAG,EAC7B8J,EAAMc,EAAO,GAAK5K,EAAM,GAAG,EAC3B+J,EAASa,EAAO,GAAK5K,EAAM,GAAG,EAC9B4J,EAAQgB,EAAO,GAAK5K,EAAM,GAAG,EAC7B6J,EAAOe,EAAO,GAAK5K,EAAM,GAAG,EAGhC,MAAO,CAFWwJ,EAAKC,YAAYC,EAAMC,EAAOC,EAAOC,EAAMC,EAAKC,GACjDP,EAAKS,gBAlE9B,K,2BCDMY,G,WACJ,WAAY3Q,EAAMC,EAAO2Q,GAAO,oBAC9B3P,KAAKjB,KAAOA,EACZiB,KAAK2P,KAAOA,EACZ3P,KAAK4P,OAAS5Q,EACdgB,KAAK8D,UAAY,IAAIC,I,mDAYhBC,GACLhE,KAAK8D,UAAUlB,IAAIoB,K,+BAGZA,GACPhE,KAAK8D,UAAUI,OAAOF,K,+BAGd,IAAD,gBACchE,KAAK8D,WADnB,IACP,2BAAqC,EACnCE,EADmC,SAC1BhE,OAFJ,iC,0BAjBChB,GACRgB,KAAK4P,OAAS5Q,EACdgB,KAAKyD,U,eAIL,OAAOzD,KAAK4P,W,KAkBHC,GAAb,kDACE,WAAY7Q,EAAO2Q,GAAO,uCAClB,SAAU3Q,EAAO2Q,GAF3B,gDAMYhO,GACR,+CAAcA,EAAd,UAPJ,eAWI,OAAO,yDAXX,GAA4B+N,IAefI,GAAb,kDACE,WAAYC,EAAOJ,GAAO,uCAClB,QAASI,EAAOJ,GAF1B,gDAKYhO,GACR,+CAAcvB,IAAKC,WAAWsB,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAAlD,UANJ,eAUI,OAAO,yDAVX,GAA2B+N,IAcdM,GAAb,kDACE,WAAY/G,EAAK7H,EAAKpC,EAAO2Q,GAAO,IAAD,8BACjC,cAAM,SAAU3Q,EAAO2Q,IAClB1G,IAAMA,EACX,EAAK7H,IAAMA,EAHsB,EADrC,kDAgBQO,GAOJ,OANIA,EAAM3B,KAAKiJ,MACbtH,EAAM3B,KAAKiJ,KAETtH,EAAM3B,KAAKoB,MACbO,EAAM3B,KAAKoB,KAENO,IAvBX,0BAOYA,GACRA,EAAM3B,KAAKiQ,MAAMtO,GACjB,+CAAcA,EAAd,UATJ,eAaI,OAAO,yDAbX,GAA4B+N,IA2BfQ,GAAb,kDACE,WAAYC,GAAmC,IAAD,EAAzBpD,EAAyB,uDAAnB,EAAG4C,EAAgB,4DAAXS,EAAW,4BAC5C,cAAM,WAAYrD,EAAO4C,IACpBQ,QAAUA,EAF6B,EADhD,gDAMYpD,GACRA,EAAQ5L,KAAK8H,IAAI8D,EAAO/M,KAAKmQ,QAAQzO,OAAO,GAC5C,+CAAcqL,EAAd,UARJ,eAYI,OAAO,uDAZX,qCAiBI,OADa/M,KAAKmQ,QAAQnQ,KAAKhB,WAhBnC,GAA8B0Q,IC/EjBW,GAAb,WACE,WAAYzL,EAAI7E,EAAMuQ,GAAS,IAAD,2BAC5BtQ,KAAK4E,GAAKA,EAEV5E,KAAKsQ,OAASA,EACdtQ,KAAKuQ,OAAS,IAAIT,GAAM,CAAC,EAAE,EAAE,GAAI,iBACjC9P,KAAKwQ,OAAS,IAAIhH,EAAO5E,EAAI6L,EAAsBA,GACnDzQ,KAAK0Q,gBAEL1Q,KAAKD,KAAOA,EACZC,KAAKiD,SAASjD,KAAKD,KAAKf,OACxBgB,KAAKD,KAAKgB,QAAO,SAAAhB,GAAI,OAAI,EAAKkD,SAASlD,EAAKf,UAXhD,qDAeWe,GACP,IAAM6E,EAAK5E,KAAK4E,GAKZ+L,EAAgBvQ,IAAKG,SACzBH,IAAKwC,IAAI+N,EAAe5Q,EAAMK,IAAKC,WAAW,EAAU,EAAU,IAClEL,KAAK4Q,WAAaxQ,IAAKC,YAJV,YAMbL,KAAK6Q,OAAS,IAAI5B,EAAY0B,EAPd,IAShB3Q,KAAKgM,IAAM,IAAIF,EAAmBlH,EAAI5E,KAAK6Q,OAAOvC,YAAa1J,EAAGkJ,aAClE9N,KAAK8Q,aAAe,IAAInD,EAAY/I,EAAI5E,KAAK6Q,OAAO/B,YAEpD,IAAInC,EAAS,IAAIW,EAAmB1I,GACpC+H,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GACtCf,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GAEtC1N,KAAKsM,IAAM,IAAID,EAAkBzH,GACjC5E,KAAKsM,IAAI0E,kBAAkBhR,KAAKgM,IAAKW,GACrC3M,KAAKwQ,OAAOS,YAAY,UAAW,IAAIhD,EAAarJ,EAAI5E,KAAK4Q,eApCjE,sCAuCmB,IAAD,OACVhM,EAAK5E,KAAK4E,GAEd5E,KAAKwQ,OAAOS,YAAY,SAAU,IAAIlD,EAAanJ,EAAI5E,KAAKsQ,OAAO5P,QACnEV,KAAKwQ,OAAOS,YAAY,QAAS,IAAIlD,EAAanJ,EAAI5E,KAAKsQ,OAAO1P,OAClEZ,KAAKwQ,OAAOS,YAAY,cAAe,IAAIlD,EAAanJ,EAAI5E,KAAKsQ,OAAOzP,aAGxEb,KAAKwQ,OAAOS,YAAY,UAAW,IAAI9C,GAAQ,SAAA+C,GAC7C,IAAIC,EAAI,EAAKZ,OAAOvR,MACpB4F,EAAGwM,UAAUF,EAAKC,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAK,SAjDtD,kCAsDI,IAAIvM,EAAK5E,KAAK4E,GACd5E,KAAKwQ,OAAOpH,OACZpJ,KAAKsM,IAAIlD,OACTpJ,KAAK8Q,aAAa1H,OAElBxE,EAAGyM,aAAazM,EAAG0M,UAAWtR,KAAK8Q,aAAatI,MAAO5D,EAAG8H,aAAc,OA3D5E,KCLa6E,GAAb,WACI,WAAY3M,EAAI4M,EAAOC,GAAS,oBAC5BzR,KAAK4E,GAAKA,EACV5E,KAAKwR,MAAL,aACIzR,KAAMK,IAAKG,UACRiR,GAEPxR,KAAKyR,OAASA,EAPtB,yDAWiBD,GACTxR,KAAKwR,MAAL,eAAkBxR,KAAKwR,MAAvB,GAAiCA,KAZzC,iCAeeC,GACPzR,KAAKyR,OAAL,eAAmBzR,KAAKyR,OAAxB,GAAmCA,KAhB3C,oCAoBkBA,GACV,IAAK,IAAIC,KAAOD,EAAQ,CACRzR,KAAKyR,OAAOC,GAClB1S,MAAQyS,EAAOC,GAEzB1R,KAAKyR,OAAL,eAAmBzR,KAAKyR,UAzBhC,mCA6BiBjB,GAAS,IAAD,OACb5L,EAAK5E,KAAK4E,GAEd4L,EAAOS,YAAY,SAAU,IAAIlD,EAAanJ,EAAI5E,KAAKwR,MAAMlB,OAAO5P,QACpE8P,EAAOS,YAAY,QAAS,IAAIlD,EAAanJ,EAAI5E,KAAKwR,MAAMlB,OAAO1P,OACnE4P,EAAOS,YAAY,cAAe,IAAIlD,EAAanJ,EAAI5E,KAAKwR,MAAMlB,OAAOzP,aAEzE2P,EAAOS,YAAY,gBAAiB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGsJ,UAAH,MAAAtJ,EAAE,CAAWsM,GAAX,mBAAmB,EAAKM,MAAMlB,OAAOnQ,qBAC9FqQ,EAAOS,YAAY,YAAa,IAAI9C,GAAQ,SAAA+C,GAAQ,IAAD,cAC/B,EAAKM,MAAMzR,KAAKf,MADe,GAC1CgI,EAD0C,KACvCC,EADuC,KACpCC,EADoC,KAE/CtC,EAAGsJ,UAAUgD,EAAKlK,EAAGC,EAAGC,OAG5BsJ,EAAOS,YAAY,gBAAiB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAG+M,UAAUT,EAAK,OACzEV,EAAOS,YAAY,sBAAuB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAG+M,UAAUT,EAAK,OAC/EV,EAAOS,YAAY,uBAAwB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAG+M,UAAUT,EAAK,SA5CxF,4ECqCMU,GAAqB,SAACC,GAAD,ilCAqCjBA,EArCiB,6SA6GdC,GAAgB,CACzBC,SAzJa,ijCA0JbC,SAAU,CACN1S,MA7DgBsS,GAAmB,sHA8DnCK,IAtDcL,GAAmB,gHAuDjCM,MA/CgBN,GAAmB,gVAgDnCO,OApCiBP,GAAmB,gVAqCpC7I,UAzBoB6I,GAAmB,kIA0BvCQ,oBAlB8BR,GAAmB,8JCnI5CS,GAAb,kDACI,WAAYzN,EAAI4M,EAAOC,GAAS,IAAD,sBAC3B,cAAM7M,EAAI4M,EAAOC,GADU,MAEaa,GAAmB1N,GAFhC,0BAE1B,EAAK0H,IAFqB,KAEhB,EAAKiG,IAFW,KAEN,EAAKzD,WAFC,KAG3B,EAAK0D,WAAW,CACZC,UAAW,IAAIzC,GAAO,EAAG,EAAG,IAAM,mDAClC0C,YAAa,IAAI1C,GAAO,GAAK,EAAG,EAAG,mDAEvC,EAAK2C,gBACL,EAAKlB,OAAOI,UAAU9Q,QAAO,WACzB,EAAK4R,mBATkB,EADnC,4DAeQ,IAAIpC,EAASvQ,KAAKyR,OAAOI,UAAUe,eAC/Bb,EAAWD,GAAcC,SACzBC,EAAWF,GAAcE,SAASzB,GACtCvQ,KAAKwQ,OAAS,IAAIhH,EAAOxJ,KAAK4E,GAAImN,EAAUC,GAC5ChS,KAAK6S,aAAa7S,KAAKwQ,UAnB/B,mCAsBiBA,GAAS,IAAD,OACjB,sEAAmBA,GACnB,IAAI5L,EAAK5E,KAAK4E,GACd4L,EAAOS,YAAY,aAAc,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOgB,UAAUzT,WAC5FwR,EAAOS,YAAY,cAAe,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOiB,YAAY1T,aA1BvG,6BA8BQgB,KAAKwQ,OAAOpH,OACZpJ,KAAKsM,IAAIlD,OACTpJ,KAAKuS,IAAInJ,SAhCjB,kCAoCQ,IAAIxE,EAAK5E,KAAK4E,GACdA,EAAGmO,OAAOnO,EAAGoO,WAFL,MAIQhT,KAAKwR,MAAMzR,KAAKf,MAAM2M,KAAI,SAAAsH,GAAC,OAAI9R,KAAK+R,IAAID,EAAE,MAJlD,mBAIHE,EAJG,KAIAC,EAJA,KAIGC,EAJH,OAKQrT,KAAKwR,MAAMlB,OAAOnQ,cAAcwL,IAAIxK,KAAK+R,KALjD,mBAKHlM,EALG,KAKAC,EALA,KAKGC,EALH,KAMJF,EAAImM,GAAKlM,EAAImM,GAAKlM,EAAImM,EACtBzO,EAAG0O,SAAS1O,EAAG2O,OAEf3O,EAAG0O,SAAS1O,EAAG4O,MAGnB5O,EAAGyM,aAAazM,EAAG0M,UAAWtR,KAAKuS,IAAI/J,MAAO5D,EAAG8H,aAAc,OA/CvE,GAAoC6E,IAmD9Be,GAAqB,SAAC1N,GAC1B,IAAI+H,EAAS,IAAIW,EAAmB1I,GACpC+H,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GAEtC,IAAIY,EAAcU,EAAeV,YAAY,EAAG,EAAG,EAAG,EAAG,EAAG,GACxDQ,EAAaE,EAAeF,WAE5B9C,EAAM,IAAIF,EAAmBlH,EAAI0J,EAAa1J,EAAGkJ,aACjDyE,EAAM,IAAI5E,EAAY/I,EAAIkK,GAE1BxC,EAAM,IAAID,EAAkBzH,GAGhC,OAFA0H,EAAI0E,kBAAkBhF,EAAKW,GAEpB,CAACL,EAAKiG,EAAKzD,IC4FPpF,GAAsB,CAC/B+J,MAxKkB,SAACC,GAAD,8pFAyKlBC,gBAvE4B,SAACD,GAAD,wzCAwE5BE,WArBqB,SAACF,GAAD,mIASvBA,EAAc,GAAK,mBATI,aAUvBA,EAAc,GAAK,oBAVI,gHC1FnBG,GAAc,YA3DE,iSA2DF,aAVG,2KAUH,aAjDO,ssBAiDP,aApBD,qKAoBC,MAqBdC,GAAuB,SAACJ,GAAD,8JAS3BA,EAAc,GAAK,kBATQ,oZA4B3BA,EAAc,GAAK,oBA5BQ,aA6B3BA,EAAc,GAAK,qBA7BQ,eA+B3BG,GA/B2B,OAmCvBE,GAAuB,SAACL,GAAD,kBAE3BA,EACE,wDACA,kCAJyB,wGAS3BA,EAAc,GAAK,oBATQ,aAU3BA,EAAc,GAAK,kDAVQ,kDAuFhBjK,GAAoB,CAC7BnK,MAzEwB,SAACoU,GAAD,gBACzBI,GAAqBJ,GADI,gCA9DE,8RA8DF,wIAMtBK,GAAqBL,GANC,QA0ExBzB,IAjEuB,SAACyB,GAAD,gBACxBI,GAAqBJ,GADG,gCAvEG,8RAuEH,6KAOrBK,GAAqBL,GAPA,UAkEvBxB,MAvDyB,SAACwB,GAAD,gBAC1BI,GAAqBJ,GADK,gCAlFC,8RAkFD,mUAUvBK,GAAqBL,GAVE,QAwDzBvB,OA3C0B,SAACuB,GAAD,gBAC3BI,GAAqBJ,GADM,gCA/FA,8RA+FA,6aAaxBK,GAAqBL,GAbG,QA4C1B3K,UA5B6B,SAAC2K,GAAD,gBAC9BI,GAAqBJ,GADS,gCA/GH,8RA+GG,yOAQ3BK,GAAqBL,GARM,QA6B7BtB,oBAlBuC,SAACsB,GAAD,gBACxCI,GAAqBJ,GADmB,gCA1Hb,8RA0Ha,wPAQrCK,GAAqBL,GARgB,SClL9BM,GAAb,kDACI,WAAYpP,EAAI4M,EAAOC,GAAS,IAAD,8BAC3B,cAAM7M,EAAI4M,EAAOC,IACZe,WAAW,CACZyB,WAAY,IAAI/D,GAAS,CAAC,OAAQ,OAAQ,EAAG,0CAC7CgE,WAAY,IAAIlE,GAAO,EAAG,EAAG,EAAG,qBAChCyC,UAAW,IAAIzC,GAAO,EAAG,EAAG,IAAM,8CAClCmE,gBAAiB,IAAItE,GAAO,EAAG,wCAEnC,EAAKxM,KAAO,CACR+Q,KAAMC,GAAiBzP,GACvB0P,IAAKC,GAAqB3P,IAE9B,EAAK+N,gBACL,EAAKlB,OAAOI,UAAU9Q,QAAO,SAAA8Q,GACzB,EAAKc,mBAdkB,EADnC,4DAoBQ,IAAIpC,EAASvQ,KAAKyR,OAAOI,UAAUe,eAC/Bb,EAAWtI,GAAkB8G,IAAQ,GACrCyB,EAAWtI,GAAoBkK,YAAW,GAC9C5T,KAAKwQ,OAAS,IAAIhH,EAAOxJ,KAAK4E,GAAImN,EAAUC,GAC5ChS,KAAK6S,aAAa7S,KAAKwQ,UAxB/B,mCA2BiBA,GAAS,IAAD,OACjB,sEAAmBA,GACnB,IAAI5L,EAAK5E,KAAK4E,GACd4L,EAAOS,YAAY,cAAe,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOyC,WAAWlV,WAC9FwR,EAAOS,YAAY,aAAc,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOgB,UAAUzT,WAC5FwR,EAAOS,YAAY,kBAAmB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAG+M,UAAUT,EAAK,EAAKO,OAAO0C,gBAAgBnV,aAhC/G,6BAwCQgB,KAAKwQ,OAAOpH,OACZ,IAAI/F,EAAOrD,KAAKwU,aAChBnR,EAAKiJ,IAAIlD,OACT/F,EAAKkP,IAAInJ,SA3CjB,kCA+CQ,IAAIxE,EAAK5E,KAAK4E,GACVvB,EAAOrD,KAAKwU,aAFR,cAGQxU,KAAKwR,MAAMzR,KAAKf,MAHxB,GAIJmI,EAJI,eAKRvC,EAAGmO,OAAOnO,EAAGoO,WACbpO,EAAG0O,SAAS1O,EAAG4O,MACf5O,EAAG6P,sBAAsB7P,EAAG0M,UAAWjO,EAAKkP,IAAI/J,MAAO5D,EAAG8H,aAAcrJ,EAAKyL,WAAY3H,KArDjG,mCAoCQ,OAAOnH,KAAKqD,KAAKrD,KAAKyR,OAAOwC,WAAWrB,oBApChD,GAAwCrB,IA0DlC8C,GAAmB,SAACzP,GACtB,IAAI+H,EAAS,IAAIW,EAAmB1I,GACpC+H,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GAEtC,IAAIY,EAAc,IAAIO,aAAa,CAAC,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,KACtCC,EAAa,IAAIC,YAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAE7C/C,EAAM,IAAIF,EAAmBlH,EAAI0J,EAAa1J,EAAGkJ,aACjDyE,EAAM,IAAI5E,EAAY/I,EAAIkK,GAE1BxC,EAAM,IAAID,EAAkBzH,GAEhC,OADA0H,EAAI0E,kBAAkBhF,EAAKW,GACpB,CAACL,IAAKA,EAAKiG,IAAKA,EAAKzD,WAAYA,IAItCyF,GAAuB,SAAC3P,GAC1B,IAAI+H,EAAS,IAAIW,EAAmB1I,GACpC+H,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GAEtC,IAAIY,EAAc,IAAIO,aAAa,EAAE,IAAM,GAAK,GACZ,KAAM,GAAK,GACX,IAAM,IAAK,KAC3CC,EAAa,IAAIC,YAAY,CAAC,EAAG,EAAG,IAEpC/C,EAAM,IAAIF,EAAmBlH,EAAI0J,EAAa1J,EAAGkJ,aACjDyE,EAAM,IAAI5E,EAAY/I,EAAIkK,GAE1BxC,EAAM,IAAID,EAAkBzH,GAEhC,OADA0H,EAAI0E,kBAAkBhF,EAAKW,GACpB,CAACL,IAAKA,EAAKiG,IAAKA,EAAKzD,WAAYA,ICxF/B4F,GAAb,kDACI,WAAY9P,EAAI4M,EAAOC,GAAS,IAAD,uBAC3B,cAAM7M,EAAI4M,EAAO,KACZmD,eAAiB,CAClBC,iBAAkB,IAAI5E,GAAO,EAAG,EAAG,GAAK,6BACxC6E,iBAAkB,IAAI7E,GAAO,EAAG,EAAG,IAAM,8BACzC8E,kBAAmB,IAAI9E,GAAO,EAAG,EAAG,GAAK,8BACzC+E,sBAAuB,IAAI/E,GAAO,EAAG,IAAO,EAAK,oCACjDmE,gBAAiB,IAAItE,GAAO,EAAG,0EAC/BmF,SAAU,IAAIhF,GAAO,EAAG,EAAG,EAAG,2BAC9BiF,QAAS,IAAIjF,GAAO,EAAG,EAAG,EAAG,2BAC7BkF,aAAc,IAAIlF,GAAO,EAAG,EAAG,IAAM,uBACrCmF,aAAc,IAAInF,GAAO,EAAG,EAAG,IAAM,4BACrCkE,WAAY,IAAIlE,GAAO,EAAG,EAAG,EAAK,6BAClCyC,UAAW,IAAIzC,GAAO,EAAG,EAAG,EAAK,8CACjCoF,aAAc,IAAItF,GAAM1P,IAAKC,WAAW,IAAK,IAAK,KAAM,kBAG5D,EAAKgV,cAAL,eACO5D,EADP,CAEI6D,QAAS,IAAIpF,GAASqF,OAAOC,KAAK9L,IAAsB,EAAG,oCAG/D,EAAK+L,aAAe,CAClBhC,MAAO,CAAC,YAAa,eAAgB,eAAgB,WAAY,UAAW,eAAgB,mBAC5FE,gBAAiB,CAAC,YAAa,mBAAoB,mBAAoB,oBAAqB,wBAAyB,eAAgB,mBACrIC,WAAY,CAAC,YAAa,aAAc,oBAG1C,EAAK8B,aAAa,CACdC,eAAgBvV,IAAKG,WA7BE,MA+BaqV,GAAiBhR,GA/B9B,0BA+B1B,EAAK0H,IA/BqB,KA+BhB,EAAKiG,IA/BW,KA+BN,EAAKzD,WA/BC,KAgC3B,EAAK6D,gBACL,EAAKlB,OAAOI,UAAU9Q,QAAO,kBAAM,EAAK4R,mBACxC,EAAKlB,OAAO6D,QAAQvU,QAAO,kBAAM,EAAK4R,mBAlCX,EADnC,4DAuCQ3S,KAAK6V,cACL,IAAItF,EAASvQ,KAAKqV,cAAcxD,UAAUe,eACtC0C,EAAUtV,KAAKqV,cAAcC,QAAQ1C,eACrCb,EAAWtI,GAAkB8G,IAAQ,GACrCyB,EAAWtI,GAAoB4L,IAAS,GAC5CtV,KAAKwQ,OAAS,IAAIhH,EAAOxJ,KAAK4E,GAAImN,EAAUC,GAC5ChS,KAAK6S,aAAa7S,KAAKwQ,UA7C/B,oCAkDQ,IADU,EACNiB,EAAS,GACT6D,EAAUtV,KAAKqV,cAAcC,QAAQ1C,eACrC4C,EAAOxV,KAAKyV,aAAaH,GAHnB,cAIME,GAJN,IAIV,2BAAsB,CAAC,IAAd9D,EAAa,QAClBD,EAAOC,GAAO1R,KAAK2U,eAAejD,IAL5B,8BAOV1R,KAAKyR,OAAL,eAAkBzR,KAAKqV,cAAvB,GAAyC5D,KAxDjD,mCA2DiBjB,GAAS,IAAD,OACjB,sEAAmBA,GACnB,IAAI5L,EAAK5E,KAAK4E,GAEd4L,EAAOS,YAAY,iBAAkB,IAAIhD,EAAarJ,EAAI5E,KAAKwR,MAAMmE,iBACrEnF,EAAOS,YAAY,eAAgB,IAAI9C,GAAQ,SAAA+C,GAC3C,IAAIC,EAAI,EAAKwD,eAAeS,aAAapW,MACzC4F,EAAGsJ,UAAUgD,EAAKC,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAKA,EAAE,GAAG,SAE/CX,EAAOS,YAAY,aAAc,IAAI9C,GAAQ,SAAA+C,GACzC,IAAIC,EAAI,EAAKwD,eAAeS,aAAapW,MACzC4F,EAAGsJ,UAAUgD,EAAKC,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAKA,EAAE,GAAG,SAG/CX,EAAOS,YAAY,mBAAoB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOmD,iBAAiB5V,WACzGwR,EAAOS,YAAY,mBAAoB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOoD,iBAAiB7V,WACzGwR,EAAOS,YAAY,oBAAqB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOqD,kBAAkB9V,WAC3GwR,EAAOS,YAAY,uBAAwB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOsD,sBAAsB/V,WAClHwR,EAAOS,YAAY,cAAe,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOyC,WAAWlV,WAC9FwR,EAAOS,YAAY,aAAc,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOgB,UAAUzT,WAE5FwR,EAAOS,YAAY,kBAAmB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAG+M,UAAUT,EAAK,EAAKO,OAAO0C,gBAAgBnV,WACvGwR,EAAOS,YAAY,WAAY,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOuD,SAAShW,WACzFwR,EAAOS,YAAY,UAAW,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOwD,QAAQjW,WACvFwR,EAAOS,YAAY,eAAgB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAOyD,aAAalW,WACjGwR,EAAOS,YAAY,eAAgB,IAAI9C,GAAQ,SAAA+C,GAAG,OAAItM,EAAGkO,UAAU5B,EAAK,EAAKO,OAAO0D,aAAanW,aApFzG,6BAwFQgB,KAAKwQ,OAAOpH,OACZpJ,KAAKsM,IAAIlD,OACTpJ,KAAKuS,IAAInJ,SA1FjB,kCA8FQ,IAAIxE,EAAK5E,KAAK4E,GADN,cAEQ5E,KAAKwR,MAAMzR,KAAKf,MAFxB,GAGJmI,EAHI,eAIRvC,EAAGmO,OAAOnO,EAAGoO,WACbpO,EAAG0O,SAAS1O,EAAG4O,MACf5O,EAAG6P,sBAAsB7P,EAAG0M,UAAWtR,KAAKuS,IAAI/J,MAAO5D,EAAG8H,aAAc1M,KAAK8O,WAAY3H,OAnGjG,GAAmCoK,IAuG7BqE,GAAmB,SAAChR,GACxB,IAAI+H,EAAS,IAAIW,EAAmB1I,GACpC+H,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GACtCf,EAAOoE,eAAe,EAAG,EAAGnM,EAAG8I,OAAO,GAEtC,IAAIY,EAAcD,EAAKC,YAAY,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9CQ,EAAaT,EAAKS,WAElB9C,EAAM,IAAIF,EAAmBlH,EAAI0J,EAAa1J,EAAGkJ,aACjDyE,EAAM,IAAI5E,EAAY/I,EAAIkK,GAE1BxC,EAAM,IAAID,EAAkBzH,GAGhC,OAFA0H,EAAI0E,kBAAkBhF,EAAKW,GAEpB,CAACL,EAAKiG,EAAKzD,IC9HPgH,GAAb,WACE,WAAYlR,EAAI7E,EAAMuQ,GAAS,oBAC7BtQ,KAAK4E,GAAKA,EACV5E,KAAKD,KAAOA,EACZC,KAAKsQ,OAASA,EAEd,IAAIkB,EAAQ,CACVzR,KAAMC,KAAKD,KACXuQ,OAAQtQ,KAAKsQ,QAGftQ,KAAKqV,cAAgB,CACnBxD,UAAW,IAAI3B,GAASqF,OAAOC,KAAK/L,IAAoB,EAAG,kCAG7DzJ,KAAK+V,UAAY,CACfC,OAAQ,IAAI3D,GAAezN,EAAI4M,EAAOxR,KAAKqV,eAC3CY,MAAO,IAAIjC,GAAmBpP,EAAI4M,EAAOxR,KAAKqV,eAC9Ca,MAAO,IAAIxB,GAAc9P,EAAI4M,EAAOxR,KAAKqV,gBAUzCrV,KAAKmW,cAAgB,IAAIjG,GAASqF,OAAOC,KAAKxV,KAAK+V,WAAY,EAL7D,0LAvBR,4DAqCkBhJ,GACd/M,KAAKmW,cAAcnX,MAAQ+N,IAtC/B,oCA6CgB0E,GACZzR,KAAKoW,iBAAiBC,cAAc5E,KA9CxC,6BAkDIzR,KAAKoW,iBAAiBhN,SAlD1B,kCAsDIpJ,KAAKoW,iBAAiB7M,cAtD1B,uCAiCI,IAAImI,EAAM1R,KAAKmW,cAAcvD,eAC7B,OAAO5S,KAAK+V,UAAUrE,KAlC1B,6BA0CI,OAAO1R,KAAKoW,iBAAiB3E,WA1CjC,KCAM6E,G,WACF,WAAYvX,EAAM0S,GAAS,oBACvBzR,KAAKjB,KAAOA,EACZiB,KAAKyR,OAASA,E,sDAId,IAAIA,EAAS,GACb,IAAK,IAAIC,KAAO1R,KAAKyR,OACjBA,EAAOC,GAAO1R,KAAKyR,OAAOC,GAAK1S,MAEnC,MAAO,CACHD,KAAMiB,KAAKjB,KACX0S,OAAQA,O,KAKP8E,GAAb,kDACI,aAAsC,IAA1BC,EAAyB,uDAAjB,GAAKrE,EAAY,uDAAL,GAAK,uCAC3B,eAAgB,CAClBqE,QAAS,IAAIxG,GAAO,EAAG,EAAGwG,EAAS,4BACnCrE,OAAQ,IAAInC,GAAO,EAAG,GAAKmC,EAAQ,0DAJ/C,UAA2CmE,IAS9BG,GAAb,kDACI,aAAoC,IAAxBD,EAAuB,uDAAf,GAAKrE,EAAU,uDAAH,EAAG,uCACzB,wBAAyB,CAC3BqE,QAAS,IAAIxG,GAAO,EAAG,EAAGwG,EAAS,4BACnCrE,OAAQ,IAAInC,GAAO,EAAG,IAAKmC,EAAQ,yDAJ/C,UAAmDmE,IAStCI,GAAb,WACI,WAAYC,EAAQC,EAAQpP,EAAcuB,GAAY,oBAClD/I,KAAK2W,OAASA,EACd3W,KAAK4W,OAASA,EACd5W,KAAKwH,aAAeA,EACpBxH,KAAK+I,UAAYA,EALzB,sDASQ,OAAO/I,SATf,KAaa6W,GAAb,WACI,WAAY9X,EAAMqC,GAAM,oBACpBpB,KAAKjB,KAAOA,EACZiB,KAAKoB,IAAMA,EAHnB,sDAOQ,OAAOpB,SAPf,KCrDM8W,GAAiB,CACrB,EAAK,IAAID,GAAoB,IAAK,IAClC,GAAM,IAAIA,GAAoB,KAAM,IAGzBE,GAAb,iGACWC,GAEP,IAAIC,GADJD,EAASA,EAAOE,QAAQ,IAAK,KACLxL,MAAM,KAC9B,GAA0B,IAAtBuL,EAAWvV,OACb,MAAM,IAAI6I,MAAJ,iEAJO,kBAM6C0M,EAN7C,GAMVE,EANU,KAMIC,EANJ,KAMkB5P,EANlB,KAMgCuB,EANhC,KASf,QAAkCqH,IAA9B0G,GAAe/N,GACjB,MAAM,IAAIwB,MAAJ,4CAIR,IADA/C,EAAexH,KAAKqX,kBAAkB7P,KAClB,EAClB,MAAM,IAAI+C,MAAJ,mDAIRxB,EAAY+N,GAAe/N,GAC3B,IAAI4N,EAAS3W,KAAKsX,cAAcH,GAC5BP,EAAS5W,KAAKsX,cAAcF,GAEhC,OAAO,IAAIV,GAAeC,EAAQC,EAAQpP,EAAcuB,KAxB5D,oCA2BgBwO,GAAe,IAAD,OACtBC,EAAI,IAAIC,MAAM,IAClBD,EAAEE,MAAK,EAAO,GAAI,GAElB,IAJ0B,EAItBC,EAAUJ,EAAa7L,MAAM,KAJP,cAKPiM,GALO,IAK1B,2BAA4B,CAAC,IAApBC,EAAmB,QAE1B,GAAsB,IAAlBA,EAAOlW,OACT,MAAM,IAAI6I,MAAJ,gCAGR,GAAkB,MAAdqN,EAAO,GACT,MAAM,IAAIrN,MAAJ,2CAA8CqN,EAA9C,eAGR,GAAgC,MAA5BA,EAAOA,EAAOlW,OAAO,GACvB,MAAM,IAAI6I,MAAJ,0CAA6CqN,EAA7C,eAGR,IAAIpR,EAAQoR,EAAOlM,MAAM,KAAKC,KAAI,SAAAsH,GAAC,OAAI,EAAKoE,kBAAkBpE,MAC9D,GAAqB,IAAjBzM,EAAM9E,OAAc,CACtB,IAAIuR,EAAIzM,EAAM,GACdxG,KAAK6X,cAAc5E,GAEnBuE,EAAEvE,IAAK,MACF,IAAqB,IAAjBzM,EAAM9E,OAUf,MAAM,IAAI6I,MAAJ,qCAAwCgN,EAAxC,qBAVwB,IAAD,cACV/Q,EADU,GACxBjC,EADwB,KACjB2E,EADiB,KAE7B,GAAIA,EAAM3E,EACR,MAAM,IAAIgG,MAAJ,yBAA4BhG,EAA5B,YAAqC2E,EAArC,uBAER,IAAK,IAAI+J,EAAI1O,EAAO0O,GAAK/J,EAAK+J,IAC5BjT,KAAK6X,cAAc5E,GACnBuE,EAAEvE,IAAK,IAhCa,8BAuC1B,OAAOuE,IAlEX,wCAqEoBM,GAChB,GAAIC,MAAMD,GACR,MAAM,IAAIvN,MAAJ,UAAauN,EAAb,2BAER,OAAOE,OAAOF,KAzElB,oCA6EgB7E,GACZ,GAAIA,EAAI,GAAKA,EAAI,GACf,MAAM,IAAI1I,MAAJ,0BAA6B0I,EAA7B,kCA/EZ,KCLagF,GACX,WAAY/M,EAAMgN,EAAW7T,GAAa,oBACxCrE,KAAKkL,KAAOA,EACZlL,KAAKmY,YAAcD,EACnB,IACI9T,GADS,IAAI2S,IACC5H,SAAS+I,GAC3BlY,KAAKoE,KAAOA,EACZpE,KAAKqE,WAAaA,GCNT+T,GAAb,WACE,aAAe,oBACbpY,KAAKqY,QAAU,GACfrY,KAAK8D,UAAY,IAAIC,IAErB/D,KAAKsY,UAAU,IAAIL,GAAM,WAAa,yBAA0B,IAAIxB,GAA8B,GAAK,KACvGzW,KAAKsY,UAAU,IAAIL,GAAM,MAAa,UAA0B,IAAI1B,GAAsB,IAAM,MAChGvW,KAAKsY,UAAU,IAAIL,GAAM,YAAa,mBAA0B,IAAIxB,GAA8B,IAAM,KACxGzW,KAAKsY,UAAU,IAAIL,GAAM,mBAAoB,eAAmB,IAAIxB,GAA8B,EAAK,KACvGzW,KAAKsY,UAAU,IAAIL,GAAM,mBAAoB,eAAmB,IAAIxB,GAA8B,EAAK,KACvGzW,KAAKsY,UAAU,IAAIL,GAAM,WAAa,wBAA0B,IAAI1B,GAAsB,GAAK,MAC/FvW,KAAKsY,UAAU,IAAIL,GAAM,aAAc,uBAAyB,IAAI1B,GAAsB,IAAM,KAChGvW,KAAKsY,UAAU,IAAIL,GAAM,iBAAkB,uBAAwB,IAAIxB,GAA8B,IAAM,KAC3GzW,KAAKsY,UAAU,IAAIL,GAAM,cAAe,uBAAwB,IAAIxB,GAA8B,IAAM,MACxGzW,KAAKsY,UAAU,IAAIL,GAAM,WAAa,wBAA0B,IAAIxB,GAA8B,GAAK,KACvGzW,KAAKsY,UAAU,IAAIL,GAAM,YAAa,mBAA0B,IAAIxB,GAA8B,IAAM,KACxGzW,KAAKsY,UAAU,IAAIL,GAAM,cAAe,eAAwB,IAAIxB,GAA8B,GAAK,KACvGzW,KAAKsY,UAAU,IAAIL,GAAM,UAAa,cAA0B,IAAI1B,GAAsB,MAE1FvW,KAAKuY,OAAO,GAnBhB,0DAsBgBvU,GACZhE,KAAK8D,UAAUlB,IAAIoB,KAvBvB,6BA0BSwU,GAAQ,IAAD,gBACSxY,KAAK8D,WADd,IACZ,2BAAqC,EACnCE,EADmC,SAC1BwU,IAFC,iCA1BhB,6BAoCSjJ,GACLvP,KAAKyY,cAAgBlJ,EACrB,IAAIiJ,EAAQxY,KAAK0Y,eACjB1Y,KAAKyD,OAAO+U,KAvChB,gCA0CYA,GACRxY,KAAKqY,QAAQ/M,KAAKkN,KA3CtB,qCAiCI,OAAOxY,KAAKqY,QAAQrY,KAAKyY,mBAjC7B,KCDaE,GAAb,WACE,aAAe,IAAD,2BACZ3Y,KAAKqY,QAAU,GAEfrY,KAAK8D,UAAY,IAAIC,IAErB/D,KAAK4Y,OAAS,CACZ1N,KAAM,aACN2N,MAAO,cAGT,IAAIC,EAAaC,OAAOC,UAAUC,KAAKjZ,KAAK4Y,OAAO1N,KAAM,GACzD4N,EAAWI,QAAU,SAACtV,GAAD,OAAQL,QAAQD,MAAR,UAAiB,EAAKsV,OAAO1N,KAA7B,qBAC7B4N,EAAWK,UAAY,SAACvV,GACtB,EAAKwV,GAAKN,EAAWO,OACrB,EAAKC,cAGPR,EAAWS,gBAAkB,SAAC3V,GAC5B,IACIiV,EADKjV,EAAGpD,OAAO6Y,OACJG,kBAAkB,EAAKZ,OAAOC,MAAO,CAAEY,QAAQ,KAAMC,eAAe,IACnFb,EAAMc,YAAY,OAAQ,OAAQ,CAACC,QAAQ,IAC3Cf,EAAMc,YAAY,YAAa,YAAa,CAACC,QAAQ,KAGvD5Z,KAAKyY,eAAiB,EAzB1B,0DA4BgBzU,GACZhE,KAAK8D,UAAUlB,IAAIoB,KA7BvB,6BAgCSwU,GAAQ,IAAD,gBACSxY,KAAK8D,WADd,IACZ,2BAAqC,EACnCE,EADmC,SAC1BwU,IAFC,iCAhChB,mCAsCgB,IAAD,OAEPqB,EAAM7Z,KAAK4Y,OACXC,EAAQ7Y,KAAKoZ,GAAGU,YAAYD,EAAIhB,OAAOkB,YAAYF,EAAIhB,OACvDmB,EAAgB,GACpBnB,EAAMoB,aAAad,UAAY,SAACvV,GAC9B,IAAIsW,EAAStW,EAAGpD,OAAO6Y,OACvB,GAAIa,EAAJ,CAAa,IAAD,EACkBA,EAAOlb,MAA9BkM,EADK,EACLA,KAAMgN,EADD,EACCA,UAAWzT,EADZ,EACYA,GACtB,IACE,IAAI+T,EAAQ,IAAI2B,GAAYjP,EAAMgN,EAAWzT,GAC7C,EAAK6T,UAAUE,GACf,MAAO4B,GACPJ,EAAc1O,KAAK7G,GAErByV,EAAOG,gBAIT,EAAKC,oBAAoBN,MAzD/B,0CA6DsBO,GACdA,GAAOA,EAAI7Y,OAAS,IACtB6B,QAAQiX,KAAK,yBACbjX,QAAQiX,KAAKD,IAEf,IALuB,EAKnBV,EAAM7Z,KAAK4Y,OACXC,EAAQ7Y,KAAKoZ,GAAGU,YAAY,CAACD,EAAIhB,OAAQ,aAAakB,YAAYF,EAAIhB,OANnD,cAOR0B,GAPQ,IAOvB,2BAAoB,CAAC,IAAZ9V,EAAW,QAClBoU,EAAM3U,OAAOO,IARQ,iCA7D3B,2BAyEOsI,EAAO7B,EAAMgN,GAAY,IAAD,OACvBuC,EAAWza,KAAKqY,QAAQtL,GAC5B,GAAK0N,EAAL,CAEA,IAAIvD,EAAU,IAAIiD,GAAYjP,EAAMgN,EAAWuC,EAAShW,IAEpD2U,EAAKpZ,KAAKoZ,GACVS,EAAM7Z,KAAK4Y,OAEf,GAAKQ,EAAL,CAKA,IAAI/V,EAAO,CAACoB,GAAIgW,EAAShW,GAAIyG,OAAMgN,aAC/B4B,EAAcV,EAAGU,YAAY,CAACD,EAAIhB,OAAQ,aAkB9C,OAjBYiB,EAAYC,YAAYF,EAAIhB,OAClC6B,IAAIrX,GAEI,IAAIsX,SAAQ,SAACC,EAASC,GAClCf,EAAYgB,WAAa,SAAClX,GACxB,EAAKyU,QAAQtL,GAASmK,EACtB,EAAKmB,QAAL,YAAmB,EAAKA,SACpB,EAAKI,gBAAkB1L,GACzB,EAAKtJ,OAAOyT,GAEd0D,GAAQ,IAEVd,EAAYZ,QAAU,WACpB3V,QAAQD,MAAR,kCAAyCmX,EAAzC,eAAwDvD,IACxD2D,EAAO,2BAAD,OAA4BJ,EAA5B,eAA2CvD,QApBnD3T,QAAQD,MAAR,UAAiBuW,EAAIhB,MAArB,uBAnFN,6BA6GS3N,EAAMgN,GAAY,IAAD,OAElBM,EAAQ,IAAI2B,GAAYjP,EAAMgN,GAE9BkB,EAAKpZ,KAAKoZ,GACVS,EAAM7Z,KAAK4Y,OACf,GAAKQ,EAAL,CAIA,IAAI/V,EAAO,CAAC6H,OAAMgN,aAGd6C,EAFc3B,EAAGU,YAAY,CAACD,EAAIhB,OAAQ,aACtBkB,YAAYF,EAAIhB,OACpBjW,IAAIS,GAExB,OAAO,IAAIsX,SAAQ,SAACC,EAASC,GAC3BE,EAAQ5B,UAAY,SAACvV,GACnB,IAAIa,EAAKb,EAAGpD,OAAO6Y,OACnBb,EAAM/T,GAAKA,EACX,EAAK6T,UAAUE,GACfoC,GAAQ,IAEVG,EAAQ7B,QAAU,WAChB3V,QAAQD,MAAR,+BAAsC4H,EAAtC,aAA+CgN,IAC/C2C,EAAO,wBAAD,OAAyB3P,EAAzB,aAAkCgN,QAjB1C3U,QAAQD,MAAR,UAAiBuW,EAAIhB,MAArB,sBApHN,6BA0IStJ,GAAM,IAAD,OAEV,KAAIA,EAAM,GAAKA,GAAOvP,KAAKqY,QAAQ3W,QAAnC,CAEA,IAAI+W,EAAgBzY,KAAKyY,cAIvBA,EADEzY,KAAKyY,gBAAkBlJ,EACTvP,KAAKyY,cAGZzY,KAAKyY,cAAgBlJ,EACdvP,KAAKyY,cAAc,EAGnBzY,KAAKyY,cAGvB,IAAID,EAAQxY,KAAKqY,QAAQ9I,GACrBsK,EAAM7Z,KAAK4Y,OACXkB,EAAc9Z,KAAKoZ,GAAGU,YAAY,CAACD,EAAIhB,OAAQ,aAMnD,OALYiB,EAAYC,YAAYF,EAAIhB,OAClC3U,OAAOsU,EAAM/T,IAIZ,IAAIkW,SAAQ,SAACC,EAASC,GAC3Bf,EAAYgB,WAAa,WACvB,IAAIzC,EAAU,EAAKA,QACnB,EAAKA,QAAL,sBAAmBA,EAAQ5K,MAAM,EAAG8B,IAApC,YAA6C8I,EAAQ5K,MAAM8B,EAAM,KAEjEkJ,EAAgBtX,KAAKC,IAAIqX,EAAe,GACxCA,EAAgBtX,KAAK8H,IAAIwP,EAAe,EAAKJ,QAAQ3W,OAAO,GAEhC,IAAxB,EAAK2W,QAAQ3W,SACf+W,GAAiB,GAEnB,EAAKF,OAAOE,GACZmC,GAAQ,UAhLhB,6BAyLSrL,GAEL,GADAvP,KAAKyY,cAAgBlJ,EACjBvP,KAAKyY,cAAgB,GAAKzY,KAAKyY,eAAiBzY,KAAKqY,QAAQ3W,OAC/D1B,KAAKyD,YAAO2M,OADd,CAIA,IAAIoI,EAAQxY,KAAK0Y,eACjB1Y,KAAKyD,OAAO+U,MAhMhB,gCAmMYA,GACRxY,KAAKqY,QAAL,sBAAmBrY,KAAKqY,SAAxB,CAAiCG,MApMrC,qCAsLI,OAAOxY,KAAKqY,QAAQrY,KAAKyY,mBAtL7B,KAwMM0B,G,kDACJ,WAAYjP,EAAMgN,EAAWzT,GAAK,IAAD,8BAC/B,cAAMyG,EAAMgN,IACPzT,GAAKA,EAFqB,E,UADTwT,ICvMb+C,GAAb,WACE,aAAe,IAAD,2BACZhb,KAAK8D,UAAY,IAAIC,IAErB/D,KAAKib,SAAW,CACd,QAAW,IAAI7C,GACf,KAAQ,IAAIO,IAGd3Y,KAAKkb,oBAAsB,SAE3Blb,KAAKib,SAAL,QAAyBE,eAAc,SAAC3C,GACtC,EAAK/U,OAAO+U,MAGdxY,KAAKib,SAAL,KAAsBE,eAAc,SAAC3C,QACrBpI,IAAVoI,EACF,EAAKD,OAAO,UAAW,GAEvB,EAAK9U,OAAO+U,MAnBpB,0DAwBgBxU,GACZhE,KAAK8D,UAAUlB,IAAIoB,KAzBvB,6BA4BSwU,GAAQ,IAAD,gBACSxY,KAAK8D,WADd,IACZ,2BAAqC,EACnCE,EADmC,SAC1BwU,IAFC,iCA5BhB,kCA4Cc9G,GACV,OAAO1R,KAAKib,SAASvJ,GAAK2G,UA7C9B,6BAgDS3G,EAAK3E,GACV/M,KAAKkb,oBAAsBxJ,EAC3B1R,KAAKob,iBAAiB7C,OAAOxL,KAlDjC,6BAsDS2E,EAAK3E,GAAQ,IAAD,OACjB,OAAO,IAAI4N,SAAQ,SAACC,EAASC,GACf,SAARnJ,EAIS,EAAKuJ,SAAL,KACN/W,OAAO6I,GACXsO,MAAK,SAAAzP,GAAC,OAAIgP,EAAQhP,MAAI,SAAA0P,GAAG,OAAIT,EAAOS,MALrCT,EAAO,2CAzDf,6BAkES3P,EAAMgN,GAAY,IAAD,OACtB,OAAO,IAAIyC,SAAQ,SAACC,EAASC,GAC3B,IACe,EAAKI,SAAL,KACN1a,OAAO2K,EAAMgN,GACjBmD,MAAK,SAAAzP,GAAC,OAAIgP,EAAQhP,MAAI,SAAA0P,GAAG,OAAIT,EAAOS,MACvC,MAAOlB,GACPS,EAAOU,OAAOnB,EAAGvW,gBAzEzB,2BA8EO6N,EAAK3E,EAAO7B,EAAMgN,GACrB,IAAIsD,EAASxb,KAAKib,SAASvJ,GAC3B,OAAO,IAAIiJ,SAAQ,SAACC,EAASC,GAC3B,IACgBW,EAAOC,KAAK1O,EAAO7B,EAAMgN,GAC/BmD,MAAK,SAAC1Z,GAAD,OAASiZ,EAAQjZ,MAAM,SAAC2Z,GAAD,OAAST,EAAOS,MACpD,MAAOlB,GACPS,EAAOU,OAAOnB,EAAGvW,gBArFzB,qCAoCI,OADY7D,KAAKob,iBAAiB1C,iBAnCtC,uCAyCI,OADc1Y,KAAKib,SAASjb,KAAKkb,yBAxCrC,KCDaQ,GAAb,WACI,WAAY7C,GAAQ,oBAChB7Y,KAAK6Y,MAAQA,EACb7Y,KAAKqD,KAAO,CACRsY,iBAAkB,EAClBC,WAAY,EACZC,aAAc,EACdC,YAAa,EACbC,oBAAqB,EACrBC,oBAAqB,EACrBC,UAAW,GAEfjc,KAAKkc,UAAW,EAZxB,2DAeoB,IAAD,OACPlc,KAAKkc,UAITlc,KAAK6Y,MAAMrZ,UAAS,SAACA,GACjB,EAAK0c,UAAW,EAChBC,YAAW,WACP3c,E/BgE2B,CACvCT,KAAM,eAAgBC,M+BjEiB,IAC3Bmd,YAAW,kBAAM,EAAKD,UAAW,IAAO,MACzC,QAzBf,8BA6BYxK,GAAuB,IAAlB1S,EAAiB,4DAAXoR,OACDA,IAAVpR,EACAgB,KAAKoc,YAAY1K,EAAK1S,GAEtBgB,KAAKqc,cAAc3K,KAjC/B,kCAqCgBA,EAAK1S,GACbgB,KAAKqD,KAAKqO,GAAO1S,EACjBgB,KAAKqD,KAAL,eAAgBrD,KAAKqD,MACrBrD,KAAKsc,iBAxCb,oCA2CkBjZ,GACV,IAAK,IAAIqO,KAAOrO,EAAM,CAClB,IAAIrE,EAAQqE,EAAKqO,GACjB1R,KAAKqD,KAAKqO,GAAO1S,EAErBgB,KAAKqD,KAAL,eAAgBrD,KAAKqD,MACrBrD,KAAKsc,mBAjDb,KCAaC,GAAb,WACI,aAAe,oBACXvc,KAAKqY,QAAU,GAEfrY,KAAKwc,eAAe,IAAIjG,IACxBvW,KAAKwc,eAAe,IAAI/F,IAExBzW,KAAKyY,cAAgB,EACrBzY,KAAK8D,UAAY,IAAIC,IAR7B,0DAWkBC,GACVhE,KAAK8D,UAAUlB,IAAIoB,KAZ3B,6BAeWK,GAAa,IAAD,gBACMrE,KAAK8D,WADX,IACf,2BAAqC,EACjCE,EADiC,SACxBK,IAFE,iCAfvB,qCAqBmBA,GACXrE,KAAKqY,QAAQ/M,KAAKjH,KAtB1B,wCAyBsBA,GAEd,IAF2B,IACtBtF,EAAgBsF,EAAhBtF,KAAM0S,EAAUpN,EAAVoN,OACFhQ,EAAI,EAAGA,EAAIzB,KAAKqY,QAAQ3W,OAAQD,IAAK,CAC1C,IAAIgb,EAAQzc,KAAKqY,QAAQ5W,GACzB,GAAIgb,EAAM1d,OAASA,EAAnB,CAEA,IAAK,IAAI2S,KAAOD,EACZgL,EAAMhL,OAAOC,GAAK1S,MAAQyS,EAAOC,GAAK1S,MAE1Cyd,EAAMhL,OAAN,eAAmBgL,EAAMhL,QACzBzR,KAAKyY,cAAgBhX,EACrB,OAEJzB,KAAKyD,OAAOzD,KAAK0c,sBAtCzB,qCAyCmBhL,EAAK1S,GACJgB,KAAK0c,mBAAmBjL,OAAOC,GACrC1S,MAAQA,EACdgB,KAAK0c,mBAAmBjL,OAAxB,eAAqCzR,KAAK0c,mBAAmBjL,UA5CrE,6BA+CW1E,GACH/M,KAAKyY,cAAgB1L,EACrB/M,KAAKyD,OAAOzD,KAAK0c,sBAjDzB,yCAqDQ,OAAO1c,KAAKqY,QAAQrY,KAAKyY,mBArDjC,KCFakE,GAAb,WACI,WAAY3d,GAAQ,oBAChBgB,KAAK4P,OAAS5Q,EACdgB,KAAK8D,UAAY,IAAIC,IAH7B,mDAMWC,GACH,OAAOhE,KAAK8D,UAAUlB,IAAIoB,KAPlC,+BAUaA,GACL,OAAOhE,KAAK8D,UAAUI,OAAOF,KAXrC,+BAcc,IAAD,gBACgBhE,KAAK8D,WADrB,IACL,2BAAqC,EACjCE,EADiC,SACxBhE,OAFR,iCAdb,4BAqBQ,OAAOA,KAAK4P,QArBpB,aAwBc5Q,GACNgB,KAAK4P,OAAS5Q,EACdgB,KAAKyD,aA1Bb,KCcamZ,GAAb,WACE,WAAYhY,EAAIiU,GAAQ,IAAD,2BACrB7Y,KAAK4E,GAAKA,EACV5E,KAAK6Y,MAAQA,EAEbjU,EAAGmO,OAAOnO,EAAGiY,YACbjY,EAAGmO,OAAOnO,EAAGkY,OACblY,EAAGmY,UAAUnY,EAAGoY,UAAWpY,EAAGqY,qBAE9Bjd,KAAKkd,YAAc,IAAIrN,IAAO,EAAM,4BACpC7P,KAAKmd,YAAc,IAAItN,IAAO,EAAM,oEACpC7P,KAAKod,kBAAoB,IAAItN,GAAM,CAAC,IAAI,IAAI,KAAM,qBAGlD9P,KAAKD,KAAO,IAAI4c,GAAWvc,IAAKC,WADxB,cAERL,KAAKsQ,OAAS,IAAIxQ,EAAOE,KAAKD,MAE9BC,KAAK0G,eAAiB,IAAIoP,GAAclR,EAAI5E,KAAKD,KAAMC,KAAKsQ,QAC5DtQ,KAAKqd,mBAAqB,IAAId,GAC9Bvc,KAAKsd,cAAgB,IAAItC,GACzBhb,KAAK8C,MAAQ,IAAI4Y,GAAW1b,KAAK6Y,OAEjC7Y,KAAKf,IAAM,IAAI4D,EAAoB7C,KAAKD,KAAMC,KAAK8C,OACnD9C,KAAKud,aAAe,IAAI9W,EAAmB7B,EAAI5E,KAAKD,KAAMC,KAAKf,IAAKe,KAAK0G,eAAgB1G,KAAK8C,OAC9F9C,KAAK6Q,OAAS,IAAIR,GAAOzL,EAAI5E,KAAKD,KAAMC,KAAKsQ,QAG7CtQ,KAAKqd,mBAAmBlC,eAAc,SAAC9W,GACrC,EAAKpF,IAAIue,eAAenZ,EAAWoZ,cAIrCzd,KAAKsd,cAAcnC,eAAc,SAAC3C,GAChC,IAAInU,EAAamU,EAAMnU,WACnBD,EAAOoU,EAAMpU,KACbC,GACF,EAAKgZ,mBAAmBK,kBAAkBrZ,GAExCD,IACF,EAAKnF,IAAI0e,SAASvZ,EAAKqZ,WACvB,EAAKF,aAAa5W,eAAiBvC,EAAK2E,UAAU3H,QAItDpB,KAAKD,KAAK0D,SAGVzD,KAAKsd,cAAc/E,OAAO,UAAW,GACrCvY,KAAK0G,eAAe2P,cAAc,CAACxE,UAAW,IAC9C7R,KAAK4d,YAjDT,wDAqDI,IAAIvZ,EAAarE,KAAKqd,mBAAmBX,mBACzC1c,KAAKf,IAAIue,eAAenZ,EAAWoZ,WACnCzd,KAAKf,IAAI2e,cAvDb,+BA0DW7d,GAAO,IAAD,cACMC,KAAKD,KAAKf,MADhB,GACR6e,EADQ,KACJC,EADI,KACAC,EADA,mBAEMhe,EAFN,GAERie,EAFQ,KAEJC,EAFI,KAEAC,EAFA,KAGTL,IAAOG,GAAMF,IAAOG,GAAMF,IAAOG,IACnCle,KAAKD,KAAKf,MAAQe,KA9DxB,4BAoEIoe,sBAAsBne,KAAKoe,KAAKhV,KAAKpJ,SApEzC,6BAwEIA,KAAKqe,YACLre,KAAKuJ,YACL4U,sBAAsBne,KAAKoe,KAAKhV,KAAKpJ,SA1EzC,+BA+EI,IAAI4E,EAAK5E,KAAK4E,GACV0Z,EAAS1Z,EAAG0Z,OAEZxV,EAAQwV,EAAOC,YACfC,EAASF,EAAOG,aAEhB3V,IAAUwV,EAAOxV,OAAS0V,IAAWF,EAAOE,SAGhDF,EAAOxV,MAAQA,EACfwV,EAAOE,OAASA,EAChB5Z,EAAG8Z,SAAS,EAAG,EAAG5V,EAAO0V,GACzBxe,KAAKsQ,OAAOpQ,aAAe4I,EAAM0V,KA3FrC,kCA+FIxe,KAAKsQ,OAAOtP,WA/FhB,kCAmGI,IAAI4D,EAAK5E,KAAK4E,GACd5E,KAAK2e,SAGH,IAAIxN,EAAInR,KAAKod,kBAAkBpe,MAC/B4F,EAAGga,WAAWzN,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAKA,EAAE,GAAG,IAAK,GAC5CvM,EAAGia,MAAMja,EAAGka,iBAAmBla,EAAGma,kBAGhC/e,KAAKkd,YAAYle,OACnBgB,KAAK6Q,OAAOtH,YAEVvJ,KAAKmd,YAAYne,OACnBgB,KAAKud,aAAahU,gBAhHxB,KCZayV,GAAb,WACE,WAAY1O,GAAS,IAAD,2BAClBtQ,KAAKsQ,OAASA,EACdtQ,KAAK8D,UAAY,CACfmb,YAAa,SAAArb,GAAE,OAAI,EAAKsb,cAActb,IACtCub,UAAW,SAAAvb,GAAE,OAAI,EAAKwb,YAAYxb,IAClCyb,YAAa,SAAAzb,GAAE,OAAI,EAAK0b,cAAc1b,IACtC2b,QAAS,SAAA3b,GAAE,OAAI,EAAK4b,SAAS5b,KAG/B5D,KAAKyf,UAAW,EAChBzf,KAAK0f,SAAU,EAEf1f,KAAK2f,gBAAkBC,IAAKrf,SAbhC,0DAiBgBqD,GACZ5D,KAAKyf,UAAW,EAChBzf,KAAK2f,gBAAgB,GAAK/b,EAAGic,QAC7B7f,KAAK2f,gBAAgB,GAAK/b,EAAGkc,UApBjC,kCAuBclc,GACV5D,KAAKyf,UAAW,IAxBpB,oCA2BgB7b,GACZ,GAAK5D,KAAKyf,UAAazf,KAAK2f,gBAA5B,CACA,IACII,EAAWH,IAAKvf,WAAWuD,EAAGic,QAASjc,EAAGkc,SAC1Cpd,EAAQkd,IAAKrf,SACjBqf,IAAKrd,IAAIG,EAAO1C,KAAK2f,gBAAiBI,GACtCH,IAAK3e,MAAMyB,EAAOA,EAJL,MAMb1C,KAAKsQ,OAAO9N,OAAOE,EAAM,GAAIA,EAAM,IAEnC1C,KAAK2f,gBAAkBI,KArC3B,+BAwCWnc,GACP,IAAIoc,EAAyB,KAAZpc,EAAGqc,OACpBjgB,KAAKsQ,OAAO4P,KAAKF,OA1CrB,KCAaG,GAAb,WACE,WAAY7P,GAAS,IAAD,2BAClBtQ,KAAKsQ,OAASA,EAEdtQ,KAAK8D,UAAY,CACfsc,aAAc,SAAAxc,GAAE,OAAI,EAAKyc,eAAezc,IACxC0c,YAAa,SAAA1c,GAAE,OAAI,EAAK2c,cAAc3c,IACtC4c,WAAY,SAAA5c,GAAE,OAAI,EAAK6c,aAAa7c,KAGtC5D,KAAKyf,UAAW,EAChBzf,KAAK0f,SAAU,EAEf1f,KAAK0gB,cAAgB,EACrB1gB,KAAK2gB,gBAAkBf,IAAKrf,SAC5BP,KAAK4gB,oBAAsB,EAC3B5gB,KAAK6gB,WAAa,GAhBtB,2DAmBiBjd,GAAK,IAAD,EACbkd,EAAUld,EAAGkd,QAGjB,IAFA,EAAA9gB,KAAK6gB,YAAWvV,KAAhB,oBAAwBwV,IACxB9gB,KAAK0gB,eAAiBI,EAAQpf,OACH,IAAvB1B,KAAK0gB,cAAqB,CAC5B1gB,KAAKyf,UAAW,EAChBzf,KAAK0f,SAAU,EACf,IAAIqB,EAAQ/gB,KAAK6gB,WAAW7gB,KAAK6gB,WAAWnf,OAAO,GACnD1B,KAAK2gB,gBAAkBf,IAAKvf,WAAW0gB,EAAMlB,QAASkB,EAAMjB,cACvD,GAAI9f,KAAK0gB,eAAiB,EAAG,CAClC1gB,KAAK0f,SAAU,EACf1f,KAAKyf,UAAW,EAChB,IAAIuB,EAAehhB,KAAK6gB,WAAWpT,MAAMzN,KAAK6gB,WAAWnf,OAAO,EAAG1B,KAAK6gB,WAAWnf,QACnF1B,KAAK4gB,oBAAsB5gB,KAAKihB,yBAAL,MAAAjhB,KAAA,YAAiCghB,OAhClE,mCAoCepd,GACX5D,KAAKyf,UAAW,EAChBzf,KAAK0f,SAAU,EACf1f,KAAK6gB,WAAa,GAClB7gB,KAAK0gB,cAAgB,EAGjB1gB,KAAK0gB,cAAgB,IACvB1gB,KAAK0f,SAAU,GAEb1f,KAAK0gB,cAAgB,IACvB1gB,KAAKyf,UAAW,KA/CtB,oCAmDgB7b,IACP5D,KAAKyf,UAAazf,KAAK0f,WACxB1f,KAAKyf,SACPzf,KAAKkhB,gBAAgBtd,GACZ5D,KAAK0f,SACd1f,KAAKmhB,cAAcvd,MAxDzB,sCA4DkBA,GAEd,KADcA,EAAGkd,QACLpf,OAAS,GAArB,CAEA,IAAIqf,EAAQnd,EAAGkd,QAAQ,GAEnBf,EAAWH,IAAKvf,WAAW0gB,EAAMlB,QAASkB,EAAMjB,SAChDpd,EAAQkd,IAAKrf,SACjBqf,IAAKrd,IAAIG,EAAO1C,KAAK2gB,gBAAiBZ,GACtCH,IAAK3e,MAAMyB,EAAOA,EAJL,MAMb1C,KAAKsQ,OAAO9N,OAAOE,EAAM,GAAIA,EAAM,IAEnC1C,KAAK2gB,gBAAkBZ,KAzE3B,oCA4EgBnc,GACZ,IAAIkd,EAAUld,EAAGkd,QACb5f,EAAWlB,KAAK4gB,oBACpB,GAAIE,EAAQpf,QAAU,EACpBR,EAAWlB,KAAKihB,yBAAyBH,EAAQ,GAAIA,EAAQ,QACxD,CAEL,IAAIC,EAAQD,EAAQ,GAChBM,EAAUphB,KAAK6gB,WAAW7gB,KAAK6gB,WAAWnf,OAAO,GACjD2f,EAAUrhB,KAAK6gB,WAAW7gB,KAAK6gB,WAAWnf,OAAO,GACjD4f,EAASthB,KAAKihB,yBAAyBG,EAASL,GAChDQ,EAASvhB,KAAKihB,yBAAyBI,EAASN,GAGhDO,EAASC,GACXvhB,KAAK6gB,WAAW7gB,KAAK6gB,WAAWnf,OAAO,GAAKqf,EAC5C7f,EAAWqgB,IAEXvhB,KAAK6gB,WAAW7gB,KAAK6gB,WAAWnf,OAAO,GAAKqf,EAC5C7f,EAAWogB,GAIf,IAAIrgB,EAAQC,EAAWlB,KAAK4gB,oBAC5B5gB,KAAK4gB,oBAAsB1f,EAC3BlB,KAAKsQ,OAAO4P,KAAK,EAAIjf,KArGzB,+CAwG2BugB,EAAOC,GAC9B,IAAIC,EAAY9B,IAAKvf,WAAWmhB,EAAM3B,QAAS2B,EAAM1B,SACjD6B,EAAU/B,IAAKvf,WAAWohB,EAAO5B,QAAS4B,EAAO3B,SACjDpd,EAAQkd,IAAKrf,SAGjB,OAFAqf,IAAKrd,IAAIG,EAAOgf,EAAWC,GACd/B,IAAKle,OAAOgB,OA7G7B,KCSakf,I,OAAb,kDACE,WAAYpQ,GAAQ,IAAD,8BACjB,cAAMA,IACDqQ,iBAAmB,IAAI7C,GAC5B,EAAK8C,iBAAmB,IAAI3B,GAHX,EADrB,gEAQI,IACMvb,EADO5E,KAAKwR,MAAM8M,OAAOyD,QACbC,WAAW,UAC7B,IAAKpd,EACH,MAAM,IAAI2F,MAAM,uBAElB,IACI+F,EADMtQ,KAAKiiB,WAAWrd,GACT0L,OACjBtQ,KAAK6hB,iBAAiBvR,OAASA,EAC/BtQ,KAAK8hB,iBAAiBxR,OAASA,EAC/BtQ,KAAKkiB,cAAgBliB,KAAKmiB,yBAjB9B,6CAqBIC,aAAapiB,KAAKkiB,iBArBtB,6CAwBoC,IAAD,OAAZG,EAAY,uDAAN,IACrB5d,EAAK0X,YAAW,kBAAM,EAAKmG,cAAa,KAAQD,GACpD,OAAO5d,IA1BX,sCA+BI2d,aAAapiB,KAAKkiB,eAClBliB,KAAKkiB,cAAgBliB,KAAKmiB,uBAC1BniB,KAAKsiB,cAAa,KAjCtB,mCAoCe1jB,GACX,IAAIia,EAAQ7Y,KAAKwR,MAAMqH,MACRA,EAAM0J,WAAWC,IAAI5jB,UACnBA,GAGjBia,EAAMrZ,SrC6CiB,SAAAZ,GAAO,MAAK,CACnCG,KAAM,cAAeC,MAAOJ,GqC9Cb6jB,CAAY7jB,MA1C/B,iCA6CagG,GACT,IAAIiU,EAAQ7Y,KAAKwR,MAAMqH,MACnBtZ,EAAMsZ,EAAM0J,WAAWhjB,IAC3B,GAAIA,EACF,OAAOA,EAIT,IAAImjB,ECxDD,SAAwBnjB,GAC3B,ICT+B8d,ECALsF,ECACjc,ECAD4W,ECAFsF,ELkBxB,OATeC,YAAgB,CAC7BtjB,KKVsBqjB,ELULrjB,EKTH,WAA2B,IAA1BA,EAAyB,uDAArBqjB,EAAU9jB,EAAW,uCACtC,OAAQA,EAAOC,MACX,IAAK,OAAQQ,EAAIN,IAAI6jB,OAAQ,MAC7B,IAAK,OAAQvjB,EAAIN,IAAIqF,OAAQ,MAC7B,IAAK,QAAS/E,EAAIN,IAAIsF,QAAS,MAC/B,IAAK,SAAUhF,EAAIN,IAAI8jB,SAAU,MACjC,IAAK,QAASxjB,EAAIN,IAAI4f,QAAS,MAC/B,IAAK,YAAatf,EAAIqe,YAAa,MACnC,IAAK,eACDre,EAAI0D,SAASnE,EAAOE,OACpB,MACJ,IAAK,kBACDO,EAAI2d,YAAYle,MAAQF,EAAOE,MAC/B,MACJ,IAAK,kBACDO,EAAI4d,YAAYne,MAAQF,EAAOE,MAC/B,MACJ,IAAK,4BACDO,EAAI6d,kBAAkBpe,MAAQF,EAAOE,MACrC,MACJ,IAAK,wBACDO,EAAIsR,OAAON,OAAOvR,MAAQF,EAAOE,MAMzC,OAAOO,ILjBT+d,eIXwBA,EJWK/d,EAAI+d,cIVnB,WAAoC,IAAnC0F,EAAkC,uDAA1B1F,EAAexe,EAAW,uCAC/C,OAAQA,EAAOC,MACX,IAAK,gBACD,OAAOikB,EACX,IAAK,eACA,IAAD,EACuBlkB,EAAOE,MAArB0S,EADT,EACSA,IAAK3E,EADd,EACcA,MACViW,EAAQzK,OAAO7G,EAAK3E,GAOhC,OAAOiW,IJHTtc,gBGZyBA,EHYMnH,EAAImH,eGXrB,WAAqC,IAApCuc,EAAmC,uDAA3Bvc,EAAgB5H,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,yBACDkkB,EAAQC,gBAAgBpkB,EAAOE,OAC/B,MACJ,IAAK,uBACDikB,EAAQ5M,cAAcvX,EAAOE,OAMrC,OAAOikB,IHATngB,OEbwB6f,EFaHpjB,EAAIuD,MEZX,WAA+B,IAA9BA,EAA6B,uDAAvB6f,EAAY7jB,EAAW,uCAC1C,OAAQA,EAAOC,MACX,IAAK,eACD,OAAOD,EAAOE,MAKtB,OAAO8D,IFKTuB,YCd6BgZ,EDcE9d,EAAI8d,mBCbrB,WAAyC,IAAxC4F,EAAuC,uDAA/B5F,EAAoBve,EAAW,uCACpD,OAAQA,EAAOC,MACX,IAAK,oBACDkkB,EAAQ1K,OAAOzZ,EAAOE,OACtB,MACJ,IAAK,oBACDikB,EAAQE,eAAerkB,EAAOoM,KAAMpM,EAAOE,OAKnD,OAAOikB,IDGTT,IAAKhkB,MDiDO4kB,CADd7jB,EAAM,IAAIqd,GAAIhY,EAAIiU,IAIlB,OAFAA,EAAMwK,eAAeX,GACrBnjB,EAAI+jB,MACG/jB,IAxDX,+BA+DI,IAJQ,IAAD,OACDyE,EAAW,SAAAJ,GAAE,OAAI,EAAK0b,iBAExBxb,EAAY,GAChB,MAFc,CAAC,cAAe,cAAe,YAAa,cAAe,eAAgB,cAEzF,eAAwB,CACtBA,EADW,MACOE,EAGpB,OACE,uCAAKpE,UAAU,eAAkBkE,GAC/B,0CACElE,UAAU,cAAc2jB,IAAKvjB,KAAKwR,MAAM8M,QACpCte,KAAK6hB,iBAAiB/d,UAAe9D,KAAK8hB,iBAAiBhe,iBAvEzE,GAA4B0f,IAAMC,YON3B,SAASC,KACd,IAAMlkB,EAAWC,cACXd,EAAaU,aAAY,SAAAC,GAAK,OAAIA,EAAMkjB,IAAI7jB,cAE5CglB,EAAQhlB,EAA4B,sBAAf,aAsB3B,OACE,4BAAQiB,UAAS,oBAAuBC,QAN1B,YAfhB,SAAwB+jB,GACtB,IAAMC,EAAIC,SAASC,gBACbC,EAAIF,SACJG,EAAqBJ,EAAEK,mBAAqBL,EAAEM,sBAAwBN,EAAEO,yBAA2BP,EAAEQ,oBACrGC,EAAoBN,EAAEO,gBAAkBP,EAAEQ,qBAAuBR,EAAES,wBAA0BT,EAAEU,iBACxEV,EAAEW,wBAA6CvU,IAAxB4T,EAAEW,mBAAoCX,EAAEY,eAAiBZ,EAAEa,oBAK7GP,EAAkBlb,KAAK4a,EAAvBM,GACA9kB,EAASslB,GAAkB,MAJ3Bb,EAAmB7a,KAAKya,EAAxBI,GACAzkB,EAASslB,GAAkB,KAS7B5lB,KAKE,uBAAGU,UAAS,iBAAY+jB,EAAZ,a,OC1BX,SAASoB,GAAevT,GAC7B,IAAMqH,EAAQmM,cACRzlB,EAAMF,aAAY,SAAAwZ,GAAK,OAAIA,EAAMtZ,OACjCZ,EAAaU,aAAY,SAAAwZ,GAAK,OAAIA,EAAM2J,IAAI7jB,cAC5CC,EAAUS,aAAY,SAAAwZ,GAAK,OAAIA,EAAM2J,IAAI5jB,WACzCwe,EAAoB/d,aAAY,SAAAwZ,GAAK,OAAIA,EAAMtZ,KAAOsZ,EAAMtZ,IAAI6d,kBAAkBpe,SAEpFimB,EAAkBtmB,IAAeC,EAAW,OAAS,GAPrB,MA2CpBwe,GAAqB,CAAC,IAAK,IAAK,KA3CZ,mBA2C7BvV,EA3C6B,KA2C3BC,EA3C2B,KA2CzBC,EA3CyB,KA4C9Bmd,EAAG,cAAUrd,EAAV,YAAeC,EAAf,YAAoBC,EAApB,KAET,OACE,yBAAKnI,UAAU,6BAA6BulB,MAAO,CAACtU,OAAO,aAAD,OAAeqU,KACvE,kBAAC,GAAD,CAAQrM,MAAOA,EAAOyF,OAAQ9M,EAAM8M,SACnC/e,EAtCD,yBAAKK,UAAWqlB,EAAgBE,MAAO,CAACC,OAAO,EAAGC,SAAS,WAAYzW,OAAO,SAAU0W,UAAU,WAChG,6BACE,kBAACnmB,EAAD,QAoC6B,8BA5BjC,yBAAKS,UAAWqlB,EAAgBE,MAAO,CAACC,OAAO,EAAGC,SAAS,WAAY1W,IAAI,SAAUH,MAAM,WACzF,kBAACkV,GAAD,OAOF,yBAAK9jB,UAAWqlB,EAAgBE,MAAO,CAACC,OAAO,EAAGC,SAAS,WAAY1W,IAAI,SAAUJ,KAAK,WACxF,uBAAG3O,UAAU,iCACX2lB,KAAK,qDACL/kB,OAAO,SACPglB,IAAI,sBACJC,cAAY,UACZC,iBAAe,OACfC,MAAM,qBACN,uBAAG/lB,UAAU,qB,MCzChB,SAASgmB,GAAYpU,GAAQ,IAAD,EACRqU,mBAASrU,EAAMtG,MAAQ,IADf,mBAC1BA,EAD0B,KACpB4a,EADoB,OAEED,mBAASrU,EAAM0G,WAAa,IAF9B,mBAE1BA,EAF0B,KAEf6N,EAFe,OAGMF,oBAAS,GAHf,mBAG5BG,EAH4B,KAGdC,EAHc,KAI3BC,EAAW1U,EAAM0U,SACjBC,EAAS3U,EAAM2U,OACfC,EAAS5U,EAAM4U,OAQrB,SAASC,EAAUziB,GACbA,GAAIA,EAAG0iB,iBACXJ,GAAYA,EAAShb,EAAMgN,GAgB7B,IAAMqO,EAAUH,EAAS,aAAe,GAUlCI,EACJ,0BAAMN,SAAUG,EAAWI,UAnC7B,SAAqB7iB,GACD,KAAfA,EAAG8iB,SACJL,EAAUziB,IAiCuChE,UAAU,QAC3D,yBAAKA,UAAU,4BACb,2BAAOA,UAAU,gCAAjB,SACA,yBAAKA,UAAU,eACb,2BAAOb,KAAK,OAAOa,UAAU,0CAA0CZ,MAAOkM,EAAMyb,SAAU,SAAA/iB,GAAE,OAAIkiB,EAASliB,EAAGpD,OAAOxB,YAG3H,yBAAKY,UAAU,4BACb,yBAAKA,UAAU,gCACf,2BAAOA,UAAU,QAAjB,SACA,0BAAMA,UAAU,GAAG6lB,cAAY,UAAUC,iBAAe,OAAOkB,aAAW,EAAMjB,MAlBpF,iWAmBM,uBAAG/lB,UAAU,6BAIf,yBAAKA,UAAU,eACb,2BAAOb,KAAK,OAAOa,UAAS,kDAA6C2mB,GAAW9hB,GAAG,YAAYzF,MAAOkZ,EAAWyO,SAAU,SAAA/iB,GAAE,OAAImiB,EAAcniB,EAAGpD,OAAOxB,UAC5JonB,GArCT,SAAuBS,GACrB,IAAIC,EAAQvL,OAAOsL,GAAKnb,MAAM,MAC9B,OACE,yBAAK9L,UAAU,oBACZknB,EAAMnb,KAAI,SAACob,EAAMtlB,GAAP,OAAa,yBAAKiQ,IAAKjQ,GAAIslB,OAiCzBC,CAAcZ,MAM3Ba,EACJ,yBACErnB,UAAS,mBAAcomB,GAAgB,QACvCkB,YAAa,kBAAMjB,GAAiB,KACpC,4BAAQrmB,UAAU,oCAAqCC,QAnD3D,WACEsmB,GAAUA,MAkDiE,uBAAGvmB,UAAU,gBACtF,4BAAQA,UAAU,oCAAqCC,QAASwmB,GAAW,uBAAGzmB,UAAU,0BAI5F,OACE,yBACEunB,aAAc,kBAAMlB,GAAiB,IACrCmB,aAAc,kBAAMnB,GAAiB,KACpCO,EACAS,GC1EA,SAASI,GAAU7V,GACxB,IAAIhS,EAAWC,cADgB,EAEQomB,oBAAS,GAFjB,mBAE1BG,EAF0B,KAEZC,EAFY,OAGQJ,oBAAS,GAHjB,mBAG1ByB,EAH0B,KAGZC,EAHY,KAKxBvE,EAAkBxR,EAAlBwR,QAASjW,EAASyE,EAATzE,MACT7B,EAAmBsG,EAAnBtG,KAAMgN,EAAa1G,EAAb0G,UACPsP,EAAWhW,EAAMgW,SAPQ,EAQLhW,EAAMyV,QAAzBQ,EARwB,EAQxBA,IAAKC,EARmB,EAQnBA,KAAMjM,EARa,EAQbA,KACZkM,EAASnW,EAAMmW,OAQfC,EAAY,SAAAhkB,GAChBpE,E/CmCwB,SAACwjB,EAASjW,GAAV,OAAoB,SAACvN,EAAU+iB,GACnCA,IAAWjF,cACjBpZ,OAAO8e,EAASjW,GACzBsO,MAAK,WACF7b,EAlC0B,CAClCT,KAAM,sB+CNG8oB,CAAa7E,EAASjW,IAC/BnJ,EAAG0iB,kBAGCwB,EAAU,SAAAlkB,GACdmkB,UAAUC,YAAYC,MAAM,CAAC/c,KAAM,oBAAoBmQ,MAAK,SAAA6M,GACxC,YAAdA,EAAI5oB,OAAqC,WAAd4oB,EAAI5oB,OACjCyoB,UAAUI,UAAUC,UAAUlQ,GAC3BmD,MAAK,kBAAMkM,GAAiB,SAGnC3jB,EAAG0iB,kBAGC+B,EAAU,SAAAzkB,GACdA,EAAG0iB,iBACHqB,GAAUA,KASNW,EAAqB,kBACzB,yBAAK1oB,UAAU,YACb,4BAAQA,UAAU,kCACdC,QAASioB,EAASV,aAAc,kBAAMG,GAAiB,KACzD,0BAAM3nB,UAAU,sBACd,uBAAGA,UAAU,kBAVnB,yBAAKA,UAAS,4BAAuB0nB,EAAe,OAAS,QAAUiB,KAAK,WAC1E,yBAAK3oB,UAAU,iBAAf,UAAuCsL,EAAvC,QAyBJ,OACE,wBAAItL,UAAS,0BAAqB4nB,EAAW,SAAW,KACtD,yBACEL,aAAc,kBAAMlB,GAAiB,IACrCmB,aAAc,kBAAMnB,GAAiB,KACrC,yBAAKpmB,QAzDO,SAAA+D,GAChBpE,E/CcwB,SAACwjB,EAASjW,GAAV,MAAqB,CAC7ChO,KAAM,eAAgBC,MAAO,CAAC0S,IAAKsR,EAASjW,U+CfnCyb,CAAaxF,EAASjW,IAC/BnJ,EAAG0iB,mBAwDG,sCAAYpb,GACZ,sCAAYgN,IAdlB,yBAAKtY,UAAS,mBAAcomB,GAAgB,QAAUkB,YAAa,kBAAMjB,GAAiB,KACvFyB,GAAQY,IACRb,GAAO,4BAAQ7nB,UAAU,mCAAoCC,QAAS+nB,GAAW,uBAAGhoB,UAAU,kBAC9F6b,GAAQ,4BAAQ7b,UAAU,oCAAqCC,QAASwoB,GAAS,uBAAGzoB,UAAU,oBC1D9F,SAASqY,GAAMzG,GACpB,IAAMhS,EAAWC,cAEX+Y,EAAQhH,EAAMgH,MACZwK,EAAmBxR,EAAnBwR,QAASjW,EAAUyE,EAAVzE,MAJU,EAOE8Y,oBAAS,GAPX,mBAOtB4C,EAPsB,KAObC,EAPa,OAQA7C,wBAASzV,GART,mBAQtBgW,EARsB,KAQduC,EARc,OAUJ9C,mBAASrN,EAAMtN,MAVX,mBAUtBA,EAVsB,KAUhB4a,EAVgB,OAWMD,mBAASrN,EAAML,aAXrB,mBAWtBD,EAXsB,KAWX6N,EAXW,KAarBM,EAAY,SAACnb,EAAMgN,GACvB1Y,EhD0BsB,SAACwjB,EAASjW,EAAO7B,EAAMgN,EAAW0Q,GAAlC,OAA+C,SAACppB,EAAU+iB,GAC5DA,IAAWjF,cACjB7B,KAAKuH,EAASjW,EAAO7B,EAAMgN,GACpCmD,MAAK,WACFuN,GAAS,GACTppB,EAxB0B,CAClCT,KAAM,qBAwBC,SAACuc,GACAsN,EAAStN,OgDjCRuN,CAAW7F,EAASjW,EAAO7B,EAAMgN,GAAW,SAAAoD,GACnDqN,EAAWrN,GACLoN,IAANpN,GACKA,IACHwK,EAAS5a,GACT6a,EAAc7N,SAKd4Q,EAAU,WACdJ,GAAY,GACZC,GAAW,IAkBb,OAAOF,EAdL,wBAAI7oB,UAAU,mBACZ,kBAACgmB,GAAD,CAAa1a,KAAMA,EAAMgN,UAAWA,EAAWgO,SAAUG,EAAWF,OAAQ2C,EAAS1C,OAAQA,KAK/F,kBAACiB,GAAD,CACErE,QAASA,EAASjW,MAAOA,EACzB7B,KAAMA,EAAMgN,UAAWA,EACvB+O,QAASzV,EAAMyV,QACfO,SAAUhW,EAAMgW,SAChBG,OAAQ,kBAAMe,GAAY,MC9CzB,SAASK,KACd,IAAIvpB,EAAWC,cADW,EAEGomB,oBAAS,GAFZ,mBAErB4C,EAFqB,KAEZC,EAFY,OAGC7C,oBAAS,GAHV,mBAGrBO,EAHqB,KAGbuC,EAHa,KAepBtC,EAAY,SAACnb,EAAMgN,GACvB1Y,EjDkBwB,SAAC0L,EAAMgN,EAAW0Q,GAAlB,OAA+B,SAACppB,EAAU+iB,GAC9CA,IAAWjF,cACjB/c,OAAO2K,EAAMgN,GACtBmD,MAAK,WACFuN,GAAS,GACTppB,EAb0B,CAClCT,KAAM,qBAaC,SAACuc,GACAsN,EAAStN,OiDzBR0N,CAAa9d,EAAMgN,GAAW,SAAAoD,GACrCqN,EAAWrN,GACLoN,IAANpN,QAIEwN,EAAU,WACdJ,GAAY,GACZC,GAAW,IASb,OAAOF,EALL,wBAAI7oB,UAAU,mBACZ,kBAACgmB,GAAD,CAAaQ,OAAQA,EAAQF,SAAUG,EAAWF,OAAQ2C,KAvB5D,wBAAIlpB,UAAU,kBAAkBulB,MAAO,CAAC8D,UAAU,WAChD,4BAAQrpB,UAAU,6CAA6CC,QAAS,kBAAM6oB,GAAY,KACxF,0BAAM9oB,UAAU,2BACd,uBAAGA,UAAU,mBCThB,SAASob,KACd,IAAMkO,EAAuB7pB,aAAY,SAAAC,GAAK,OAAIA,EAAMge,cAAcpC,uBAChEiO,EAAiB9pB,aAAY,SAAAC,GAAK,OAAIA,EAAMge,cAAclC,iBAAiB3C,iBAFpD,EAIQoN,mBAASqD,GAJjB,mBAIxBE,EAJwB,KAIXC,EAJW,KAMvBpO,EAAW5b,aAAY,SAAAC,GAAK,OAAIA,EAAMge,cAAcrC,YACpD5C,EAAUhZ,aAAY,SAAAC,GAAK,OAAIA,EAAMge,cAAcgM,YAAYF,MAEjEG,EAA2B,SAAhBH,EAEXI,EAAe,GACnB,IAAK,IAAI9X,KAAOuJ,EACduO,EAAale,KAAKoG,GAgBpB,IAAM+X,EACJ,yBAAK7pB,UAAU,6BACb,yBAAKA,UAAU,uBACZ4pB,EAAa7d,KAAI,SAACkY,EAAGpiB,GACpB,IAAI+lB,EAAW3D,IAAMuF,EACrB,OACE,4BACExpB,UAAS,qBAAgB4nB,EAAW,cAAgB,yBACpD9V,IAAKjQ,EAAG5B,QAAS,kBAAMwpB,EAAgBxF,KAAKA,QAOxD,OACE,yBAAKjkB,UAAU,oBACb,yBAAKA,UAAU,+EACb,wBAAIA,UAAU,qCAAd,SACC6pB,GAEH,yBAAK7pB,UAAU,gBAAgB6E,GAAG,wBAChC,wBAAI7E,UAAU,cAlCXyY,EAAQ1M,KAAI,SAACkY,EAAGpiB,GACrB,IAAI+P,EAAQ,CACVgH,MAAOqL,EACPb,QAASoG,EAAarc,MAAOtL,EAC7BwlB,QAAS,CAACQ,IAAK8B,EAAS7B,MAAM,EAAMjM,KAAM8N,GAC1C/B,SAAU/lB,IAAM0nB,GAAkBC,IAAgBF,GAEhDnc,OAAiBqD,IAATyT,EAAEpf,GAAmBhD,EAAIoiB,EAAEpf,GACvC,OAAO,kBAAC,GAAD,iBAAW+M,EAAX,CAAkBE,IAAG,UAAK0X,EAAL,YAAoBrc,UA6B7Cwc,GAAW,kBAACR,GAAD,Q,OCzDb,SAASW,GAAKlY,GACnB,OACE,0BAAM5R,UAAU,YAAY6lB,cAAY,UAAUC,iBAAe,OAAOkB,aAAW,EAAMjB,MAAOnU,EAAMmY,MACpG,uBAAG/pB,UAAU,4B,qBCDZ,SAASgqB,GAAT,GAA6C,IAAvB7Z,EAAsB,EAAtBA,MAAO8Z,EAAe,EAAfA,aAAe,EACVhE,oBAAS,GADC,mBAC1CiE,EAD0C,KAC7BC,EAD6B,KAE3CC,EAAO,CAACniB,EAAGkI,EAAM,GAAIjI,EAAGiI,EAAM,GAAIhI,EAAGgI,EAAM,GAAIka,EAAE,GAUrD,OACI,6BACI,yBAAKrqB,UAAU,SAASC,QAVf,kBAAMkqB,GAAiBD,KAW5B,yBAAKlqB,UAAU,gBAAgBulB,MAAO,CAAC+E,WAAW,QAAD,OAAUF,EAAKniB,EAAf,aAAqBmiB,EAAKliB,EAA1B,aAAgCkiB,EAAKjiB,EAArC,aAA2CiiB,EAAKC,EAAhD,SAEpDH,GACD,yBAAKlqB,UAAU,WACX,yBAAKA,UAAU,QAAQC,QATlB,kBAAMkqB,GAAgB,MAU3B,kBAAC,gBAAD,CAAcha,MAAOia,EAAMrD,SAfrB,SAAApW,GACd,IAAI2U,EAAM3U,EAAO2U,IACjB2E,EAAa,CAAC3E,EAAIrd,EAAGqd,EAAIpd,EAAGod,EAAInd,KAawBoiB,cAAc,MCrBvE,SAASC,GAAsBC,EAAY3Y,EAAKxG,EAAM2e,GAE3D,OADWQ,EAAWtrB,MAEpB,IAAK,SACH,OAYN,SAAoBurB,EAAQ5Y,EAAKxG,EAAM2e,GACrC,IAAI/G,GAAQwH,EAAOlpB,IAAIkpB,EAAOrhB,KAAK,IAUpC,OACC,yBAAKrJ,UAAU,YAAY8R,IAAKA,GAI9B,yBAAK9R,UAAU,YAAYsL,EAA3B,KAAmCof,EAAOtrB,MAAMurB,QAAQ,IACxD,yBAAK3qB,UAAU,iBACb,2BACEA,UAAU,6BAA6Bb,KAAK,QAC5CkK,IAAKqhB,EAAOrhB,IAAK7H,IAAKkpB,EAAOlpB,IAAKpC,MAAOsrB,EAAOtrB,MAAO8jB,KAAMA,EAC7D6D,SAAU,SAAA/iB,GAAE,OAAIimB,EAAa7R,OAAOpU,EAAGpD,OAAOxB,YAEjDsrB,EAAO3a,MAAQ,yBAAK/P,UAAU,uBAAsB,kBAAC,GAAD,CAAM+pB,KAAMW,EAAO3a,SAnC/D6a,CAAWH,EAAY3Y,EAAKxG,EAAM2e,GAC3C,IAAK,SACH,OAsCN,SAAoB9G,EAAQrR,EAAKxG,EAAM2e,GACrC,OACE,yBAAKjqB,UAAU,YAAY8R,IAAKA,GAC9B,yBAAK9R,UAAU,YACb,2BAAOA,UAAU,oBAAoBsL,IAEvC,yBAAKtL,UAAU,UACX,2BACEb,KAAK,WAAWa,UAAU,wBAC1B6qB,QAAS1H,EAAO/jB,MAChB2nB,SAAU,SAAA/iB,GAAE,OAAIimB,EAAajmB,EAAGpD,OAAOiqB,aAE5C1H,EAAOpT,MAAQ,yBAAK/P,UAAU,uBAAsB,kBAAC,GAAD,CAAM+pB,KAAM5G,EAAOpT,SAlDjE+a,CAAWL,EAAY3Y,EAAKxG,EAAM2e,GAC3C,IAAK,WACH,OAqDN,SAAsBc,EAAUjZ,EAAKxG,EAAM2e,GAEzC,OACE,yBAAKjqB,UAAU,YAAY8R,IAAKA,GAC9B,yBAAK9R,UAAU,YAAW,+BAAQsL,EAAR,MAC1B,yBAAKtL,UAAU,UACb,4BAAQA,UAAU,iCAAiCZ,MAAO2rB,EAAS3rB,MAAO2nB,SALjE,SAAA/iB,GAAE,OAAIimB,EAAa7R,OAAOpU,EAAGpD,OAAOxB,UAM1C2rB,EAASxa,QAAQxE,KAAI,SAACif,EAAQnpB,GAAT,OACpB,4BAAQzC,MAAOyC,EAAGiQ,IAAG,UAAKxG,EAAL,YAAawG,EAAb,YAAoBjQ,IAAMmpB,QAIpDD,EAAShb,MAAQ,yBAAK/P,UAAU,uBAAsB,kBAAC,GAAD,CAAM+pB,KAAMgB,EAAShb,SAjErEkb,CAAaR,EAAY3Y,EAAKxG,EAAM2e,GAC7C,IAAK,QACH,OAoEN,SAAmB9Z,EAAO2B,EAAKxG,EAAM4f,GACnC,OACE,yBAAKlrB,UAAU,YAAY8R,IAAKA,GAC9B,yBAAK9R,UAAU,YAAW,+BAAQsL,IAClC,yBAAKtL,UAAU,UACX,kBAAC,GAAD,CAAamQ,MAAOA,EAAM/Q,MAAO6qB,aAAciB,KAElD/a,EAAMJ,MAAQ,yBAAK/P,UAAU,uBAAsB,kBAAC,GAAD,CAAM+pB,KAAM5Z,EAAMJ,SA3E/Dob,CAAUV,EAAY3Y,EAAKxG,EAAM2e,GAC1C,QACE,QCTC,SAASmB,KACd,IAAMxrB,EAAWC,cACXwrB,EAAkB5rB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI2d,eACjDgO,EAAkB7rB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI4d,eACjDC,EAAoB/d,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI6d,qBACnD+N,EAAgB9rB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIsR,OAAON,UAEpDlR,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI2d,YAAYle,SAKnD,OAJIK,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI4d,YAAYne,SAC3CK,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI6d,kBAAkBpe,SACjDK,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIsR,OAAON,OAAOvR,SAG/C,6BACGorB,GAAsBa,EAAiB,EAAG,eAAe,SAAAjsB,GACxDQ,EtDjBkC,CACtCT,KAAM,kBAAmBC,MsDgBAA,OAEtBorB,GAAsBe,EAAe,EAAG,iBAAiB,SAAAnsB,GACxDQ,EtDZoC,CACxCT,KAAM,wBAAyBC,MsDWAA,OAE5BorB,GAAsBc,EAAiB,EAAG,eAAe,SAAAlsB,GACxDQ,EtD3BiC,CACrCT,KAAM,kBAAmBC,MsD0BAA,OAEtBorB,GAAsBhN,EAAmB,EAAG,qBAAqB,SAAApe,GAChEQ,EtDtBwC,CAC5CT,KAAM,4BAA6BC,MsDqBAA,QCzBhC,SAASosB,KACd,IAAM5rB,EAAWC,cACX0W,EAAgB9W,aAAY,SAAAC,GAAK,OAAIA,EAAMoH,eAAeyP,iBAG1DkV,GAFIhsB,aAAY,SAAAC,GAAK,OAAIA,EAAMoH,eAAeyP,cAAcnX,SAGhE,6BACE,6BACGorB,GAAsBjU,EAAe,EAAG,YAAY,SAAAnX,GACnDQ,EvDiE+B,CACrCT,KAAM,yBAA0BC,MuDlEDA,QAG7B,kBAACgsB,GAAD,MACA,6BACA,kBAACM,GAAD,QAIJ,OACE,yBAAK1rB,UAAU,oBACb,uBAAG2lB,KAAK,wBAAwB3lB,UAAU,sBAAsB6lB,cAAY,WAAW8C,KAAK,SAASgD,gBAAc,OAAOC,gBAAc,wBACtI,wBAAI5rB,UAAU,qCAAd,aAEF,yBAAKA,UAAU,gBAAgB6E,GAAG,wBAChC,yBAAK7E,UAAU,aACZyrB,KAOX,SAASC,KACP,IAAM9rB,EAAWC,cACXgS,EAASpS,aAAY,SAAAC,GAAK,OAAIA,EAAMoH,eAAe+K,UACnD0E,EAAgB9W,aAAY,SAAAC,GAAK,OAAIA,EAAMoH,eAAeyP,cAAcnX,SAE9E,OACE,6BACGuW,OAAO8C,QAAQ5G,GAAQ9F,KAAI,WAAgBoB,GAAW,IAAD,mBAAxB7B,EAAwB,KACpD,OAAOkf,GAD6C,KACxB,UAAWjU,EAAX,YAA4BpJ,GAAS7B,GAAM,SAAAlM,GACrE,IAAIqE,EAAO,GACXA,EAAK6H,GAAQlM,EACbQ,EvDmC0B,SAAAiS,GAAM,MAAK,CAC3C1S,KAAM,uBAAwBC,MAAOyS,GuDpCtBga,CAAqBpoB,WC5CjC,SAASqoB,KACd,IAAMlsB,EAAWC,cACXksB,EAAWtsB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAIQ,KAAKf,SAFzB,EAGX6mB,mBAAS8F,EAAS,IAHP,mBAGvB3kB,EAHuB,KAGpB4kB,EAHoB,OAIX/F,mBAAS8F,EAAS,IAJP,mBAIvB1kB,EAJuB,KAIpB4kB,EAJoB,OAKXhG,mBAAS8F,EAAS,IALP,mBAKvBzkB,EALuB,KAKpB4kB,EALoB,KAU5B,SAAS7b,EAAMtO,GACb,IAAIoqB,EAAU/T,OAAOrW,GAGrB,OAFAoqB,EAAU5qB,KAAKC,IAAI2qB,EAJJ,GAKfA,EAAU5qB,KAAK8H,IAAI8iB,EANJ,KAsBjB,IAAMC,EACJ,0BAAM9F,SAAU,SAAC/iB,GAAD,OAblB,SAAwBA,GACtB,IAAIgQ,EAAIlD,EAAMjJ,GACVoM,EAAInD,EAAMhJ,GACVoM,EAAIpD,EAAM/I,GACd0kB,EAAMzY,GACN0Y,EAAMzY,GACN0Y,EAAMzY,GACN,IAAItT,EAAOK,IAAKC,WAAW8S,EAAGC,EAAGC,GACjC7T,ExDboB,SAAAO,GAAI,MAAK,CAC7BhB,KAAM,eAAgBC,MAAOe,GwDYpBkD,CAASlD,IAClBoD,EAAMmjB,iBAIqBxlB,CAAeqC,KACxC,yBAAKvD,UAAU,oBACb,2BAAOb,KAAK,SAASC,MAAOgI,EAAG5F,IAzBpB,IAyBmC6H,IAxBnC,EAwBkD0d,SAAU,SAAA/iB,GAAE,OAAIgoB,EAAMhoB,EAAGpD,OAAOxB,UAC7F,2BAAOD,KAAK,SAASC,MAAOiI,EAAG7F,IA1BpB,IA0BmC6H,IAzBnC,EAyBkD0d,SAAU,SAAA/iB,GAAE,OAAIioB,EAAMjoB,EAAGpD,OAAOxB,UAC7F,2BAAOD,KAAK,SAASC,MAAOkI,EAAG9F,IA3BpB,IA2BmC6H,IA1BnC,EA0BkD0d,SAAU,SAAA/iB,GAAE,OAAIkoB,EAAMloB,EAAGpD,OAAOxB,UAC7F,yBAAKY,UAAU,sBACb,4BAAQb,KAAK,SAASa,UAAU,0BAAhC,YAMR,OACE,yBAAKA,UAAU,oBACb,uBAAG2lB,KAAK,uBAAuB3lB,UAAU,sBAAsB6lB,cAAY,WAAW8F,gBAAc,OAAOC,gBAAc,uBACvH,wBAAI5rB,UAAU,qCAAd,kBAEF,yBAAKA,UAAU,gBAAgB6E,GAAG,uBAChC,yBAAK7E,UAAU,aACZosB,KCnDJ,SAAStQ,KACd,IAAMC,EAAmBtc,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAKsY,oBACzDE,EAAexc,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAKwY,gBACrDD,EAAavc,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAKuY,cACnDE,EAAczc,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAKyY,eACpDC,EAAsB1c,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAK0Y,uBAC5DC,EAAsB3c,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAK2Y,uBAC5DC,EAAY5c,aAAY,SAAAC,GAAK,OAAIA,EAAMwD,MAAMO,KAAK4Y,aAEpDgQ,EAAW,EACXpQ,EAAe,IACjBoQ,EAAWtQ,EAAiBE,EAAe,KAG7C,IAAM/Y,EACJ,6BACE,yBAAKlD,UAAU,OACb,yBAAKA,UAAU,OACb,6CAAmBkc,GACnB,iDAAuBF,EAAW2O,QAAQ,IAC1C,gDAAsBtO,EAAUsO,QAAQ,KAE1C,yBAAK3qB,UAAU,OACb,iDAAuBmc,EAAoBwO,QAAQ,IACnD,iDAAuBvO,EAAoBuO,QAAQ,MAGvD,yBAAK3qB,UAAU,OACb,yBAAKA,UAAU,OAAf,aAAgC+b,EAAhC,IAAmDE,EAAnD,KAAmEoQ,EAAS1B,QAAQ,GAApF,QAKN,OACE,yBAAK3qB,UAAU,eACb,uBAAG2lB,KAAK,qBAAqB3lB,UAAU,sBAAsB6lB,cAAY,WAAW8C,KAAK,SAASgD,gBAAc,OAAOC,gBAAc,qBACnI,wBAAI5rB,UAAU,qCAAd,eAEF,yBAAKA,UAAU,gBAAgB6E,GAAG,qBAChC,yBAAK7E,UAAU,aACZkD,KCrCJ,SAASopB,KACd,IAAM1sB,EAAWC,cACbgZ,EAAgBpZ,aAAY,SAAAC,GAAK,OAAIA,EAAM+E,WAAWoU,iBAQ1D,IAAM0T,EAPQ9sB,aAAY,SAAAC,GAAK,OAAIA,EAAM+E,WAAWgU,WAOjB1M,KAAI,SAACkY,EAAGpiB,GACzC,OAAQ,4BAAQzC,MAAOyC,EAAGiQ,IAAKjQ,GAAIoiB,EAAE9kB,SAGjCssB,EACJ,6BACE,yBAAKzrB,UAAU,aACb,yBAAKA,UAAU,YACb,2BAAOA,UAAU,QAAjB,eAEF,yBAAKA,UAAU,UACb,4BAAQA,UAAU,iCAAiCZ,MAAOyZ,EAAekO,SAhBjF,SAA8BxjB,GAC5B,IAAI4J,EAAQ5J,EAAM3C,OAAOxB,MACzBQ,E1D0D6B,SAAAuN,GAAK,MAAK,CACvChO,KAAM,oBAAqBC,MAAO+N,G0D3DzBqf,CAAkBrf,MAelBof,IAGL,yBAAKvsB,UAAU,uBAAsB,kBAAC,GAAD,CAAM+pB,KAAM,gCAEnD,6BACA,kBAAC0C,GAAD,OAIJ,OACE,yBAAKzsB,UAAU,oBACb,uBAAG2lB,KAAK,0BAA0B3lB,UAAU,sBAAsB6lB,cAAY,WAAW8C,KAAK,SAASgD,gBAAc,OAAOC,gBAAc,0BACxI,wBAAI5rB,UAAU,qCAAd,eAEF,yBAAKA,UAAU,gBAAgB6E,GAAG,0BAChC,yBAAK7E,UAAU,aACZyrB,KAOJ,SAASgB,KACd,IAAM7sB,EAAWC,cACbgS,EAASpS,aAAY,SAAAC,GAAK,OAAIA,EAAM+E,WAAWqY,mBAAmBjL,UAMtE,IAAI6a,EAAgB/W,OACjB8C,QAAQ5G,GACR9F,KAAI,WAAgBoB,GAAW,IAAD,mBAAxB7B,EAAwB,KAC7B,OAAOkf,GADsB,KACOrd,EAAO7B,GAAM,SAAAlM,IAPrD,SAAsBkM,EAAMlM,GAC1BQ,E1DkB6B,SAAC0L,EAAMlM,GAAP,MAAkB,CAC/CD,KAAM,oBAAqBmM,KAAMA,EAAMlM,MAAOA,G0DnBrC0e,CAAkBxS,EAAMlM,IAO7ButB,CAAarhB,EAAMlM,SAIzB,OACE,8BACGstB,GCxDA,IAAM1P,GAAb,kDACE,WAAYpL,GAAQ,IAAD,8BACjB,cAAMA,IACDqH,MAAQ2T,YrBKN3J,YAAgB,CACnBL,IAAKhkB,MqBJPiuB,YACEC,YAAgBC,OAKpB,EAAKrO,OAASkF,IAAMoJ,YAVH,EADrB,qDAeI,OACE,kBAAC,IAAD,CAAU/T,MAAO7Y,KAAK6Y,OACpB,kBAACgU,GAAD,CAAMvO,OAAQte,KAAKse,cAjB3B,GAAyBkF,IAAMC,WAwB/B,SAASoJ,GAAKrb,GACZ,IAAMjS,EAAMF,aAAY,SAAAwZ,GAAK,OAAIA,EAAMtZ,OACjCZ,EAAaU,aAAY,SAAAwZ,GAAK,OAAIA,EAAM2J,IAAI7jB,cAqBlD,IAAM2f,EAAS,kBAAC,GAAD,CAAgBA,OAAQ9M,EAAM8M,SAE7C,OACE,yBAAK1e,UAAU,iBACb,yBAAKA,UAAU,iBACZL,GAtBH,yBAAKK,UAAS,wCAAmCjB,GAAc,WAC7D,kBAAC+sB,GAAD,MACA,kBAACN,GAAD,MACA,kBAACc,GAAD,MACA,kBAAC,GAAD,OAmBA,yBAAKtsB,UAAU,wBAAwB0e,GACtC/e,GAbH,yBAAKK,UAAS,wCAAmCjB,GAAc,WAC7D,kBAAC,GAAD,SC5CYmuB,QACW,cAA7B/T,OAAO3N,SAAS2hB,UAEe,UAA7BhU,OAAO3N,SAAS2hB,UAEhBhU,OAAO3N,SAAS2hB,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,GAAD,MACApJ,SAASqJ,eAAe,SD2HpB,kBAAmBpF,WACrBA,UAAUqF,cAAcC,MACrBhS,MAAK,SAAAiS,GACJA,EAAaC,gBAEdC,OAAM,SAAAlqB,GACLC,QAAQD,MAAMA,EAAMO,a","file":"static/js/main.0b874ea7.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"9c903fdfe86c1905cd1c.worker.js\");\n};","export function gui_reducer(init) {\r\n    let default_settings = {\r\n        fullscreen: false, \r\n        focused: true,\r\n        ...init\r\n    };\r\n    const reducer = (settings=default_settings, action) => {\r\n        switch (action.type) {\r\n            case 'gui.fullscreen':\r\n                return {...settings, fullscreen: action.value};\r\n            case 'gui.focused':\r\n                return {...settings, focused: action.value};\r\n            default:\r\n                break;\r\n        }\r\n        return settings;\r\n    }\r\n    return reducer;\r\n}","// app controls\r\nexport const show_render = is_render => ({\r\n    type: 'app.show_render', value: is_render\r\n})\r\n\r\nexport const show_border = has_border => ({\r\n    type: 'app.show_border', value: has_border\r\n})\r\n\r\nexport const set_background_colour = colour => ({\r\n    type: 'app.set_background_colour', value: colour\r\n})\r\n\r\nexport const set_border_colour = colour => ({\r\n    type: 'app.set_border_colour', value: colour\r\n})\r\n\r\nexport const set_size = size => ({\r\n    type: 'app.set_size', value: size\r\n})\r\n\r\n// sim controls\r\nexport const sim = {\r\n    step:       () => ({type: 'step'}),\r\n    randomise:  () => ({type: 'randomise'}),\r\n    clear:      () => ({type: 'clear'}),\r\n    toggle:     () => ({type: 'toggle'}),\r\n    start:      () => ({type: 'start'}),\r\n    stop:       () => ({type: 'stop'}),\r\n}\r\n\r\n// entries\r\nexport const refresh_entries = () => ({\r\n    type: 'entry.refresh'\r\n})\r\n\r\nexport const select_entry = (browser, index) => ({\r\n    type: 'entry.select', value: {key: browser, index}\r\n})\r\n\r\nexport const create_entry = (name, ca_string, on_error) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.create(name, ca_string)\r\n        .then(() => {\r\n            on_error(false);\r\n            dispatch(refresh_entries());\r\n        }, (err) => {\r\n            on_error(err);\r\n        }); \r\n}\r\n\r\nexport const edit_entry = (browser, index, name, ca_string, on_error) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.edit(browser, index, name, ca_string)\r\n        .then(() => {\r\n            on_error(false);\r\n            dispatch(refresh_entries());\r\n        }, (err) => {\r\n            on_error(err);\r\n        });\r\n}\r\n\r\nexport const delete_entry = (browser, index) => (dispatch, getState) => {\r\n    let entry_browser = getState().entry_browser;\r\n    entry_browser.delete(browser, index)\r\n        .then(() => {\r\n            dispatch(refresh_entries());\r\n        })\r\n}\r\n\r\n// randomiser\r\nexport const select_randomiser = index => ({\r\n    type: 'randomiser.select', value: index\r\n})\r\n\r\nexport const update_randomiser = (name, value) => ({\r\n    type: 'randomiser.update', name: name, value: value \r\n})\r\n\r\n// shader\r\nexport const select_renderer = index => ({\r\n    type: 'shader.select_renderer', value: index\r\n})\r\n\r\nexport const update_shader_params = params => ({\r\n    type: 'shader.update_params', value: params\r\n})\r\n\r\n// statistics\r\nexport const update_statistics = stats => ({\r\n    type: 'stats.update', value: stats\r\n})\r\n\r\n// gui\r\nexport const set_fullscreen = fullscreen => ({\r\n    type: 'gui.fullscreen', value: fullscreen\r\n})\r\n\r\nexport const set_focused = focused => ({\r\n    type: 'gui.focused', value: focused\r\n})\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { sim } from '../actions';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.is_running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch(sim.step())}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch(sim.randomise())}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch(sim.clear())}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch(sim.toggle())}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor(size) {\r\n    this.size = size;\r\n\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.on_size_change(this.size.value);\r\n    this.size.listen(size => this.on_size_change(size.value));\r\n\r\n    this.update();\r\n  }\r\n\r\n  on_size_change(size) {\r\n    this.model_translation = vec3.create();\r\n    vec3.scale(this.model_translation, size, -0.5);\r\n\r\n    // zoom along minimum axis\r\n    // zoom by maximum axis\r\n    let distance = Math.max(...size);\r\n    let min_index = argmin([...size]); \r\n\r\n    this.view_position = vec3.create();\r\n    this.view_position[min_index] = distance*1.5;\r\n    // glitchy around y axis due to euler angle rotation, so add offset\r\n    if (min_index === 1) {\r\n      this.view_position[2] = 1;\r\n    }\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n}\r\n\r\n\r\nfunction argmin(list) {\r\n  let min_i = 0;\r\n  let min_val = list[0];\r\n  for (let i = 1; i < list.length; i++) {\r\n    let val = list[i];\r\n    if (val < min_val) {\r\n      min_val = val;\r\n      min_i = i;\r\n    }\r\n  } \r\n  return min_i;\r\n}\r\n\r\n","import worker from 'worker-loader!./worker.js'; // eslint-disable-line import/no-webpack-loader-syntax \r\n\r\n/**\r\n * Frontend to communicate with the web worker\r\n */\r\nexport class CellularAutomaton3D {\r\n    constructor(size, stats) {\r\n        this.size = size;\r\n        this.stats = stats;\r\n\r\n        this.worker = worker();\r\n        this.promise_id = 0;\r\n        this.is_running = false;\r\n\r\n        this.set_size(this.size.value);\r\n        this.size.listen(size => {\r\n            this.set_size(size.value);\r\n        })\r\n\r\n        this.worker.addEventListener('message', (event) => {\r\n            let msg = event.data;\r\n\r\n            if (msg.error) {\r\n                // throw msg.error;\r\n                console.error(msg);\r\n                return;\r\n            }\r\n\r\n            switch (msg.action) {\r\n                case 'stats':\r\n                    this.stats.recieve(msg.data);\r\n                    break;\r\n                case 'grid':\r\n                    this.notify(msg.grid, msg.local);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.worker.addEventListener('error', ev => {\r\n            console.error(ev.message, ev);\r\n        })\r\n\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    notify(grid, local) {\r\n        for (let listener of this.listeners) {\r\n            listener(grid, local);\r\n        }\r\n        this.set_grid(grid);\r\n    }\r\n\r\n    listen_available_frame(listener) {\r\n        return this.listeners.add(listener);\r\n    }\r\n\r\n    unlisten_available_frame(listener) {\r\n        return this.listeners.delete(listener);\r\n    }\r\n\r\n    set_size(size) {\r\n        this.use_worker('set_size', size);\r\n    }\r\n\r\n    set_rule(rule) {\r\n        this.use_worker('set_rule', rule);\r\n    }\r\n\r\n    set_randomiser(randomiser) {\r\n        this.use_worker('set_randomiser', randomiser);\r\n    }\r\n\r\n    clear() {\r\n        this.use_worker('clear');\r\n    }\r\n\r\n    randomise() {\r\n        this.use_worker('randomise');\r\n    }\r\n\r\n    step() {\r\n        this.use_worker('step');\r\n    }\r\n\r\n    start() {\r\n        this.use_worker('start');\r\n        this.is_running = true;\r\n    }\r\n\r\n    stop() {\r\n        this.use_worker('stop');\r\n        this.is_running = false;\r\n    }\r\n\r\n    toggle() {\r\n        this.is_running ? this.stop() : this.start();\r\n    }\r\n\r\n    set_grid(grid) {\r\n        this.use_worker('set_grid', grid, grid.transferables);\r\n    }\r\n\r\n    request_frame() {\r\n        this.use_worker('request_frame');\r\n    }\r\n\r\n    use_worker(action, data={}, transferables=[]) {\r\n\r\n        let id = this.promise_id;\r\n        this.promise_id += 1;\r\n\r\n        this.worker.postMessage({action, id, data}, transferables);\r\n    }\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { Texture3D } from '../../gl/Texture3D';\r\nimport { create_states_texture, create_radius_texture } from './ColourMaps';\r\n\r\n/**\r\n * Collect data from simulation and render it\r\n */\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, sim, shader_manager, stats) {\r\n    this.gl = gl;\r\n\r\n    this.size = size;\r\n    this.set_size(this.size.value);\r\n    this.size.listen(size => this.set_size(size.value));\r\n\r\n    this.sim = sim;\r\n    this.shader_manager = shader_manager;\r\n    this.stats = stats;\r\n    this.max_neighbours = 26;\r\n\r\n    this.data_updated = false;\r\n\r\n    this.sim.listen_available_frame((grid, unprocessed_blocks, local) => {\r\n      this.update_texture_buffer(grid, unprocessed_blocks, local);\r\n    });\r\n  }\r\n\r\n  set_size(size) {\r\n    let [x, y, z] = size;\r\n    this.total_cells = x*y*z; \r\n    this.create_textures(size);\r\n  }\r\n\r\n  create_textures(size) {\r\n    let gl = this.gl;\r\n\r\n    // colour maps for states and distances\r\n    this.state_colour_texture = create_states_texture(gl);\r\n    this.radius_colour_texture = create_radius_texture(gl);\r\n\r\n    // create 3d texture for rendering cell data\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, size);\r\n  }\r\n\r\n  \r\n\r\n  // from the transferred grid from webworker, update the texture's buffer\r\n  // we use a rgba buffer, with 8 bits for each channel\r\n  // r = state, g = neighbours, b/a = unused\r\n  update_texture_buffer(grid, local=false) {\r\n    let items = local ? grid.render_updates : range(0, grid.count);\r\n    // once updates all rendered, clear it\r\n    if (local) grid.render_updates = new Set();\r\n\r\n    let cells = grid.cells;\r\n    let neighbours = grid.neighbours;\r\n\r\n    let total_items = 0;\r\n\r\n    let start = performance.now();\r\n    const width = this.cell_data_width;\r\n    let cell_data = this.cell_data;\r\n    for (let i of items) {\r\n      let offset = i*width;\r\n      let state = cells[i];\r\n      let neighbour = neighbours[i];\r\n      cell_data[offset+0] = state;\r\n      cell_data[offset+1] = Math.floor(Math.min(neighbour, this.max_neighbours)/this.max_neighbours * 255);\r\n      total_items += 1;\r\n    }\r\n    let end = performance.now();\r\n    this.stats.recieve('texture_data_update', end-start);\r\n\r\n    // data mutated if more than one item\r\n    this.data_updated = this.data_updated || (total_items > 0);\r\n  }\r\n\r\n  // open gl requires us to load data to gpu when texture changed\r\n  load_texture_data() {\r\n    let gl = this.gl;\r\n    if (!this.data_updated) {\r\n      return;\r\n    }\r\n    let start = performance.now();\r\n    let [x, y, z] = this.size.value;\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, x, y, z, gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n    let end = performance.now();\r\n    this.stats.recieve('texture_data_upload', end-start);\r\n    this.data_updated = false;\r\n  }\r\n\r\n  // render the 3d grid\r\n  on_render() {\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.sim.request_frame();\r\n    this.load_texture_data();\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n    {\r\n      let start = performance.now();\r\n      this.shader_manager.on_render();\r\n      let end = performance.now();\r\n      this.stats.recieve('draw_time', end-start);\r\n    }\r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n\r\n","import { Texture2D } from '../../gl/Texture2D';\r\nimport colorsys from 'colorsys';\r\n\r\nexport function create_states_texture(gl) {\r\n  let total_states = 40;\r\n  let state_colours_data = new Uint8Array(4*total_states)\r\n  for (let i = 0; i < total_states-1; i++) {\r\n    let offset = (i+1)*4;\r\n    \r\n    const hue_range = 200;\r\n    let hue = hue_range*(1.0-i/total_states);\r\n    let saturation = 100;\r\n    let value = 100;\r\n    let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n    state_colours_data[offset+0] = r;\r\n    state_colours_data[offset+1] = g;\r\n    state_colours_data[offset+2] = b;\r\n    state_colours_data[offset+3] = 255;\r\n  }\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    state_colours_data[i] = 0;\r\n  }\r\n\r\n  return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n}\r\n\r\nexport function create_radius_texture(gl) {\r\n  let total_states = 360;\r\n  let state_colours_data = new Uint8Array(4*total_states)\r\n  for (let i = 0; i < total_states; i++) {\r\n    let offset = (i)*4;\r\n    \r\n    const hue_range = 360;\r\n    let hue = hue_range*(1.0-i/total_states);\r\n    let saturation = 100;\r\n    let value = 100;\r\n    let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n    state_colours_data[offset+0] = r;\r\n    state_colours_data[offset+1] = g;\r\n    state_colours_data[offset+2] = b;\r\n    state_colours_data[offset+3] = 255;\r\n  }\r\n  \r\n  return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n}","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { vec3 } from \"gl-matrix\";\r\n\r\nclass AdjustableValue {\r\n  constructor(type, value, help) {\r\n    this.type = type;\r\n    this.help = help;\r\n    this._value = value;\r\n    this.listeners = new Set();\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.notify();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  listen(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  unlisten(listener) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  notify() {\r\n    for (let listener of this.listeners) {\r\n      listener(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport class Toggle extends AdjustableValue {\r\n  constructor(value, help) {\r\n    super('toggle', value, help);\r\n  }\r\n\r\n  // javascript doesnt extend accessors\r\n  set value(val) {\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Color extends AdjustableValue {\r\n  constructor(color, help) {\r\n    super('color', color, help);\r\n  }\r\n\r\n  set value(val) {\r\n    super.value = vec3.fromValues(val[0], val[1], val[2]);\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n}\r\n\r\nexport class Slider extends AdjustableValue {\r\n  constructor(min, max, value, help) {\r\n    super('slider', value, help);\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    super.value = val;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}\r\n\r\nexport class Dropdown extends AdjustableValue {\r\n  constructor(options, index=0, help=undefined) {\r\n    super('dropdown', index, help);\r\n    this.options = options;\r\n  }\r\n\r\n  set value(index) {\r\n    index = Math.min(index, this.options.length-1);\r\n    super.value = index;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  get current_option() {\r\n    let option = this.options[this.value];\r\n    return option;\r\n  }\r\n}","import { Shader } from '../../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../../gl/Uniform';\r\n\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport border_shader from './shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\nimport { Color } from '../../ui/util/AdjustableValues';\r\n\r\nexport class Border {\r\n  constructor(gl, size, camera) {\r\n    this.gl = gl;\r\n\r\n    this.camera = camera;\r\n    this.colour = new Color([0,0,0], \"Border Colour\");\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.bind_uniforms(); \r\n\r\n    this.size = size;\r\n    this.set_size(this.size.value);\r\n    this.size.listen(size => this.set_size(size.value));\r\n\r\n  }\r\n\r\n  set_size(size) {\r\n    const gl = this.gl;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    this.offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, this.offset_vec));\r\n  }\r\n\r\n  bind_uniforms() {\r\n    let gl = this.gl;\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new Uniform(loc => {\r\n      let c = this.colour.value;\r\n      gl.uniform4f(loc, c[0]/255, c[1]/255, c[2]/255, 1.0);\r\n    }));\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.shader.bind();\r\n    this.vao.bind();\r\n    this.index_buffer.bind();\r\n\r\n    gl.drawElements(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, 0);\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\nimport { UniformMat4f, Uniform } from \"../../../gl/Uniform\";\r\n\r\n/**\r\n * Given a 3D point cloud, render it\r\n */\r\nexport class Renderer {\r\n    constructor(gl, props, params) {\r\n        this.gl = gl;\r\n        this.props = {\r\n            size: vec3.create(),\r\n            ...props\r\n        };\r\n        this.params = params;\r\n    }\r\n\r\n    // arbitary values\r\n    update_props(props) {\r\n        this.props = { ...this.props, ...props };\r\n    }\r\n\r\n    add_params(params) {\r\n        this.params = { ...this.params, ...params };\r\n    }\r\n\r\n    // adjustable values\r\n    update_params(params) {\r\n        for (let key in params) {\r\n            let param = this.params[key];\r\n            param.value = params[key];\r\n        }\r\n        this.params = { ...this.params };\r\n    }\r\n\r\n    // base uniforms\r\n    add_uniforms(shader) {\r\n        let gl = this.gl;\r\n        // camera data\r\n        shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.props.camera.model));\r\n        shader.add_uniform(\"uView\", new UniformMat4f(gl, this.props.camera.view));\r\n        shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.props.camera.projection));\r\n        // shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.props.camera.view_position));\r\n        shader.add_uniform(\"uViewPosition\", new Uniform(loc => gl.uniform3f(loc, ...this.props.camera.view_position)));\r\n        shader.add_uniform(\"uGridSize\", new Uniform(loc => {\r\n            let [x, y, z] = this.props.size.value;\r\n            gl.uniform3f(loc, x, y, z);\r\n        }));\r\n        // default texture slots\r\n        shader.add_uniform(\"uStateTexture\", new Uniform(loc => gl.uniform1i(loc, 0)));\r\n        shader.add_uniform(\"uStateColourTexture\", new Uniform(loc => gl.uniform1i(loc, 1)));\r\n        shader.add_uniform(\"uRadiusColourTexture\", new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    }\r\n\r\n    bind() {\r\n\r\n    }\r\n\r\n    on_render() {\r\n\r\n    }\r\n}","const vert_shader = (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 position;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nout vec3 vPosition;\r\nout vec3 vTexturePosition;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    vec3 vertex_pos = position * uGridSize;\r\n    vec4 pos = MVP * vec4(vertex_pos, 1.0);\r\n    // camera centered around (0,0,0)\r\n    // box has size uGridSize\r\n    vec3 camera_box = abs(uViewPosition);\r\n    vec3 volume_box = abs(uGridSize)/2.0;\r\n\r\n    // determine where to start ray trace if camera is inside the volume\r\n    if (camera_box.x < volume_box.x && camera_box.y < volume_box.y && camera_box.z < volume_box.z) {\r\n        vTexturePosition = uViewPosition/(uGridSize/2.0);\r\n        vTexturePosition += vec3(1.0,1.0,1.0);\r\n        vTexturePosition /= 2.0;\r\n    } else {\r\n        vTexturePosition = position;\r\n    }\r\n\r\n    vPosition = (uModel * vec4(vertex_pos, 1.0)).xyz;\r\n    gl_Position = pos;\r\n}\r\n`\r\n);\r\n\r\nconst create_frag_shader = (colouring) => (\r\n`#version 300 es\r\n\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp float;\r\n\r\nin vec3 vPosition;\r\nin vec3 vTexturePosition;\r\n\r\nuniform vec3 uGridSize;\r\nuniform vec3 uViewPosition;\r\n\r\nuniform sampler3D uStateTexture;\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\n\r\nuniform float uOcclusion;\r\nuniform float uStepFactor;\r\n\r\nout vec4 vFragColour;\r\n\r\nvoid main() {\r\n    vec3 view_direction = uViewPosition - vPosition;\r\n    vec3 step_size = normalize(view_direction);\r\n    // vec3 resize = abs(step_size);\r\n    // step_size /= max(resize.x, max(resize.y, resize.z));\r\n    step_size = step_size / uGridSize * uStepFactor;\r\n\r\n    vec3 tex_coords = vTexturePosition;\r\n    while (true) {\r\n        vec4 cell = texture(uStateTexture, tex_coords);\r\n        float state = cell[0];\r\n        float neighbours = cell[1];\r\n        float lighting = 1.0-neighbours*uOcclusion;\r\n        vec4 state_colour = texture(uStateColourTexture, vec2(state, 0.0));\r\n        vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n        ${colouring}\r\n        tex_coords -= step_size;\r\n        if (tex_coords.x < 0.0 || tex_coords.x > 1.0 || \r\n            tex_coords.y < 0.0 || tex_coords.y > 1.0 ||\r\n            tex_coords.z < 0.0 || tex_coords.z > 1.0) \r\n        {\r\n            break;\r\n        }\r\n    }\r\n    vFragColour = vec4(0, 0, 0, 0);\r\n}\r\n`\r\n);\r\n\r\nconst state_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst xyz_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vFragColour = vec4(tex_coords*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst layer_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = mod(radius/10.0, 1.0); \r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst radius_colouring = create_frag_shader(\r\n`if (state_colour.a != 0.0) {\r\n    vec3 distance = tex_coords - vec3(0.5, 0.5, 0.5);\r\n    float radius = length(distance * uGridSize);\r\n    float dist = length(distance) * 2.0;\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vFragColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_colouring = create_frag_shader(\r\n`if (neighbour_colour.a != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\nconst neighbour_and_alive_colouring = create_frag_shader(\r\n`float alpha = state_colour.a * neighbour_colour.a;\r\nif (alpha != 0.0) {\r\n    vFragColour = vec4(neighbour_colour.xyz*lighting, alpha);\r\n    return;\r\n}\r\n`\r\n);\r\n\r\n\r\nexport const volume_shader = {\r\n    vert_src: vert_shader,\r\n    frag_src: {\r\n        state: state_colouring,\r\n        xyz: xyz_colouring, \r\n        layer: layer_colouring,\r\n        radius: radius_colouring,\r\n        neighbour: neighbour_colouring,\r\n        neighbour_and_alive: neighbour_and_alive_colouring,\r\n    },\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { Uniform } from \"../../../gl/Uniform\";\r\nimport { cube_optimized } from \"../../../gl/CubeData\";\r\nimport { volume_shader } from \"../shaders/volume\";\r\n\r\nimport { Slider } from \"../../../ui/util/AdjustableValues\";\r\n\r\nexport class VolumeRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        [this.vao, this.ibo, this.index_data] = create_volume_data(gl);\r\n        this.add_params({\r\n            occlusion: new Slider(0, 1, 0.65, \"Amount that nearby cells darken the center cell\"),\r\n            step_factor: new Slider(0.1, 2, 1, \"Decrease to increase quality of volume render\")\r\n        });\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => {\r\n            this.create_shader();\r\n        })\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = volume_shader.vert_src;\r\n        let frag_src = volume_shader.frag_src[colour];\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uStepFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.step_factor.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        gl.enable(gl.CULL_FACE);\r\n        // perform culling check depending on whether camera is inside the viewing box\r\n        let [X, Y, Z] = this.props.size.value.map(n => Math.abs(n/2))\r\n        let [x, y, z] = this.props.camera.view_position.map(Math.abs);\r\n        if (x < X && y < Y && z < Z) {\r\n            gl.cullFace(gl.FRONT);\r\n        } else {\r\n            gl.cullFace(gl.BACK);\r\n        }\r\n\r\n        gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\nconst create_volume_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  \r\n  let vertex_data = cube_optimized.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube_optimized.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\n\r\nuniform vec3 uSunColour;\r\n// vec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: basic_shading,\r\n    basic_alternate: basic_shading_alternate,\r\n    no_shading: create_no_shader\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain - y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nfloat lighting = 1.0-(neighbours*uOcclusion);\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\nuniform float uOcclusion;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(state_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz*lighting, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz*lighting, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\n\r\nimport { Dropdown, Slider, Toggle } from \"../../../ui/util/AdjustableValues\";\r\nimport { Uniform } from \"../../../gl/Uniform\";\r\n\r\nimport { fragment_shader_src } from \"../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../shaders/vertex_shader\";\r\n\r\nexport class PointCloudRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, params);\r\n        this.add_params({\r\n            point_type: new Dropdown(['quad', 'tri'], 0, \"Render quad or triangle for each point\"),\r\n            brightness: new Slider(0, 1, 1, \"Global brightness\"),\r\n            occlusion: new Slider(0, 1, 0.65, \"Amount nearby cells darken the center cell\"),\r\n            scaling_enabled: new Toggle(0, \"Size of cell varies with its value\"),\r\n        });\r\n        this.data = {\r\n            quad: create_quad_data(gl),\r\n            tri: create_triangle_data(gl),\r\n        };\r\n        this.create_shader();\r\n        this.params.colouring.listen(colouring => {\r\n            this.create_shader();\r\n        });\r\n    }\r\n\r\n    create_shader() {\r\n        let colour = this.params.colouring.current_option;\r\n        let vert_src = vertex_shader_src[colour](true);\r\n        let frag_src = fragment_shader_src.no_shading(true);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n    }\r\n\r\n    get current_data() {\r\n        return this.data[this.params.point_type.current_option];\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        let data = this.current_data;\r\n        data.vao.bind();\r\n        data.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let data = this.current_data;\r\n        let [x, y, z] = this.props.size.value;\r\n        let total_cells = x*y*z;\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.drawElementsInstanced(gl.TRIANGLES, data.ibo.count, gl.UNSIGNED_INT, data.index_data, total_cells); \r\n    }\r\n}\r\n\r\n// square for each point\r\nconst create_quad_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                        1, 1, 0.5,\r\n                                        0, 0, 0.5,\r\n                                        1, 0, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}\r\n\r\n// triangle for each point\r\nconst create_triangle_data = (gl) => {\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                        1.5, -0.5, 0.5,\r\n                                        0.5, -1.5, 0.5]);\r\n    let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n    let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    let ibo = new IndexBuffer(gl, index_data);\r\n\r\n    let vao = new VertexArrayObject(gl);\r\n    vao.add_vertex_buffer(vbo, layout);\r\n    return {vao: vao, ibo: ibo, index_data: index_data};\r\n}","import { Renderer } from \"./Renderer\";\r\n\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../../../gl/VertexBuffer';\r\nimport { Shader } from \"../../../gl/Shader\";\r\nimport { UniformVec3f, Uniform } from \"../../../gl/Uniform\";\r\nimport { IndexBuffer } from \"../../../gl/IndexBuffer\";\r\nimport { cube } from \"../../../gl/CubeData\";\r\n\r\nimport { Toggle, Slider, Dropdown, Color } from \"../../../ui/util/AdjustableValues\";\r\nimport { fragment_shader_src } from \"../shaders/fragment_shader\";\r\nimport { vertex_shader_src } from \"../shaders/vertex_shader\";\r\n\r\nimport { vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport class VoxelRenderer extends Renderer {\r\n    constructor(gl, props, params) {\r\n        super(gl, props, {});\r\n        this.shading_params = {\r\n            ambient_strength: new Slider(0, 1, 0.4, \"Amount of global lighting\"),\r\n            diffuse_strength: new Slider(0, 1, 0.95, \"Amount of light scattering\"),\r\n            specular_strength: new Slider(0, 1, 0.6, \"Amount of light reflection\"),\r\n            specular_power_factor: new Slider(0, 128.0, 4.0, \"Strength of the light reflection\"),\r\n            scaling_enabled: new Toggle(0, \"Change size of cell depending on its value (state or total neighbours)\"),\r\n            fog_near: new Slider(0, 1, 0, \"Minimum distance of fog\"),\r\n            fog_far: new Slider(0, 1, 0, \"Maximum distance of fog\"),\r\n            sun_strength: new Slider(0, 1, 0.95, \"Strength of the sun\"),\r\n            sky_strength: new Slider(0, 1, 0.25, \"Strength of sky lighting\"),\r\n            brightness: new Slider(0, 1, 1.0, \"Amount of global lighting\"),\r\n            occlusion: new Slider(0, 1, 0.0, \"Amount nearby cells darken the center cell\"),\r\n            light_colour: new Color(vec3.fromValues(255, 255, 255), \"Colour of sun\"),\r\n        };\r\n\r\n        this.global_params = {\r\n            ...params,\r\n            shading: new Dropdown(Object.keys(fragment_shader_src), 0, \"Different methods of rendering\"),\r\n        };\r\n\r\n        this.shading_keys = {\r\n          basic: ['occlusion', 'sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'light_colour', 'scaling_enabled'],\r\n          basic_alternate: ['occlusion', 'ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'light_colour', 'scaling_enabled'],\r\n          no_shading: ['occlusion', 'brightness', 'scaling_enabled']\r\n        };\r\n\r\n        this.update_props({\r\n            light_position: vec3.create()\r\n        });\r\n        [this.vao, this.ibo, this.index_data] = create_cube_data(gl);\r\n        this.create_shader();\r\n        this.params.colouring.listen(() => this.create_shader());\r\n        this.params.shading.listen(() => this.create_shader());\r\n    }\r\n\r\n    create_shader() {\r\n        this.load_params();\r\n        let colour = this.global_params.colouring.current_option;\r\n        let shading = this.global_params.shading.current_option;\r\n        let vert_src = vertex_shader_src[colour](false);\r\n        let frag_src = fragment_shader_src[shading](false);\r\n        this.shader = new Shader(this.gl, vert_src, frag_src);\r\n        this.add_uniforms(this.shader);\r\n    }\r\n\r\n    // depending on shading type, we get different parameters to configure\r\n    load_params() {\r\n        let params = {};\r\n        let shading = this.global_params.shading.current_option;\r\n        let keys = this.shading_keys[shading];\r\n        for (let key of keys) {\r\n            params[key] = this.shading_params[key];\r\n        }\r\n        this.params = {...this.global_params, ...params};\r\n    }\r\n\r\n    add_uniforms(shader) {\r\n        super.add_uniforms(shader);\r\n        let gl = this.gl;\r\n        // lighting\r\n        shader.add_uniform('light.position', new UniformVec3f(gl, this.props.light_position));\r\n        shader.add_uniform('light.colour', new Uniform(loc => {\r\n            let c = this.shading_params.light_colour.value;\r\n            gl.uniform3f(loc, c[0]/255, c[1]/255, c[2]/255);\r\n        }));\r\n        shader.add_uniform('uSunColour', new Uniform(loc => {\r\n            let c = this.shading_params.light_colour.value;\r\n            gl.uniform3f(loc, c[0]/255, c[1]/255, c[2]/255);\r\n        }))\r\n        // // lighting params\r\n        shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.ambient_strength.value)));\r\n        shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.diffuse_strength.value)));\r\n        shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_strength.value)));\r\n        shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.params.specular_power_factor.value)));\r\n        shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.params.brightness.value)));\r\n        shader.add_uniform(\"uOcclusion\", new Uniform(loc => gl.uniform1f(loc, this.params.occlusion.value)));\r\n        // post processing\r\n        shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.params.scaling_enabled.value)));\r\n        shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_near.value)));\r\n        shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.params.fog_far.value)));\r\n        shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sun_strength.value)));\r\n        shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.params.sky_strength.value)));\r\n    }\r\n\r\n    bind() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n        let [x, y, z] = this.props.size.value;\r\n        let total_cells = x*y*z;\r\n        gl.enable(gl.CULL_FACE);\r\n        gl.cullFace(gl.BACK);\r\n        gl.drawElementsInstanced(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, this.index_data, total_cells); \r\n    }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let layout = new VertexBufferLayout(gl);\r\n  layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let ibo = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(vbo, layout);\r\n\r\n  return [vao, ibo, index_data];\r\n}","import { Dropdown } from '../../ui/util/AdjustableValues';\r\nimport { VolumeRenderer } from './renderers/VolumeRenderer';\r\nimport { PointCloudRenderer } from './renderers/PointCloudRenderer';\r\nimport { VoxelRenderer } from './renderers/VoxelRenderer';\r\nimport { vertex_shader_src } from './shaders/vertex_shader';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, size, camera) {\r\n    this.gl = gl;\r\n    this.size = size;\r\n    this.camera = camera;\r\n\r\n    let props = {\r\n      size: this.size,\r\n      camera: this.camera\r\n    };\r\n\r\n    this.global_params = {\r\n      colouring: new Dropdown(Object.keys(vertex_shader_src), 0, 'Method of colouring each cell'),\r\n    };\r\n\r\n    this.renderers = {\r\n      volume: new VolumeRenderer(gl, props, this.global_params),\r\n      point: new PointCloudRenderer(gl, props, this.global_params),\r\n      voxel: new VoxelRenderer(gl, props, this.global_params),\r\n    };\r\n\r\n    {\r\n      const tooltip = (\r\n        \"Method of rendering the grid\\n\"+\r\n        \"Volume: Fastest but low quality (Uses raycasting)\\n\"+\r\n        \"Point: Represents each cell as a floating quad\\n\"+\r\n        \"Voxel: Slowest but highest quality (Like Minecraft)\\n\"\r\n      );\r\n      this.renderer_type = new Dropdown(Object.keys(this.renderers), 0, tooltip);\r\n    }\r\n  }\r\n\r\n  get current_renderer() {\r\n    let key = this.renderer_type.current_option;\r\n    return this.renderers[key];\r\n  }\r\n\r\n  select_renderer(index) {\r\n    this.renderer_type.value = index;\r\n  }\r\n\r\n  get params() {\r\n    return this.current_renderer.params;\r\n  }\r\n\r\n  update_params(params) {\r\n    this.current_renderer.update_params(params);\r\n  }\r\n\r\n  bind() {\r\n    this.current_renderer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    this.current_renderer.on_render();\r\n  }\r\n\r\n\r\n}\r\n","import  { Slider } from '../ui/util/AdjustableValues';\r\n/**\r\n * Serialisation for web worker\r\n */\r\n\r\n\r\nclass SerializedRandomiser {\r\n    constructor(type, params) {\r\n        this.type = type;\r\n        this.params = params;\r\n    }\r\n\r\n    to_json() {\r\n        let params = {};\r\n        for (let key in this.params) {\r\n            params[key] = this.params[key].value;\r\n        }\r\n        return {\r\n            type: this.type,\r\n            params: params \r\n        };\r\n    }\r\n}\r\n\r\nexport class SeedCrystalSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super('Seed Crystal', {\r\n            density: new Slider(0, 1, density, \"Amount of region to fill\"),\r\n            radius: new Slider(0, 0.5, radius, \"Radius of cube to fill (Relative to size of 3D grid)\"),\r\n        });\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsoluteSerialized extends SerializedRandomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super('Seed Crystal Absolute', {\r\n            density: new Slider(0, 1, density, \"Amount of region to fill\"),\r\n            radius: new Slider(0, 100, radius, \"Radius of cube to fill (Number of cells for radius)\"),\r\n        });\r\n    }\r\n}\r\n\r\nexport class RuleSerialized {\r\n    constructor(remain, become, total_states, neighbour) {\r\n        this.remain = remain;\r\n        this.become = become;\r\n        this.total_states = total_states;\r\n        this.neighbour = neighbour;\r\n    }\r\n\r\n    to_json() {\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class NeighbourSerialized {\r\n    constructor(type, max) {\r\n        this.type = type;\r\n        this.max = max;\r\n    }\r\n    \r\n    to_json() {\r\n        return this;\r\n    }\r\n}","import { RuleSerialized, NeighbourSerialized } from \"../simulation/Serialised\";\r\n\r\nconst NeighbourRules = {\r\n  'M': new NeighbourSerialized('M', 26),\r\n  'VN': new NeighbourSerialized('VN', 6),\r\n};\r\n\r\nexport class RuleReader {\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Expected Range/Range/Number/(VN or M).\\nEg: 0,1-4,5/0-26/5/VN`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour] = substrings;\r\n\r\n\r\n    if (NeighbourRules[neighbour] === undefined) {\r\n      throw new Error(`Invalid neighbourhood. Expected M or VN.`);\r\n    }\r\n\r\n    total_states = this.convert_to_number(total_states);\r\n    if (total_states <= 1) {\r\n      throw new Error(`Invalid total states. Expected 2 or more states`);\r\n    }\r\n\r\n\r\n    neighbour = NeighbourRules[neighbour];\r\n    let remain = this.retrieve_rule(remain_alive);\r\n    let become = this.retrieve_rule(become_alive);\r\n\r\n    return new RuleSerialized(remain, become, total_states, neighbour);\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      // invalid empty number\r\n      if (number.length === 0) {\r\n        throw new Error(`Invalid number, cannot be ''`);\r\n      }\r\n      // If starts with - in front, then not valid\r\n      if (number[0] === '-') {\r\n        throw new Error(`Range must have number in front: ${number}\\nEg. 0-26`);\r\n      }\r\n      // If it ends with -, then not valid\r\n      if (number[number.length-1] === '-') {\r\n        throw new Error(`Range must have number at back: ${number}\\nEg. 0-26`);\r\n      }\r\n      // Check if all are numbers\r\n      let range = number.split('-').map(n => this.convert_to_number(n));\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n    return N;\r\n  }\r\n\r\n  convert_to_number(word) {\r\n    if (isNaN(word)) {\r\n      throw new Error(`${word} is not a valid number`);\r\n    }\r\n    return Number(word);\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n}","import { RuleReader } from \"../RuleReader\";\r\n\r\nexport class Entry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    let reader = new RuleReader();\r\n    let rule = reader.generate(ca_string);\r\n    this.rule = rule;\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","import { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"../../simulation/Serialised\";\r\nimport { Entry } from \"./Entry\";\r\n\r\nexport class DefaultEntryBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n    this.listeners = new Set();\r\n    // our default entries\r\n    this.add_entry(new Entry('Amoeba-1',  '9-26/5-7,12-13,15/16/M', new SeedCrystalAbsoluteSerialized(0.3, 5)));\r\n    this.add_entry(new Entry('445',       '4/4/5/M',                new SeedCrystalSerialized(0.05, 0.5)));\r\n    this.add_entry(new Entry('Builder 2', '6,9/4,6,8-9/10/M',       new SeedCrystalAbsoluteSerialized(0.35, 7)));\r\n    this.add_entry(new Entry('Crystal Growth 1', '0-6/1,3/2/VN',    new SeedCrystalAbsoluteSerialized(1.0, 1)));\r\n    this.add_entry(new Entry('Crystal Growth 2', '1-3/1-3/5/VN',    new SeedCrystalAbsoluteSerialized(1.0, 1)));\r\n    this.add_entry(new Entry('Clouds 1',  '13-26/13-14,17-19/2/M',  new SeedCrystalSerialized(0.5, 0.5)));\r\n    this.add_entry(new Entry('Slow Decay', '8,11,13-26/13-26/5/M',  new SeedCrystalSerialized(0.45, 1.0)));\r\n    this.add_entry(new Entry('Spiky Growth 1', '7-26/4,12-13,15/10/M', new SeedCrystalAbsoluteSerialized(0.32, 7)));\r\n    this.add_entry(new Entry('Ripple Cube', '8-26/4,12-13,15/10/M', new SeedCrystalAbsoluteSerialized(0.35, 14)));\r\n    this.add_entry(new Entry('Amoeba-2',  '9-26/5-7,12-13,15/5/M',  new SeedCrystalAbsoluteSerialized(0.3, 5)));\r\n    this.add_entry(new Entry('Builder 1', '6,9/4,6,8-9/10/M',       new SeedCrystalAbsoluteSerialized(0.35, 7)));\r\n    this.add_entry(new Entry('Pyroclastic', '4-7/6-8/10/M',         new SeedCrystalAbsoluteSerialized(0.2, 5)));\r\n    this.add_entry(new Entry('678 678',   '6-8/6-8/3/M',            new SeedCrystalSerialized(0.3)));\r\n\r\n    this.select(0);\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  get selected_entry() {\r\n    return this.entries[this.current_index];\r\n  }\r\n\r\n  select(idx) {\r\n    this.current_index = idx;\r\n    let entry = this.selected_entry;\r\n    this.notify(entry);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    this.entries.push(entry);\r\n  }\r\n}","import { Entry } from \"./Entry\";\r\n\r\nexport class StoredEntryBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n\r\n    this.listeners = new Set();\r\n\r\n    this.db_cfg = {\r\n      name: 'entries_db',\r\n      store: 'entries_os'\r\n    };\r\n\r\n    let db_request = window.indexedDB.open(this.db_cfg.name, 1);\r\n    db_request.onerror = (ev) => console.error(`${this.db_cfg.name} failed to open`);\r\n    db_request.onsuccess = (ev) => {\r\n      this.db = db_request.result;\r\n      this.on_db_load();\r\n    };\r\n\r\n    db_request.onupgradeneeded = (ev) => {\r\n      let db = ev.target.result;\r\n      let store = db.createObjectStore(this.db_cfg.store, { keyPath:'id', autoIncrement: true});\r\n      store.createIndex('name', 'name', {unique: false});\r\n      store.createIndex('ca_string', 'ca_string', {unique: false});\r\n    }\r\n\r\n    this.current_index = -1;\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  on_db_load() {\r\n    // this.add_user_entry('Test', '0-6/1,3/2/VN');\r\n    let cfg = this.db_cfg;\r\n    let store = this.db.transaction(cfg.store).objectStore(cfg.store);\r\n    let corrupted_ids = [];\r\n    store.openCursor().onsuccess = (ev) => {\r\n      let cursor = ev.target.result;\r\n      if (cursor) {\r\n        let {name, ca_string, id} = cursor.value;\r\n        try {\r\n          let entry = new StoredEntry(name, ca_string, id);\r\n          this.add_entry(entry);\r\n        } catch (ex) {\r\n          corrupted_ids.push(id);\r\n        }\r\n        cursor.continue();\r\n        return;\r\n      }      \r\n      // end of cursor list, this lets remove all corrupted ids\r\n      this.purge_corrupted_ids(corrupted_ids);\r\n    }\r\n  }\r\n\r\n  purge_corrupted_ids(ids) {\r\n    if (ids && ids.length > 0) {\r\n      console.warn('Purging corrupted ids');\r\n      console.warn(ids);\r\n    }\r\n    let cfg = this.db_cfg;\r\n    let store = this.db.transaction([cfg.store], 'readwrite').objectStore(cfg.store);\r\n    for (let id of ids) {\r\n      store.delete(id);\r\n    }\r\n  }\r\n\r\n  edit(index, name, ca_string) {\r\n    let original = this.entries[index];\r\n    if (!original) return;\r\n\r\n    let replace = new StoredEntry(name, ca_string, original.id);\r\n\r\n    let db = this.db;\r\n    let cfg = this.db_cfg;\r\n\r\n    if (!db) {\r\n      console.error(`${cfg.store} failed to load`);\r\n      return;\r\n    } \r\n\r\n    let data = {id: original.id, name, ca_string};\r\n    let transaction = db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    store.put(data);\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n      transaction.oncomplete = (ev) => {\r\n        this.entries[index] = replace;\r\n        this.entries = [...this.entries];\r\n        if (this.current_index === index) {\r\n          this.notify(replace);\r\n        }\r\n        resolve(true);\r\n      }\r\n      transaction.onerror = () => {\r\n        console.error(`Failed to update entry: ${original} to ${replace}`);\r\n        reject(`Failed to update entry: ${original} to ${replace}`);\r\n      }\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  create(name, ca_string) {\r\n    // id is undefined, add in later\r\n    let entry = new StoredEntry(name, ca_string);\r\n\r\n    let db = this.db;\r\n    let cfg = this.db_cfg;\r\n    if (!db) {\r\n      console.error(`${cfg.store} failed to load`);\r\n      return;\r\n    }\r\n    let data = {name, ca_string};\r\n    let transaction = db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    let request = store.add(data);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = (ev) => {\r\n        let id = ev.target.result;\r\n        entry.id = id;\r\n        this.add_entry(entry);\r\n        resolve(true);\r\n      }\r\n      request.onerror = () => {\r\n        console.error(`Failed to add entry: ${name}, ${ca_string}`);\r\n        reject(`Failed to add entry: ${name}, ${ca_string}`);\r\n      }\r\n    });\r\n }\r\n\r\n  delete(idx) {\r\n    // ignore invalid index\r\n    if (idx < 0 || idx >= this.entries.length) return;\r\n    // map expected current index after removal\r\n    let current_index = this.current_index;\r\n    // if same item, then we want the index to point to same location in list after change\r\n    // this will be the next item\r\n    if (this.current_index === idx) {\r\n      current_index = this.current_index;\r\n    // if an item behind selected item, then we want to keep the selected item\r\n    // this will be now an index behind\r\n    } else if (this.current_index > idx) {\r\n      current_index = this.current_index-1; \r\n    // if selected item behind deleted item, then dont do anything\r\n    } else {\r\n      current_index = this.current_index;\r\n    }\r\n    // remove from db\r\n    let entry = this.entries[idx];\r\n    let cfg = this.db_cfg;\r\n    let transaction = this.db.transaction([cfg.store], 'readwrite');\r\n    let store = transaction.objectStore(cfg.store);\r\n    store.delete(entry.id);\r\n\r\n    // if request was successful, then modify entries array inplace\r\n    // send notification\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => {\r\n        let entries = this.entries;\r\n        this.entries = [...entries.slice(0, idx), ...entries.slice(idx + 1)];\r\n        // always try to figure out a viable selection before defaulting to nothing\r\n        current_index = Math.max(current_index, 0);\r\n        current_index = Math.min(current_index, this.entries.length-1);\r\n        // if no entries left, then undefined entry\r\n        if (this.entries.length === 0) {\r\n          current_index = -1;\r\n        }\r\n        this.select(current_index);\r\n        resolve(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  get selected_entry() {\r\n    return this.entries[this.current_index];\r\n  }\r\n\r\n  select(idx) {\r\n    this.current_index = idx;\r\n    if (this.current_index < 0 || this.current_index >= this.entries.length) {\r\n      this.notify(undefined);\r\n      return;\r\n    }\r\n    let entry = this.selected_entry;\r\n    this.notify(entry);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    this.entries = [...this.entries, entry]; \r\n  }\r\n}\r\n\r\nclass StoredEntry extends Entry {\r\n  constructor(name, ca_string, id) {\r\n    super(name, ca_string);\r\n    this.id = id;\r\n  }\r\n}","import { DefaultEntryBrowser } from './DefaultEntryBrowser';\r\nimport { StoredEntryBrowser } from './StoredEntryBrowser';\r\n\r\nexport class EntryBrowser {\r\n  constructor() {\r\n    this.listeners = new Set();\r\n\r\n    this.browsers = {\r\n      'Default': new DefaultEntryBrowser(),\r\n      'User': new StoredEntryBrowser(),\r\n    };\r\n\r\n    this.current_browser_key = 'System';\r\n\r\n    this.browsers['Default'].listen_select((entry) => {\r\n      this.notify(entry);\r\n    })\r\n\r\n    this.browsers['User'].listen_select((entry) => {\r\n      if (entry === undefined) {\r\n        this.select('Default', 0);  \r\n      } else {\r\n        this.notify(entry);\r\n      }\r\n    })\r\n  }\r\n\r\n  listen_select(listener) {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  notify(entry) {\r\n    for (let listener of this.listeners) {\r\n      listener(entry);\r\n    }\r\n  }\r\n\r\n  get selected_entry() {\r\n    let entry = this.selected_browser.selected_entry;\r\n    return entry;\r\n  }\r\n\r\n  get selected_browser() {\r\n    let browser = this.browsers[this.current_browser_key];\r\n    return browser;\r\n  }\r\n\r\n  get_entries(key) {\r\n    return this.browsers[key].entries;\r\n  }\r\n\r\n  select(key, index) {\r\n    this.current_browser_key = key;\r\n    this.selected_browser.select(index);\r\n  }\r\n\r\n  // wrap around stored database\r\n  delete(key, index) {\r\n    return new Promise((resolve, reject) => {\r\n      if (key !== 'User') {\r\n        reject('Can only delete user defined rules');\r\n        return;\r\n      }\r\n      let stored = this.browsers['User'];\r\n      stored.delete(index)\r\n        .then(v => resolve(v), err => reject(err));\r\n    });\r\n  }\r\n\r\n  create(name, ca_string) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let stored = this.browsers['User'];\r\n        stored.create(name, ca_string)\r\n          .then(v => resolve(v), err => reject(err));\r\n      } catch (ex) {\r\n        reject(String(ex.message));\r\n      }\r\n    });\r\n  }\r\n\r\n  edit(key, index, name, ca_string) {\r\n    let stored = this.browsers[key];\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let promise = stored.edit(index, name, ca_string);\r\n        promise.then((val) => resolve(val), (err) => reject(err));\r\n      } catch (ex) {\r\n        reject(String(ex.message));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { update_statistics } from \"../ui/actions\";\r\n\r\nexport class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n            texture_data_update: 0,\r\n            texture_data_upload: 0,\r\n            draw_time: 0,\r\n        };\r\n        this.cooldown = false;\r\n    }\r\n\r\n    force_update() {\r\n        if (this.cooldown) {\r\n            return;\r\n        }\r\n\r\n        this.store.dispatch((dispatch) => {\r\n            this.cooldown = true;\r\n            setTimeout(() => {\r\n                dispatch(update_statistics(this));\r\n                setTimeout(() => this.cooldown = false, 30);\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystalSerialized, SeedCrystalAbsoluteSerialized } from \"../simulation/Serialised\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystalSerialized());\r\n        this.add_randomiser(new SeedCrystalAbsoluteSerialized());\r\n\r\n        this.current_index = 0;\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    listen_select(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    notify(randomiser) {\r\n        for (let listener of this.listeners) {\r\n            listener(randomiser);\r\n        }\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push(randomiser);\r\n    }\r\n\r\n    update_randomiser(randomiser) {\r\n        let {type, params} = randomiser;\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            let other = this.entries[i];\r\n            if (other.type !== type) continue;\r\n\r\n            for (let key in params) {\r\n                other.params[key].value = params[key].value;\r\n            }\r\n            other.params = {...other.params};\r\n            this.current_index = i;\r\n            break;\r\n        }\r\n        this.notify(this.current_randomiser);\r\n    }\r\n\r\n    update_current(key, value) {\r\n        let param = this.current_randomiser.params[key];\r\n        param.value = value;\r\n        this.current_randomiser.params = {...this.current_randomiser.params}; // force update react\r\n    }\r\n\r\n    select(index) {\r\n        this.current_index = index;\r\n        this.notify(this.current_randomiser);\r\n    }\r\n\r\n    get current_randomiser() {\r\n        return this.entries[this.current_index];\r\n    } \r\n}","export class Observable {\r\n    constructor(value) {\r\n        this._value = value;\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    listen(listener) {\r\n        return this.listeners.add(listener);\r\n    }\r\n\r\n    unlisten(listener) {\r\n        return this.listeners.delete(listener);\r\n    }\r\n\r\n    notify() {\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    set value(value) {\r\n        this._value = value;\r\n        this.notify();\r\n    }\r\n}","import { Camera } from './Camera';\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './rendering/SimulationRenderer';\r\nimport { Border } from './rendering/Border';\r\nimport { ShaderManager } from './rendering/ShaderManager';\r\nimport { EntryBrowser } from './entry_browser/EntryBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle, Color } from '../ui/util/AdjustableValues';\r\nimport { Observable } from './Observable';\r\n\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n    this.show_border = new Toggle(true, \"Show an outlining border\");\r\n    this.show_render = new Toggle(true, \"Show the grid of cells (Disable if you want to see result later)\");\r\n    this.background_colour = new Color([255,255,255], \"Background Colour\");\r\n\r\n    let x = 100;\r\n    this.size = new Observable(vec3.fromValues(x, x, x));\r\n    this.camera = new Camera(this.size);\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.size, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.entry_browser = new EntryBrowser();\r\n    this.stats = new Statistics(this.store);\r\n\r\n    this.sim = new CellularAutomaton3D(this.size, this.stats);\r\n    this.sim_renderer = new SimulationRenderer(gl, this.size, this.sim, this.shader_manager, this.stats);\r\n    this.border = new Border(gl, this.size, this.camera);\r\n\r\n    // everytime randomiser is changed, we update randomiser\r\n    this.randomiser_manager.listen_select((randomiser) => {\r\n      this.sim.set_randomiser(randomiser.to_json());\r\n    });\r\n\r\n    // when changing entries, we have a new randomiser and rule\r\n    this.entry_browser.listen_select((entry) => {\r\n      let randomiser = entry.randomiser;\r\n      let rule = entry.rule;\r\n      if (randomiser) {\r\n        this.randomiser_manager.update_randomiser(randomiser);\r\n      }\r\n      if (rule) {\r\n        this.sim.set_rule(rule.to_json());\r\n        this.sim_renderer.max_neighbours = rule.neighbour.max;\r\n      }\r\n    });\r\n\r\n    this.size.notify();\r\n\r\n    // select amoeba with layer colouring\r\n    this.entry_browser.select('Default', 0);\r\n    this.shader_manager.update_params({colouring: 0});\r\n    this.randomise();\r\n  }\r\n\r\n  randomise() {\r\n    let randomiser = this.randomiser_manager.current_randomiser;\r\n    this.sim.set_randomiser(randomiser.to_json());\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let [xi, yi, zi] = this.size.value;\r\n    let [xf, yf, zf] = size;\r\n    if (xi !== xf || yi !== yf || zi !== zf) {\r\n      this.size.value = size;\r\n    }\r\n  }\r\n\r\n  // try render each frame\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  // when resizing the canvas element, we need to update opengl viewport\r\n  resize() {\r\n    let gl = this.gl;\r\n    let canvas = gl.canvas;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    if (width === canvas.width && height === canvas.height)\r\n      return;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    gl.viewport(0, 0, width, height);\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n  }\r\n    \r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.resize();\r\n    \r\n    {\r\n      let c = this.background_colour.value;\r\n      gl.clearColor(c[0]/255, c[1]/255, c[2]/255, 1);\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim_renderer.on_render();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { vec2 } from 'gl-matrix';\r\n\r\nexport class MouseController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n    this.listeners = {\r\n      onMouseDown: ev => this.on_mouse_down(ev),\r\n      onMouseUp: ev => this.on_mouse_up(ev),\r\n      onMouseMove: ev => this.on_mouse_move(ev),\r\n      onWheel: ev => this.on_wheel(ev)\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.rotating = false;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n}","import { vec2 } from 'gl-matrix';\r\n\r\nexport class TouchScreenController {\r\n  constructor(camera) {\r\n    this.camera = camera;\r\n\r\n    this.listeners = {\r\n      onTouchStart: ev => this.on_touch_start(ev), \r\n      onTouchMove: ev => this.on_touch_move(ev),\r\n      onTouchEnd: ev => this.on_touch_end(ev),\r\n    };\r\n\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n}","import React from 'react';\r\nimport { App } from '../../../app/App';\r\n\r\nimport { MouseController } from './MouseController';\r\nimport { TouchScreenController } from './TouchScreenController';\r\n\r\nimport { create_reducer } from '../../reducers';\r\n\r\nimport \"./Canvas.css\";\r\nimport { set_focused } from '../../actions';\r\n\r\nexport class Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mouse_controller = new MouseController();\r\n    this.touch_controller = new TouchScreenController();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.props.canvas.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n    let app = this.create_app(gl);\r\n    let camera = app.camera;\r\n    this.mouse_controller.camera = camera;\r\n    this.touch_controller.camera = camera;\r\n    this.focus_timeout = this.create_focus_timeout();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.focus_timeout);\r\n  }\r\n\r\n  create_focus_timeout(delay=3000) {\r\n    let id = setTimeout(() => this.change_focus(false), delay);\r\n    return id;\r\n  }\r\n\r\n  // mouse moves, update focus\r\n  on_mouse_move() {\r\n    clearTimeout(this.focus_timeout);\r\n    this.focus_timeout = this.create_focus_timeout();\r\n    this.change_focus(true);\r\n  }\r\n\r\n  change_focus(focused) {\r\n    let store = this.props.store;\r\n    let original = store.getState().gui.focused;\r\n    if (original === focused) {\r\n      return;\r\n    }\r\n    store.dispatch(set_focused(focused));\r\n  }\r\n\r\n  create_app(gl) {\r\n    let store = this.props.store;\r\n    let app = store.getState().app;\r\n    if (app) {\r\n      return app;\r\n    }\r\n\r\n    app = new App(gl, store);\r\n    let reducer = create_reducer(app);\r\n    store.replaceReducer(reducer);\r\n    app.run();\r\n    return app;\r\n  }\r\n\r\n  render() {\r\n    const listener = ev => this.on_mouse_move();\r\n    const hooks = ['onMouseMove', 'onMouseDown', 'onMouseUp', 'onTouchMove', 'onTouchStart', 'onTouchEnd'];\r\n    let listeners = {};\r\n    for (let hook of hooks) {\r\n      listeners[hook] = listener;\r\n    }\r\n    \r\n    return (\r\n      <div className='w-100 h-100' {...listeners}>\r\n        <canvas \r\n          className=\"w-100 h-100\" ref={this.props.canvas} \r\n          {...this.mouse_controller.listeners} {...this.touch_controller.listeners}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport { app_reducer } from './app';\r\nimport { entry_reducer } from './entry_manager';\r\nimport { shader_reducer } from './shader_manager';\r\nimport { stats_reducer } from './statistics';\r\nimport { randomiser_reducer } from './randomiser_manager';\r\nimport { gui_reducer } from './gui';\r\n\r\nexport function create_reducer(app) {\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      entry_browser: entry_reducer(app.entry_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n      gui: gui_reducer(),\r\n    });\r\n\r\n    return reducers;\r\n}\r\n\r\nexport function create_preinit_reducer() {\r\n    return combineReducers({\r\n        gui: gui_reducer()\r\n    })\r\n}\r\n","export function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.update_current(action.name, action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}","export function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}","export function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_renderer':\r\n                manager.select_renderer(action.value);\r\n                break;\r\n            case 'shader.update_params':\r\n                manager.update_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}","export function entry_reducer(entry_browser) {\r\n    const reducer = (browser=entry_browser, action) => {\r\n        switch (action.type) {\r\n            case 'entry.refresh':\r\n                return browser;\r\n            case 'entry.select':\r\n                {\r\n                    let {key, index} = action.value;\r\n                    browser.select(key, index);\r\n                }\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            case 'app.set_background_colour':\r\n                app.background_colour.value = action.value;\r\n                break;\r\n            case 'app.set_border_colour':\r\n                app.border.colour.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { set_fullscreen as action_fullscreen } from '../../actions';\r\n\r\nexport function FullScreenButton() {\r\n  const dispatch = useDispatch();\r\n  const fullscreen = useSelector(state => state.gui.fullscreen);\r\n\r\n  const font = !fullscreen ? 'arrows-alt' : 'compress-arrows-alt';\r\n\r\n  function set_fullscreen(is_fullscreen) {\r\n    const e = document.documentElement;\r\n    const d = document;\r\n    const request_fullscreen = e.requestFullscreen || e.mozRequestFullScreen || e.webkitRequestFullScreen || e.msRequestFullscreen;\r\n    const cancel_fullscreen = d.exitFullscreen || d.mozCancelFullScreen || d.webkitCancelFullScreen || d.msExitFullscreen;\r\n    const document_fullscreen = (d.fullscreenElement && d.fullscreenElement !== undefined) || d.mozFullscreen || d.webkitIsFullScreen; \r\n    if (!document_fullscreen) {\r\n      request_fullscreen.bind(e)();\r\n      dispatch(action_fullscreen(true));\r\n    } else {\r\n      cancel_fullscreen.bind(d)();\r\n      dispatch(action_fullscreen(false));\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    let is_fullscreen = !fullscreen;\r\n    set_fullscreen(is_fullscreen);\r\n  };\r\n\r\n  return (\r\n    <button className={`btn btn-secondary`} onClick={onClick}>\r\n      <i className={`fas fa-${font} fa-sm`}></i>\r\n    </button>\r\n  );\r\n}","import React from 'react';\r\nimport { Controls } from '../Controls';\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport { Canvas } from './Canvas';\r\nimport { FullScreenButton } from './FullScreenButton';\r\nimport \"./SimulationView.css\";\r\n\r\nexport function SimulationView(props) {\r\n  const store = useStore();\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  const focused = useSelector(store => store.gui.focused);\r\n  const background_colour = useSelector(store => store.app && store.app.background_colour.value)\r\n\r\n  let float_controls = (fullscreen && !focused) ? 'fade' : '';\r\n\r\n  function render_float_controls() {\r\n    return (\r\n      <div className={float_controls} style={{zIndex:1, position:'absolute', bottom:'1.5rem', alignSelf:'center'}}>\r\n        <div>\r\n          <Controls></Controls>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_fullscreen_button() {\r\n    return (\r\n      <div className={float_controls} style={{zIndex:2, position:'absolute', top:'1.5rem', right:'1.5rem'}}>\r\n        <FullScreenButton></FullScreenButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_links() {\r\n    return (\r\n      <div className={float_controls} style={{zIndex:3, position:'absolute', top:'1.5rem', left:'1.5rem'}}>\r\n        <a className=\"btn btn-dark btn-circle btn-md\" \r\n          href=\"https://github.com/FiendChain/3D-Cellular-Automata\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          data-toggle=\"tooltip\"\r\n          data-placement=\"left\"\r\n          title=\"Github Repository\">\r\n          <i className=\"fab fa-github\"></i>\r\n        </a>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const [r,g,b] = background_colour || [255, 255, 255]; \r\n  const rgb = `rgb(${r},${g},${b})`;\r\n\r\n  return (\r\n    <div className=\"card sim-view shadow h-100\" style={{border: `1px solid ${rgb}`}}>\r\n      <Canvas store={store} canvas={props.canvas}></Canvas>\r\n      {app ? render_float_controls() : <div></div>}\r\n      {render_fullscreen_button()}\r\n      {render_links()}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport \"./Entry.css\";\r\n\r\nexport function EntryEditor(props) {\r\n  const [name, set_name] = useState(props.name || '');\r\n  const [ca_string, set_ca_string] = useState(props.ca_string || '');\r\n  let [show_actions, set_show_actions] = useState(false);\r\n  const onSubmit = props.onSubmit;\r\n  const onExit = props.onExit;\r\n  const errors = props.errors;\r\n\r\n  function on_key_down(ev) {\r\n    if(ev.keyCode === 13) {\r\n      on_submit(ev);\r\n    }\r\n  }\r\n\r\n  function on_submit(ev) {\r\n    if (ev) ev.preventDefault();\r\n    onSubmit && onSubmit(name, ca_string);\r\n  }\r\n\r\n  function on_exit() {\r\n    onExit && onExit();\r\n  }\r\n \r\n  function render_errors(str) {\r\n    let lines = String(str).split('\\n');\r\n    return (\r\n      <div className=\"invalid-feedback\">\r\n        {lines.map((line, i) => <div key={i}>{line}</div>)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const err_fmt = errors ? 'is-invalid' : '';\r\n\r\n  const tooltip = (\r\n    \"[Remain Alive]/[Become Alive]/[Total States]/[Neighbourhood]\\n\"+\r\n    \"[Remain Alive]: Range where a cell stays alive. E.g. 0-3,9\\n\"+\r\n    \"[Become Alive]: Range where a cell goes from dead to alive. E.g. 0-3,9\\n\"+\r\n    \"[Total States]: Number of states a cell goes through when dying. E.g. 10\\n\"+\r\n    \"[Neighbourhood]: Type of neighbour counting. 'M' counts all 26, and 'VN' counts 6\"\r\n  )\r\n\r\n  const form = (\r\n    <form onSubmit={on_submit} onKeyDown={on_key_down} className=\"w-75\">\r\n      <div className=\"form-group row mb-0 mt-0\">\r\n        <label className=\"col-sm-3 col-form-label py-0\">Name:</label>\r\n        <div className=\"col-sm py-0\">\r\n          <input type=\"text\" className=\"form-control form-control-sm w-100 py-0\" value={name} onChange={ev => set_name(ev.target.value)}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group row mt-0 mb-0\">\r\n        <div className=\"col-sm-3 col-form-label py-0\">\r\n        <label className=\"mr-1\">Rule:</label>\r\n        <span className=\"\" data-toggle=\"tooltip\" data-placement=\"left\" data-html={true} title={tooltip}>\r\n          <i className=\"fas fa-question-circle\"></i>\r\n        </span>\r\n\r\n        </div>\r\n        <div className=\"col-sm py-0\">\r\n          <input type=\"text\" className={`form-control form-control-sm w-100 py-0 ${err_fmt}`} id=\"ca_string\" value={ca_string} onChange={ev => set_ca_string(ev.target.value)}/>\r\n          {errors && render_errors(errors)}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const actions = (\r\n    <div \r\n      className={`actions ${!show_actions && 'fade'}`} \r\n      onMouseOver={() => set_show_actions(true)}>\r\n      <button className=\"btn btn-circle btn-sm btn-warning\"  onClick={on_exit}><i className=\"fas fa-ban\"></i></button>\r\n      <button className=\"btn btn-circle btn-sm btn-success\"  onClick={on_submit}><i className=\"fas fa-check-circle\"></i></button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div \r\n      onMouseEnter={() => set_show_actions(true)}\r\n      onMouseLeave={() => set_show_actions(false)}>\r\n      {form}\r\n      {actions}\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport \"./Entry.css\";\r\nimport { select_entry, delete_entry } from '../../actions';\r\n\r\n/**\r\n * Render entry with controls for editing, deleting and copying \r\n */\r\nexport function EntryView(props) {\r\n  let dispatch = useDispatch();\r\n  let [show_actions, set_show_actions] = useState(false);\r\n  let [copy_success, set_copy_success] = useState(false);\r\n\r\n  const {browser, index} = props;\r\n  const {name, ca_string} = props;\r\n  const selected = props.selected;\r\n  const {del, copy, edit} = props.actions;\r\n  const onEdit = props.onEdit;\r\n\r\n\r\n  const on_select = ev => {\r\n    dispatch(select_entry(browser, index));\r\n    ev.preventDefault();\r\n  }\r\n  // base actions\r\n  const on_delete = ev => {\r\n    dispatch(delete_entry(browser, index));\r\n    ev.preventDefault();\r\n  }\r\n\r\n  const on_copy = ev => {\r\n    navigator.permissions.query({name: 'clipboard-write'}).then(res => {\r\n      if (res.state === 'granted' || res.state === 'prompt') {\r\n        navigator.clipboard.writeText(ca_string)\r\n          .then(() => set_copy_success(true));\r\n      }\r\n    });\r\n    ev.preventDefault();\r\n  }\r\n\r\n  const on_edit = ev => {\r\n    ev.preventDefault();\r\n    onEdit && onEdit();\r\n  }\r\n\r\n  const render_copy_tooltip = () => (\r\n    <div className={`tooltip copy-text ${copy_success ? 'show' : 'fade'}`} role=\"tooltip\">\r\n      <div className=\"tooltip-inner\">Copied {name}!</div>\r\n    </div>\r\n  );\r\n\r\n  const render_copy_button = () => ( \r\n    <div className=\"d-inline\">\r\n      <button className=\"btn btn-circle btn-sm btn-light\"  \r\n          onClick={on_copy} onMouseLeave={() => set_copy_success(false)}>\r\n        <span className=\"icon text-gray-600\">\r\n          <i className=\"fas fa-copy\"></i>\r\n        </span>\r\n      </button>\r\n      {render_copy_tooltip()}\r\n    </div>\r\n  );\r\n\r\n\r\n  const render_actions = () => (\r\n    <div className={`actions ${!show_actions && 'fade'}`} onMouseOver={() => set_show_actions(true)}>\r\n      {copy && render_copy_button()}\r\n      {del && <button className=\"btn btn-circle btn-sm btn-danger\"  onClick={on_delete}><i className=\"fas fa-trash\"></i></button>}\r\n      {edit && <button className=\"btn btn-circle btn-sm btn-primary\"  onClick={on_edit}><i className=\"fas fa-edit\"></i></button>}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <li className={`list-group-item ${selected ? 'active' : ''}`}>\r\n      <div \r\n        onMouseEnter={() => set_show_actions(true)}\r\n        onMouseLeave={() => set_show_actions(false)}>\r\n        <div onClick={on_select}>\r\n          <div>Name: {name}</div>\r\n          <div>Rule: {ca_string}</div>\r\n        </div>\r\n        {render_actions()}\r\n      </div>\r\n    </li>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport \"./Entry.css\";\r\nimport { edit_entry } from '../../actions';\r\nimport { EntryEditor } from './EntryEditor';\r\nimport { EntryView } from './EntryView';\r\n\r\n/**\r\n * Swap between a basic view and editable form \r\n */\r\nexport function Entry(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const entry = props.entry;\r\n  const { browser, index } = props;\r\n\r\n  // for editing\r\n  let [editing, set_editing] = useState(false);\r\n  let [errors, set_errors] = useState(undefined);\r\n\r\n  let [name, set_name] = useState(entry.name);\r\n  let [ca_string, set_ca_string] = useState(entry.description);\r\n\r\n  const on_submit = (name, ca_string) => {\r\n    dispatch(edit_entry(browser, index, name, ca_string, err => {\r\n      set_errors(err);\r\n      err ? set_editing(true) : set_editing(false);\r\n      if (!err) {\r\n        set_name(name);\r\n        set_ca_string(ca_string);\r\n      }\r\n    }))\r\n  }\r\n\r\n  const on_exit = () => {\r\n    set_editing(false);\r\n    set_errors(false);\r\n  }\r\n\r\n  const render_editable_body = () => (\r\n    <li className=\"list-group-item\">\r\n      <EntryEditor name={name} ca_string={ca_string} onSubmit={on_submit} onExit={on_exit} errors={errors}></EntryEditor>\r\n    </li>\r\n  )\r\n\r\n  const render_normal_body = () => (\r\n    <EntryView\r\n      browser={browser} index={index}\r\n      name={name} ca_string={ca_string}\r\n      actions={props.actions}\r\n      selected={props.selected}\r\n      onEdit={() => set_editing(true)}></EntryView>\r\n  );\r\n\r\n  return editing ? render_editable_body() : render_normal_body();\r\n}","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { EntryEditor } from './EntryEditor';\r\nimport { create_entry } from '../../actions';\r\n\r\nexport function AddButton() {\r\n  let dispatch = useDispatch();\r\n  let [editing, set_editing] = useState(false);\r\n  let [errors, set_errors] = useState(false);\r\n\r\n  const render_add_button = () => (\r\n    <li className=\"list-group-item\" style={{textAlign:'center'}}>\r\n      <button className=\"btn btn-circle btn-md btn-secondary shadow\" onClick={() => set_editing(true)}>\r\n        <span className=\"icon text-white-600 m-0\">\r\n          <i className=\"fas fa-plus\"></i>\r\n        </span>\r\n      </button>\r\n    </li>\r\n  );\r\n\r\n  const on_submit = (name, ca_string) => {\r\n    dispatch(create_entry(name, ca_string, err => {\r\n      set_errors(err);\r\n      err ? set_editing(true) : set_editing(false);\r\n    }));\r\n  }\r\n\r\n  const on_exit = () => {\r\n    set_editing(false);\r\n    set_errors(false);\r\n  }\r\n\r\n  const render_form = () => (\r\n    <li className=\"list-group-item\">\r\n      <EntryEditor errors={errors} onSubmit={on_submit} onExit={on_exit}></EntryEditor>\r\n    </li>\r\n  );\r\n\r\n  return editing ? render_form() : render_add_button()\r\n}","import React, { useState } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { Entry } from './Entry';\r\nimport { AddButton } from './AddButton';\r\n\r\nexport function EntryBrowser() {\r\n  const selected_browser_key = useSelector(state => state.entry_browser.current_browser_key);\r\n  const selected_index = useSelector(state => state.entry_browser.selected_browser.current_index);\r\n\r\n  let [browser_key, set_browser_key] = useState(selected_browser_key);\r\n\r\n  const browsers = useSelector(state => state.entry_browser.browsers);\r\n  const entries = useSelector(state => state.entry_browser.get_entries(browser_key));\r\n\r\n  let is_user = (browser_key === 'User');\r\n\r\n  let browser_keys = [];\r\n  for (let key in browsers) {\r\n    browser_keys.push(key);\r\n  }\r\n\r\n  function render_rule_items() { \r\n    return entries.map((e, i) => {\r\n      let props = {\r\n        entry: e, \r\n        browser: browser_key, index: i,\r\n        actions: {del: is_user, copy: true, edit: is_user},\r\n        selected: i === selected_index && browser_key === selected_browser_key,\r\n      }\r\n      let index = e.id === undefined ? i : e.id;\r\n      return <Entry {...props} key={`${browser_key}_${index}`}></Entry>\r\n    });\r\n  }\r\n\r\n  const render_controls = (\r\n    <div className=\"d-flex flex-row my-0 py-0\">\r\n      <div className=\"btn-group py-0 my-0\">\r\n        {browser_keys.map((e, i) => { \r\n          let selected = e === browser_key;\r\n          return (\r\n            <button \r\n              className={`btn btn-sm ${selected ? 'btn-primary' : 'btn-outline-secondary'}`} \r\n              key={i} onClick={() => set_browser_key(e)}>{e}</button>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <div className=\"card-header py-2 d-flex flex-row align-items-center justify-content-between\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Rules</h6>\r\n        {render_controls}\r\n      </div>\r\n      <div className=\"collapse show\" id=\"collapseRulesBrowser\">\r\n        <ul className=\"list-group\">\r\n          {render_rule_items()}\r\n        </ul>\r\n        {is_user && <AddButton></AddButton>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport \"./Help.css\";\r\n\r\nexport function Help(props) {\r\n  return (\r\n    <span className=\"help-icon\" data-toggle=\"tooltip\" data-placement=\"left\" data-html={true} title={props.text}>\r\n      <i className=\"fas fa-question-circle\"></i>\r\n    </span>\r\n  )\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport \"./ColorPicker.css\";\r\nimport { ChromePicker } from 'react-color';\r\n\r\nexport function ColorPicker({color, valueChanged}) {\r\n    let [show_picker, set_show_picker] = useState(false);\r\n    let rgba = {r: color[0], g: color[1], b: color[2], a:1};\r\n\r\n    const on_click = () => set_show_picker(!show_picker);\r\n    const on_change = colour => {\r\n        let rgb = colour.rgb;\r\n        valueChanged([rgb.r, rgb.g, rgb.b]);\r\n    } \r\n\r\n    const on_close = () => set_show_picker(false);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"swatch\" onClick={on_click}>\r\n                <div className=\"color-display\" style={{background: `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`}}></div>\r\n            </div>\r\n            {show_picker && \r\n            <div className=\"popover\">\r\n                <div className=\"cover\" onClick={on_close}/>\r\n                <ChromePicker color={rgba} onChange={on_change} disableAlpha={true}></ChromePicker>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Help } from './Help';\r\nimport { ColorPicker } from './ColorPicker';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    case 'dropdown':\r\n      return DropdownView(adjustable, key, name, valueChanged);\r\n    case 'color':\r\n      return ColorView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n//   return (\r\n//     <div className='form-inline' key={key}>\r\n//       <div className=\"row w-100\">\r\n//         <div className=\"col-sm\">{name}: {slider.value.toFixed(2)}</div>\r\n//         {slider.help && <div className=\"col-sm-1 text-right\"><Help text={slider.help}></Help></div>}\r\n//       </div>\r\n//     </div>\r\n//  );\r\n\r\n return (\r\n  <div className=\"row w-100\" key={key}>\r\n    {/* <div className=\"col-sm-3\">{name}</div>\r\n    <div className=\"col-sm-2\"></div> */}\r\n\r\n    <div className=\"col-sm-5\">{name}: {slider.value.toFixed(2)}</div>\r\n    <div className=\"col-sm d-flex\">\r\n      <input \r\n        className='form-control-range my-auto' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n    {slider.help && <div className=\"col-sm-1 text-right\"><Help text={slider.help}></Help></div>}\r\n  </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className=\"row w-100\" key={key}>\r\n      <div className=\"col-sm-5\">\r\n        <label className='form-check-label'>{name}</label>\r\n      </div>\r\n      <div className=\"col-sm\">\r\n          <input \r\n            type='checkbox' className='form-check-input ml-0'\r\n            checked={toggle.value}\r\n            onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      </div>\r\n      {toggle.help && <div className=\"col-sm-1 text-right\"><Help text={toggle.help}></Help></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownView(dropdown, key, name, valueChanged) {\r\n  let onChange = ev => valueChanged(Number(ev.target.value));\r\n  return (\r\n    <div className=\"row w-100\" key={key}>\r\n      <div className=\"col-sm-5\"><label>{name} </label></div>\r\n      <div className=\"col-sm\">\r\n        <select className='custom-select custom-select-sm' value={dropdown.value} onChange={onChange}>\r\n          {dropdown.options.map((option, i) => (\r\n            <option value={i} key={`${name}_${key}_${i}`}>{option}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {dropdown.help && <div className=\"col-sm-1 text-right\"><Help text={dropdown.help}></Help></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ColorView(color, key, name, valueChange) {\r\n  return (\r\n    <div className=\"row w-100\" key={key}>\r\n      <div className=\"col-sm-5\"><label>{name}</label></div>\r\n      <div className=\"col-sm\">\r\n          <ColorPicker color={color.value} valueChanged={valueChange}></ColorPicker>\r\n      </div>\r\n      {color.help && <div className=\"col-sm-1 text-right\"><Help text={color.help}></Help></div>}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\n\r\nimport { show_border, show_render, set_background_colour, set_border_colour } from '../actions';\r\n\r\nexport function GraphicsControls() {\r\n  const dispatch = useDispatch();\r\n  const border_checkbox = useSelector(state => state.app.show_border);\r\n  const render_checkbox = useSelector(state => state.app.show_render);\r\n  const background_colour = useSelector(state => state.app.background_colour);\r\n  const border_colour = useSelector(state => state.app.border.colour);\r\n  // force redux to acknowledge when this is changed\r\n  let _ = useSelector(state => state.app.show_border.value);\r\n  _ = useSelector(state => state.app.show_render.value);\r\n  _ = useSelector(state => state.app.background_colour.value);\r\n  _ = useSelector(state => state.app.border.colour.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(border_checkbox, 0, 'Show Border', value => {\r\n        dispatch(show_border(value));\r\n      })}\r\n      {RenderAdjustableValue(border_colour, 1, 'Border Colour', value => {\r\n        dispatch(set_border_colour(value));\r\n      })}\r\n      {RenderAdjustableValue(render_checkbox, 2, 'Show Render', value => {\r\n        dispatch(show_render(value));\r\n      })}\r\n      {RenderAdjustableValue(background_colour, 3, 'Background Colour', value => {\r\n        dispatch(set_background_colour(value));\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\nimport { GraphicsControls } from './GraphicsControls';\r\nimport { update_shader_params, select_renderer } from '../actions';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type);\r\n  const _ = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  const card_body = (\r\n    <div>\r\n      <div>\r\n        {RenderAdjustableValue(renderer_type, 0, 'Renderer', value => {\r\n          dispatch(select_renderer(value));\r\n        })}\r\n      </div>\r\n      <GraphicsControls></GraphicsControls>\r\n      <hr></hr>\r\n      <ShaderSettings></ShaderSettings>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseGraphicsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseGraphicsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Graphics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseGraphicsMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const params = useSelector(state => state.shader_manager.params);\r\n  const renderer_type = useSelector(state => state.shader_manager.renderer_type.value);\r\n\r\n  return (\r\n    <div>\r\n      {Object.entries(params).map(([name, param], index) => {\r\n        return RenderAdjustableValue(param, `${renderer_type}_${index}`, name, value => {\r\n          let data = {};\r\n          data[name] = value;\r\n          dispatch(update_shader_params(data)); \r\n        })\r\n      })}\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { set_size } from '../actions';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size.value);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch(set_size(size));\r\n    event.preventDefault();\r\n  }\r\n\r\n  const size_changer_form = (\r\n    <form onSubmit={(event) => on_size_change(event)}>\r\n      <div className=\"input-group mb-0\">\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <div className=\"input-group-append\">\r\n          <button type=\"submit\" className='btn btn-primary btn-sm'>Apply</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseSizeChanger\" className=\"card-header d-block\" data-toggle=\"collapse\" aria-expanded=\"true\" aria-controls=\"collapseSizeChanger\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Size Controls</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseSizeChanger\">\r\n        <div className=\"card-body\">\r\n          {size_changer_form}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n  const texture_data_update = useSelector(state => state.stats.data.texture_data_update);\r\n  const texture_data_upload = useSelector(state => state.stats.data.texture_data_upload);\r\n  const draw_time = useSelector(state => state.stats.data.draw_time);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  const stats = (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div>Total Steps: {total_steps}</div>\r\n          <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n          <div>Draw Time (ms): {draw_time.toFixed(2)}</div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div>Tex Update (ms): {texture_data_update.toFixed(2)}</div>\r\n          <div>Tex Upload (ms): {texture_data_upload.toFixed(2)}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <a href=\"#collapseStatsMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseStatsMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Statistics</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseStatsMenu\">\r\n        <div className=\"card-body\">\r\n          {stats}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from '../util/AdjustableValueViews';\r\nimport { update_randomiser, select_randomiser } from '../actions';\r\nimport { Help } from '../util/Help';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let current_index = useSelector(state => state.randomiser.current_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function on_select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch(select_randomiser(index));\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.type}</option>);\r\n  });\r\n\r\n  const card_body = (\r\n    <div>\r\n      <div className=\"row w-100\">\r\n        <div className=\"col-sm-5\">\r\n          <label className='mr-2'>Randomiser</label>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n          <select className='custom-select custom-select-sm' value={current_index} onChange={on_select_randomiser}>\r\n            {randomiser_options}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-sm-1 text-right\"><Help text={\"Type of randomiser to use\"}></Help></div>\r\n      </div>\r\n      <hr></hr>\r\n      <SeedCrystalEditor></SeedCrystalEditor>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"card shadow mb-2\">\r\n      <a href=\"#collapseRandomiserMenu\" className=\"card-header d-block\" data-toggle=\"collapse\" role=\"button\" aria-expanded=\"true\" aria-controls=\"collapseRandomiserMenu\">\r\n        <h6 className=\"m-0 font-weight-bold text-primary\">Randomiser</h6>\r\n      </a>\r\n      <div className=\"collapse show\" id=\"collapseRandomiserMenu\">\r\n        <div className=\"card-body\">\r\n          {card_body}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.current_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    dispatch(update_randomiser(name, value));\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { create_preinit_reducer } from './ui/reducers';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/components/SimulationView/SimulationView';\r\nimport { EntryBrowser } from './ui/components/EntryBrowser/EntryBrowser';\r\nimport { ShaderMenu } from './ui/components/ShaderMenu';\r\nimport { SizeChanger } from './ui/components/SizeChanger';\r\nimport { Statistics } from './ui/components/Statistics';\r\nimport { RandomiserMenu } from './ui/components/Randomiser';\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.store = createStore(\r\n      create_preinit_reducer(),\r\n      compose(\r\n        applyMiddleware(thunk),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n      )\r\n    );\r\n\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={this.store}>\r\n        <Main canvas={this.canvas}></Main>\r\n      </Provider>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction Main(props) {\r\n  const app = useSelector(store => store.app);\r\n  const fullscreen = useSelector(store => store.gui.fullscreen);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className={`col-sm-3 overflow-auto vh-100 ${fullscreen && 'd-none'}`}>\r\n        <SizeChanger></SizeChanger>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return (\r\n      <div className={`col-sm-3 overflow-auto vh-100 ${fullscreen && 'd-none'}`}>\r\n        <EntryBrowser></EntryBrowser>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const canvas = <SimulationView canvas={props.canvas}></SimulationView>;\r\n\r\n  return (\r\n    <div className=\"vh-100 vw-100\">\r\n      <div className=\"row px-0 mx-0\">\r\n        {app && render_left_panel()}\r\n        <div className=\"col vh-100 mx-0 px-0\">{canvas}</div>\r\n        {app && render_right_panel()}\r\n      </div>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <App></App>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n// serviceWorker.register();"],"sourceRoot":""}