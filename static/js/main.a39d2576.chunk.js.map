{"version":3,"sources":["gl/Renderer.js","app/Camera.js","simulation/CellularAutomaton3D.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationRenderer.js","gl/Shader.js","gl/VertexBuffer.js","gl/IndexBuffer.js","gl/Uniform.js","shaders/border.js","gl/CubeData.js","app/BoundingBox.js","app/Border.js","shaders/fragment_shader.js","shaders/vertex_shader.js","ui/AdjustableValues.js","app/ShaderManager.js","simulation/Rule3D.js","simulation/Neighbours3D.js","app/RuleReader.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/Statistics.js","app/RandomiserManager.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/AdjustableValueViews.jsx","ui/ShaderMenu.jsx","ui/SizeChanger.jsx","ui/Statistics.jsx","ui/Randomiser.jsx","ui/BorderControls.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","CellularAutomaton3D","shape","stats","xyz_to_i_coefficients","cells","cells_buffer","neighbours","Uint8Array","should_update","Set","should_update_buffer","remove_queue","listeners","current_slice","slice_size","total_steps","listener","fill","recieve","completed_blocks","total_blocks","rule","x","y","z","i","xyz_to_i","state","is_neighbour","on_location_update","size","complete","sliced_step","next","done","res","start","performance","now","cell_count","completed","total","slice_start","i_to_xyz","count_neighbours","next_state","get_next_state","push","e","tmp","length","pop","delete","tmp_update","end","dt","frame_time","floor","Texture3D","data","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationRenderer","camera","shader_manager","rule_browser","randomiser_browser","total_cells","running","total_queued_steps","create_data","sim","listen_rerender","update_vertex_buffer","state_colour_texture","create_states_texture","radius_colour_texture","create_radius_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","offset","hue","colorsys","hsv_to_rgb","r","g","b","get_selected_entry","selected_randomiser","randomise","seed_updates","step","stop","local","items","neighbour_config","max_neighbours","min","texSubImage3D","on_render","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","useProgram","apply","src","split","map","v","join","VertexBufferObject","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","INT","layout","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","slice","FLOAT","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","BoundingBox","thickness","generate","triangle_count","push_data","shifted_index","idx","create_cube","centre","Border","renderer","adjusted_size","offset_vec","border","border_shader","push_attribute","add_vertex_buffer","add_uniform","vec4","draw","basic","point_cloud","basic_alternate","no_shading","inline_imports","create_inline_header","create_inline_footer","xyz","layer","radius","neighbour","neighbour_and_alive","Toggle","value","Slider","max","val","clamp","_value","ShaderManager","light_position","global_params","ambient_strength","diffuse_strength","specular_strength","specular_power_factor","scaling_enabled","fog_near","fog_far","sun_strength","sky_strength","brightness","create_options","set_available_shadings","create_shader","create_params","render_type","render_types","current_render_type","shadings","all_shadings","current_shading","vert_type","create_quad_data","create_triangle_data","create_cube_data","colourings","shadings_params","frag_type","current_colouring","vert_name","frag_name","vert_shader","frag_shader","vert_src","frag_src","add_uniforms","param_names","params","param","drawElementsInstanced","loc","uniform1f","uniform1i","terrain_vbo_layout","terrain_vbo","Rule3D","remain_alive","become_alive","alive_state","dead_state","alive_threshold","dead_threshold","is_alive","is_dead","pos_mod","n","m","NeighbourRules","total_neighbours","xoff","yoff","zoff","offsets","dim","off","RuleReader","string","substrings","replace","neighbour_type","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","Randomiser","key","SeedCrystal","density","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","randomiser_manager","entries","add_entry","RuleEntry","select_entry","selected_entry","randomiser","select_randomiser","entry","ca_string","description","rule_reader","Statistics","store","dispatch","setTimeout","undefined","recieve_key","recieve_batch","force_update","RandomiserManager","add_randomiser","selected_index","instance","filter","forEach","rand","Object","adjustable","select","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","show_border","show_render","select_colouring","requestAnimationFrame","loop","on_update","SimulationView","props","canvas_ref","React","createRef","rotating","zooming","mouse_start_pos","vec2","total_touches","touch_start_pos","touch_zoom_distance","touch_list","canvas","current","getContext","init_stats","rules_browser","init_app","app","reducers","combineReducers","action","toggle","browser","manager","select_render_type","select_shading","set_param","set_params","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","touches","touch","zoom_touches","calculate_touch_distance","first","second","pos_start","pos_end","on_touch_rotate","on_touch_zoom","distance","touch_a","touch_b","dist_a","dist_b","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","onTouchStart","on_touch_start","onTouchMove","on_touch_move","onTouchEnd","on_touch_end","Component","Controls","is_running","useSelector","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","render_entry","RenderAdjustableValue","valueChanged","slider","toFixed","onChange","SliderView","checked","ToggleView","ShaderMenu","render_type_options","colouring_options","shading_options","event","ShaderSettings","shader_params","SizeChanger","app_size","useState","set_x","set_y","set_z","clamped","onSubmit","preventDefault","on_size_change","progress","RandomiserMenu","randomiser_options","SeedCrystalEditor","param_options","new_params","change_param","BorderControls","createStore","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a39d2576.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 10000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape, stats) {\r\n        this.shape = shape;\r\n        this.count = shape[0] * shape[1] * shape[2];\r\n        this.stats = stats;\r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Float32Array(this.count);\r\n        this.cells_buffer = new Float32Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n        this.total_steps = 0;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n        this.total_steps = 0;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        });\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        this.should_update.clear();\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n                    let state = this.cells[i];\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (rule.is_neighbour(state)) {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: 0,\r\n            total_blocks: this.should_update.size\r\n        });\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            while (!this.current_slice.next().done) {\r\n\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        let completed = 0;\r\n        let total = this.should_update.size;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_blocks: total\r\n        });\r\n\r\n        let slice_start = performance.now();\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            completed += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-slice_start >= 16) {// aim for minimum of 60ms per update\r\n                    this.stats.recieve({completed_blocks: completed});\r\n                    // console.log(`${completed} / ${total}`);\r\n                    yield;\r\n                    slice_start = performance.now();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.total_steps += 1;\r\n\r\n        this.stats.recieve({\r\n            completed_blocks: completed,\r\n            total_steps: this.total_steps,\r\n        });\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        let dt = end-start;\r\n        // console.log(this.should_update.size, end-start);\r\n        this.stats.recieve({frame_time: dt});\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\nexport class SimulationRenderer {\r\n  constructor(gl, size, camera, shader_manager, rule_browser, randomiser_browser, stats) {\r\n    this.gl = gl;\r\n    this.camera = camera;\r\n    this.size = size;\r\n    this.stats = stats;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.randomiser_browser = randomiser_browser;\r\n\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size, stats);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n    this.radius_colour_texture = this.create_radius_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  create_radius_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 360;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states; i++) {\r\n      let offset = (i)*4;\r\n      \r\n      const hue_range = 360;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 100;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n    \r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let randomiser = this.randomiser_browser.selected_randomiser;\r\n    // this.clear();\r\n    randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let neighbour_config = rule.neighbours;\r\n    let max_neighbours = neighbour_config.max_neighbours;\r\n\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, max_neighbours)/max_neighbours * 255);\r\n    }\r\n\r\n    this.cell_data_texture.bind();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n  }\r\n\r\n  on_render() {\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.state_colour_texture.bind(1);\r\n    this.radius_colour_texture.bind(2);\r\n\r\n    this.shader_manager.on_render();\r\n    // gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n    // gl.drawElementsInstanced(gl.POINTS, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","const basic_shading = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\n// vec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\n// vec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\n// vec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\nvec3 uSkyTop =  vec3( 0.8, 0.8, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.8, 0.8, 0.8 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.0, 1.0);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nuniform float uSkyStrength;\r\nuniform float uSunStrength;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n    vec3 sky_light = mix(uSkyBottom, uSkyTop, sky_blend);\r\n    return sky_light * uSkyStrength;  \r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    vec3 sky_colour = mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n    return sky_colour * uSkyStrength;\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sky_colour = get_sky_colour(view_direction);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n    vec3 total_lighting = sky_lighting + sun_lighting + sky_colour;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst basic_shading_alternate = (point_cloud) =>\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_position = vec3(-uViewPosition.x, uViewPosition.y, -uViewPosition.z);\r\n    vec3 light_direction = normalize(light_position - vFragPos);\r\n\r\n    float diff = max(dot(normal, light_direction), 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n    \r\n    vec3 total_lighting = (ambient + diffuse + specular) * vColour.xyz;\r\n    vec4 result = vec4(total_lighting, 1.0);\r\n\r\n    fragColour = result;\r\n}`;\r\n\r\nconst create_no_shader = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\n\r\nuniform float uBrightness;\r\n\r\nin vec4 vColour;\r\n${point_cloud ? '' : 'in vec3 vNormal;'}\r\n${point_cloud ? '' : 'in vec3 vFragPos;'}\r\n\r\nout vec4 fragColour;\r\n\r\nvoid main() {\r\n    fragColour = vec4(vColour.xyz * uBrightness, vColour.a);\r\n}`);\r\n\r\nexport const fragment_shader_src = {\r\n    basic: {create: basic_shading, point_cloud: false},\r\n    basic_alternate: {create: basic_shading_alternate, point_cloud: false},\r\n    no_shading: {create: create_no_shader, point_cloud: true}\r\n}","const calculate_offset = (\r\n`vec3 calculate_offset(int index) {\r\n    float remain = float(index);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain-y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}`);\r\n\r\nconst calculate_point_cloud = (\r\n`mat3 Rx(float a) {\r\n    return mat3(\r\n        1., 0., 0.,\r\n        0., cos(a), sin(a),\r\n        0., -sin(a), cos(a)\r\n    );\r\n}\r\n\r\nmat3 Ry(float a) {\r\n    return mat3(\r\n        cos(a), 0., -sin(a),\r\n        0, 1., 0.,\r\n        sin(a), 0., cos(a)\r\n    );\r\n}\r\n\r\nvec3 calculate_point_cloud(const vec3 pos, const vec3 offset) {\r\n    vec3 point_position = offset+uCenter-(uGridSize/2.0);\r\n    vec3 view_direction = uViewPosition-point_position;\r\n    vec2 xz = vec2(view_direction.x, view_direction.z);\r\n    float r = length(xz);\r\n    float ay = atan(view_direction.x, view_direction.z);\r\n    float ax = -atan(view_direction.y, r);\r\n    mat3 R = Ry(ay) * Rx(ax);\r\n    return R*(pos-uCenter) + uCenter + offset; \r\n}`\r\n);\r\n\r\nconst get_cell_data = (\r\n`\r\nvec4 get_cell_data(vec3 offset) {\r\n    vec3 vol_tex_coords = offset / uGridSize;\r\n    vec4 cell = texture(uStateTexture, vol_tex_coords);\r\n    return cell;\r\n}\r\n`\r\n);\r\n\r\nconst calculate_scaling = (\r\n`\r\nvec3 scale_position(float scale, vec3 pos) {\r\n    float K = max(scale, float(1-uScalingEnabled));\r\n    vec3 delta = pos-uCenter;\r\n    return uCenter + (K*delta);\r\n}\r\n`\r\n);\r\n\r\nconst inline_imports = (\r\n`\r\n${calculate_offset}\r\n${calculate_scaling}\r\n${calculate_point_cloud}\r\n${get_cell_data}\r\n`\r\n);\r\n\r\nconst create_inline_snippet = (point_cloud) => (\r\n`\r\n// get basic info about cell\r\nvec3 offset = calculate_offset(gl_InstanceID);\r\nvec4 cell = get_cell_data(offset);\r\nfloat state = cell[0];\r\nfloat neighbours = cell[1];\r\nvec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n`\r\n);\r\n\r\nconst create_inline_header = (point_cloud) => (\r\n`#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp sampler3D;\r\nprecision highp sampler2D;\r\nprecision highp int;\r\n\r\nin vec3 position;\r\n${point_cloud ? '' : 'in vec3 normal;'}\r\n\r\n// MVP\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uViewPosition;\r\nuniform vec3 uGridSize;\r\n// params\r\nuniform int uScalingEnabled;\r\n// texturing\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler2D uRadiusColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 uCenter = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\n${point_cloud ? '' : 'out vec3 vNormal;'}\r\n${point_cloud ? '' : 'out vec3 vFragPos;'}\r\n\r\n${inline_imports}\r\n`\r\n)\r\n\r\nconst create_inline_footer = (point_cloud) => (\r\n`\r\n${point_cloud ? \r\n    'vPosition = calculate_point_cloud(vPosition, offset);' : \r\n    'vPosition = vPosition + offset;'}\r\n\r\n// pass through data\r\nvPosition *= vColour.a;\r\nmat4 MVP = uProjection * uView * uModel;\r\n${point_cloud ? '' : 'vNormal = normal;'}\r\n${point_cloud ? '' : 'vFragPos = vec3(uModel * vec4(vPosition, 1.0));'}\r\ngl_Position = MVP * vec4(vPosition, 1.0);\r\n`\r\n);\r\n\r\nconst create_state_shader = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = state_colour;\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_xyz_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 xyz_colour = offset / uGridSize;\r\n    vColour = vec4(xyz_colour, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}\r\n`);\r\n\r\nconst create_layer_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 vPosition = scale_position(state, position);\r\n    vec3 distance = offset - (uGridSize/2.0);\r\n    float dist = length(distance/10.0);\r\n    dist = mod(dist, 1.0);\r\n    vec4 dist_colour = texture(uRadiusColourTexture, vec2(dist, 0.0));\r\n    vColour = vec4(dist_colour.xyz, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_radius_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec3 xyz_center = uGridSize/2.0;\r\n    vec3 distance = offset-xyz_center;\r\n    float radius = length(distance/xyz_center);\r\n    float total_repeats = 1.0;\r\n    radius = clamp(radius, 0.0, 1.0) * total_repeats;\r\n    vec4 radius_colour = texture(uRadiusColourTexture, vec2(radius, 0.0));\r\n\r\n    vec3 vPosition = scale_position(state, position);\r\n    vColour = vec4(radius_colour.xyz, state_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = neighbour_colour;\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\nconst create_neighbour_and_alive_shading = (point_cloud) => (\r\n`${create_inline_header(point_cloud)}\r\nvoid main() {\r\n    ${create_inline_snippet(point_cloud)}\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0.0));\r\n\r\n    vec3 vPosition = scale_position(neighbours, position);\r\n    vColour = vec4(neighbour_colour.xyz, state_colour.a*neighbour_colour.a);\r\n    ${create_inline_footer(point_cloud)}\r\n}`);\r\n\r\n\r\nexport const vertex_shader_src = {\r\n    state: create_state_shader,\r\n    xyz: create_xyz_shading,\r\n    layer: create_layer_shading,\r\n    radius: create_radius_shading,\r\n    neighbour: create_neighbour_shading,\r\n    neighbour_and_alive: create_neighbour_and_alive_shading,\r\n};","export class Toggle {\r\n  constructor(value) {\r\n    this.type = 'toggle';\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class Slider {\r\n  constructor(min, max, value) {\r\n    this.type = 'slider';\r\n    this.min = min;\r\n    this.max = max;\r\n    this.value = value;\r\n  }\r\n\r\n  set value(val) {\r\n    val = this.clamp(val);\r\n    this._value = val;\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  clamp(val) {\r\n    if (val < this.min) {\r\n      val = this.min;\r\n    }\r\n    if (val > this.max) {\r\n      val = this.max;\r\n    }\r\n    return val;\r\n  }\r\n}","import { Shader } from '../gl/Shader';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../gl/Uniform';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport { cube } from '../gl/CubeData';\r\n\r\nimport { fragment_shader_src } from '../shaders/fragment_shader';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { Slider, Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.total_cells = 0;\r\n    this.light_position = vec3.create();\r\n    this.camera = camera;\r\n\r\n    this.global_params = {\r\n      ambient_strength: new Slider(0, 1, 0.4),\r\n      diffuse_strength: new Slider(0, 1, 0.95),\r\n      specular_strength: new Slider(0, 1, 0.6),\r\n      specular_power_factor: new Slider(0, 128.0, 4.0),\r\n      scaling_enabled: new Toggle(0),\r\n      fog_near: new Slider(0, 1, 0),\r\n      fog_far: new Slider(0, 1, 0),\r\n      sun_strength: new Slider(0, 1, 0.95),\r\n      sky_strength: new Slider(0, 1, 0.25),\r\n      brightness: new Slider(0, 1, 0.9),\r\n    };\r\n\r\n    this.create_options();\r\n    this.set_available_shadings();\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  set_available_shadings() {\r\n    let render_type = this.render_types[this.current_render_type];\r\n    let shadings = [];\r\n    for (let i = 0; i < this.all_shadings.length; i++) {\r\n      let name = this.all_shadings[i];\r\n      let shader = fragment_shader_src[name];\r\n      if (render_type.point_cloud && !shader.point_cloud) {\r\n        continue;\r\n      }\r\n      shadings.push(name);\r\n    }\r\n    this.shadings = shadings;\r\n    this.current_shading = 0;\r\n  }\r\n\r\n  create_options() {\r\n    this.render_types = [\r\n      create_quad_data(this.gl),\r\n      create_triangle_data(this.gl),\r\n      create_cube_data(this.gl),\r\n    ];\r\n\r\n    this.colourings = [];\r\n    this.all_shadings = [];\r\n    this.shadings = [];\r\n\r\n    this.shadings_params = {\r\n      basic: ['sun_strength', 'sky_strength', 'fog_near', 'fog_far', 'scaling_enabled'],\r\n      basic_alternate: ['ambient_strength', 'diffuse_strength', 'specular_strength', 'specular_power_factor', 'scaling_enabled'],\r\n      no_shading: ['brightness', 'scaling_enabled']\r\n    };\r\n\r\n    for (let vert_type in vertex_shader_src) {\r\n      this.colourings.push(vert_type);\r\n    }\r\n    for (let frag_type in fragment_shader_src) {\r\n      this.all_shadings.push(frag_type);\r\n    }\r\n\r\n    this.current_render_type = 0;\r\n    this.current_colouring = 0;\r\n    this.current_shading = 0;\r\n  }\r\n\r\n  create_shader() {\r\n    let vert_name = this.colourings[this.current_colouring];\r\n    let frag_name = this.shadings[this.current_shading];\r\n    let render_type = this.render_types[this.current_render_type];\r\n\r\n    let vert_shader = vertex_shader_src[vert_name];\r\n    let frag_shader = fragment_shader_src[frag_name];\r\n\r\n    // point cloud only works with no shading\r\n    if (render_type.point_cloud && !frag_shader.point_cloud) {\r\n      for (let index = 0; index < this.shadings.length; index++) {\r\n        let name = this.shadings[index];\r\n        let shader = fragment_shader_src[name];\r\n        if (shader.point_cloud) {\r\n          this.current_shading = index;\r\n          return this.create_shader();\r\n        }\r\n      }\r\n    }\r\n\r\n    let vert_src = vert_shader(render_type.point_cloud);\r\n    let frag_src = frag_shader.create(render_type.point_cloud);\r\n\r\n    this.shader = new Shader(this.gl, vert_src, frag_src);\r\n    this.add_uniforms(this.shader);\r\n  }\r\n\r\n  create_params() {\r\n    let name = this.shadings[this.current_shading];\r\n    let param_names = this.shadings_params[name];\r\n    let params = {};\r\n    for (let name of param_names) {\r\n      let param = this.global_params[name];\r\n      params[name] = param;\r\n    }\r\n    this.params = params;\r\n  }\r\n\r\n  set_size(size) {\r\n    for (let i = 0; i < 3; i++) {\r\n      this.size[i] = size[i];\r\n    }\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    vec3.scale(this.light_position, this.size, 2.5);\r\n  }\r\n\r\n  set_param(name, value) {\r\n    let param = this.params[name];\r\n    param.value = value;\r\n    this.params = {...this.params};\r\n  }\r\n\r\n  select_render_type(index) {\r\n    this.current_render_type = index;\r\n    this.set_available_shadings();\r\n    this.create_shader();\r\n    this.create_params();\r\n  }  \r\n\r\n  select_colouring(index) {\r\n    this.current_colouring = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  select_shading(index) {\r\n    this.current_shading = index;\r\n    this.create_shader();\r\n    this.create_params();\r\n  }\r\n\r\n  bind() {\r\n    this.shader.bind();\r\n    let render_type = this.render_types[this.current_render_type];\r\n    render_type.vao.bind();\r\n    render_type.index_buffer.bind();\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    let render_type = this.render_types[this.current_render_type];\r\n    gl.drawElementsInstanced(gl.TRIANGLES, render_type.index_buffer.count, gl.UNSIGNED_INT, render_type.index_data, this.total_cells); \r\n  }\r\n\r\n  add_uniforms(shader) {\r\n    let gl = this.gl;\r\n\r\n    shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    shader.add_uniform(\"uGridSize\", new UniformVec3f(gl, this.size));\r\n    shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.camera.view_position));\r\n\r\n    // lighting\r\n    shader.add_uniform('light.position', new UniformVec3f(gl, this.light_position));\r\n    shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n    // // lighting params\r\n    shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.ambient_strength.value)));\r\n    shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.diffuse_strength.value)));\r\n    shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_strength.value)));\r\n    shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, this.global_params.specular_power_factor.value)));\r\n    shader.add_uniform(\"uBrightness\", new Uniform(loc => gl.uniform1f(loc, this.global_params.brightness.value)));\r\n    // add texture id\r\n    shader.add_uniform(\"uStateTexture\",         new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uStateColourTexture\",   new Uniform(loc => gl.uniform1i(loc, 1)));\r\n    shader.add_uniform(\"uRadiusColourTexture\",  new Uniform(loc => gl.uniform1i(loc, 2)));\r\n    // post processing\r\n    shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, this.global_params.scaling_enabled.value)));\r\n    shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_near.value)));\r\n    shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, this.global_params.fog_far.value)));\r\n    shader.add_uniform(\"uSunStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sun_strength.value)));\r\n    shader.add_uniform(\"uSkyStrength\", new Uniform(loc => gl.uniform1f(loc, this.global_params.sky_strength.value)));\r\n  }\r\n}\r\n\r\nconst create_cube_data = (gl) => {\r\n  let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n  terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n  terrain_vbo_layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n  let index_data = cube.index_data;\r\n\r\n  let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n  return {\r\n    name: 'cube',\r\n    vao: vao,\r\n    index_buffer: index_buffer,\r\n    index_data: index_data,\r\n    point_cloud: false\r\n  };\r\n}\r\n\r\nconst create_quad_data = (gl) => {\r\n  let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n  terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = new Float32Array([0, 1, 0.5,\r\n                                      1, 1, 0.5,\r\n                                      0, 0, 0.5,\r\n                                      1, 0, 0.5]);\r\n  let index_data = new Uint32Array([2, 1, 0, 2, 3, 1]);\r\n\r\n  let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n  return {\r\n    name: 'quad point cloud',\r\n    vao: vao,\r\n    index_buffer: index_buffer,\r\n    index_data: index_data,\r\n    point_cloud: true\r\n  };\r\n}\r\n\r\nconst create_triangle_data = (gl) => {\r\n  let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n  terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n\r\n  let vertex_data = new Float32Array([-0.5, -0.5, 0.5,\r\n                                      1.5, -0.5, 0.5,\r\n                                      0.5, -1.5, 0.5]);\r\n  let index_data = new Uint32Array([2, 1, 0]);\r\n\r\n  let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n  let index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n  let vao = new VertexArrayObject(gl);\r\n  vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n  return {\r\n    name: 'triangle point cloud',\r\n    vao: vao,\r\n    index_buffer: index_buffer,\r\n    index_data: index_data,\r\n    point_cloud: true\r\n  };\r\n}","export class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        // this.alive_state = this.total_states-1;\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n        this.delta = (this.alive_state-this.dead_state)/(this.total_states-1);\r\n\r\n        this.alive_threshold = this.alive_state-this.delta/2.0;\r\n        this.dead_threshold = this.delta/2.0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // alive to dead\r\n        if (this.is_alive(state)) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-this.delta;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (this.is_dead(state)) {\r\n            if (this.become_alive(neighbours)) {\r\n                return this.alive_state;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // refractory\r\n        return state-this.delta;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n\r\n    is_alive(state) {\r\n        return (state > this.alive_threshold);\r\n    }\r\n\r\n    is_dead(state) {\r\n        return (state < this.dead_threshold);\r\n    }\r\n}","export class MooreNeighbour {\r\n    constructor() {\r\n        this.max_neighbours = 26;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n        this.max_neighbours = 6;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nexport class RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","import  { Slider } from '../ui/AdjustableValues';\r\n\r\nclass Randomiser {\r\n    constructor(params={}) {\r\n        this.params = params;\r\n    }\r\n\r\n    update(params) {\r\n        for (let key in params) {\r\n            let value = params[key];\r\n            this.params[key].value = value;\r\n        }\r\n\r\n        this.params = {...this.params};\r\n    }\r\n}\r\n\r\nexport class SeedCrystal extends Randomiser {\r\n    constructor(density=0.2, radius=0.1) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 0.5, radius)\r\n        });\r\n        this.type = 'Seed Crystal';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density = this.params.density.value; \r\n\r\n        let [lower, upper] = [\r\n            Math.max(0.5-radius, 0.0),  \r\n            Math.min(0.5+radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute extends Randomiser {\r\n    constructor(density=0.2, radius=3) {\r\n        super({\r\n            density: new Slider(0, 1, density), \r\n            radius: new Slider(0, 100, radius)\r\n        });\r\n        this.type = 'Seed Crystal Absolute';\r\n        this.alive_state = 1.0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        const radius = this.params.radius.value;\r\n        const density =  this.params.density.value;\r\n\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-radius, 0), Math.min(X+radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-radius, 0), Math.min(Y+radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-radius, 0), Math.min(Z+radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { RuleReader } from './RuleReader';\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor(randomiser_manager) {\r\n    this.entries = [];\r\n    this.randomiser_manager = randomiser_manager;\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 2',\r\n        '1-3/1-3/5/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystalAbsolute(0.2, 5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.select_entry(0);\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n    let randomiser = this.get_selected_entry().randomiser;\r\n    this.randomiser_manager.select_randomiser(randomiser);\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\n","export class Statistics {\r\n    constructor(store) {\r\n        this.store = store;\r\n        this.data = {\r\n            completed_blocks: 0,\r\n            frame_time: 0,\r\n            total_blocks: 0,\r\n            total_steps: 0,\r\n        };\r\n    }\r\n\r\n    force_update() {\r\n        this.store.dispatch((dispatch) => {\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: 'stats.update',\r\n                    value: this\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    recieve(key, value=undefined) {\r\n        if (value !== undefined) {\r\n            this.recieve_key(key, value);\r\n        } else {\r\n            this.recieve_batch(key);\r\n        }\r\n    }\r\n\r\n    recieve_key(key, value) {\r\n        this.data[key] = value;\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n    recieve_batch(data) {\r\n        for (let key in data) {\r\n            let value = data[key];\r\n            this.data[key] = value;\r\n        }\r\n        this.data = {...this.data};\r\n        this.force_update();\r\n    }\r\n\r\n}","import { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\n\r\nexport class RandomiserManager {\r\n    constructor() {\r\n        this.entries = [];\r\n\r\n        this.add_randomiser(new SeedCrystal());\r\n        this.add_randomiser(new SeedCrystalAbsolute());\r\n\r\n        this.selected_index = 0;\r\n    }\r\n\r\n    add_randomiser(randomiser) {\r\n        this.entries.push({\r\n            name: randomiser.type,\r\n            instance: randomiser\r\n        });\r\n    }\r\n\r\n    select_randomiser(randomiser) {\r\n        let entries = this.entries.map((v, i) => [v, i]);\r\n        let matching_entries = entries.filter(([entry, i]) => entry.instance.type === randomiser.type);\r\n        let other_rands = matching_entries.map(([entry, i]) => [entry.instance, i]);\r\n        other_rands.forEach(([rand, i]) => {\r\n            let params = {};\r\n            Object.entries(randomiser.params).forEach(([key, adjustable]) => {\r\n                params[key] = adjustable.value;\r\n            });\r\n            rand.update(params);\r\n            this.select(i);\r\n        });\r\n    }\r\n\r\n    select(index) {\r\n        this.selected_index = index;\r\n    }\r\n\r\n    set_params(params) {\r\n        let randomiser = this.selected_randomiser;\r\n        randomiser.update(params);\r\n    }\r\n\r\n    get selected_randomiser() {\r\n        return this.entries[this.selected_index].instance;\r\n    } \r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationRenderer } from './SimulationRenderer';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\nimport { Statistics } from './Statistics';\r\nimport { RandomiserManager } from './RandomiserManager';\r\nimport { Toggle } from '../ui/AdjustableValues';\r\n\r\nexport class App {\r\n  constructor(gl, store) {\r\n    this.gl = gl;\r\n    this.store = store;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n    this.randomiser_manager = new RandomiserManager();\r\n    this.rule_browser = new RuleBrowser(this.randomiser_manager);\r\n    this.stats = new Statistics(this.store);\r\n\r\n    let x = 100;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n\r\n    this.show_border = new Toggle(true);\r\n    this.show_render = new Toggle(true);\r\n\r\n    // select amoeba with layer colouring\r\n    this.shader_manager.select_colouring(2);\r\n    this.rule_browser.select_entry(2);\r\n    this.sim.randomise();\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationRenderer(gl, this.size, this.camera, this.shader_manager, this.rule_browser, this.randomiser_manager, this.stats);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    // this.camera.view_position[2] = -this.size[2] * 2.5;\r\n    vec3.scale(this.camera.view_position, this.size, 0.5);\r\n    vec3.add(this.camera.view_position, this.camera.view_position, vec3.fromValues(20, 20, 20));\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    if (this.show_border.value) {\r\n      this.border.on_render();\r\n    }\r\n    if (this.show_render.value) {\r\n      this.sim.on_render();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer, stats_reducer, randomiser_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n\r\n    this.total_touches = 0;\r\n    this.touch_start_pos = vec2.create();\r\n    this.touch_zoom_distance = 0;\r\n    this.touch_list = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl, store);\r\n    let reducers = combineReducers({\r\n      app: app_reducer(app),\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      stats: stats_reducer(app.stats),\r\n      randomiser: randomiser_reducer(app.randomiser_manager),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    // ev.preventDefault();\r\n    // find a way to stop scrolling\r\n  }\r\n\r\n  on_touch_start(ev) {\r\n    let touches = ev.touches;\r\n    this.touch_list.push(...touches);\r\n    this.total_touches += touches.length;\r\n    if (this.total_touches === 1) {\r\n      this.rotating = true;\r\n      this.zooming = false;\r\n      let touch = this.touch_list[this.touch_list.length-1];\r\n      this.touch_start_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    } else if (this.total_touches >= 2) {\r\n      this.zooming = true;\r\n      this.rotating = false;\r\n      let zoom_touches = this.touch_list.slice(this.touch_list.length-2, this.touch_list.length);\r\n      this.touch_zoom_distance = this.calculate_touch_distance(...zoom_touches);\r\n    }\r\n  }\r\n\r\n  calculate_touch_distance(first, second) {\r\n    let pos_start = vec2.fromValues(first.clientX, first.clientY);\r\n    let pos_end = vec2.fromValues(second.clientX, second.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, pos_start, pos_end);\r\n    let length = vec2.length(delta);\r\n    return length;\r\n  }\r\n\r\n  on_touch_end(ev) {\r\n    this.rotating = false;\r\n    this.zooming = false;\r\n    this.touch_list = [];\r\n    this.total_touches = 0;\r\n    // this.touch_list.pop();\r\n    // this.total_touches -= 1;\r\n    if (this.total_touches < 2) {\r\n      this.zooming = false;\r\n    } \r\n    if (this.total_touches < 1) {\r\n      this.rotating = false;\r\n    }\r\n  }\r\n\r\n  on_touch_move(ev) {\r\n    if (!this.rotating && !this.zooming) return;\r\n    if (this.rotating) {\r\n      this.on_touch_rotate(ev);\r\n    } else if (this.zooming) {\r\n      this.on_touch_zoom(ev);\r\n    }\r\n  }\r\n\r\n  on_touch_rotate(ev) {\r\n    let touches = ev.touches;\r\n    if (touches.length < 1) return;\r\n\r\n    let touch = ev.touches[0];\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(touch.clientX, touch.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.touch_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.touch_start_pos = curr_pos;\r\n  }\r\n\r\n  on_touch_zoom(ev) {\r\n    let touches = ev.touches;\r\n    let distance = this.touch_zoom_distance;\r\n    if (touches.length >= 2) {\r\n      distance = this.calculate_touch_distance(touches[0], touches[1]);\r\n    } else {\r\n      // find nearest\r\n      let touch = touches[0];\r\n      let touch_a = this.touch_list[this.touch_list.length-2];\r\n      let touch_b = this.touch_list[this.touch_list.length-1];\r\n      let dist_a = this.calculate_touch_distance(touch_a, touch);\r\n      let dist_b = this.calculate_touch_distance(touch_b, touch);\r\n\r\n      // update touch a\r\n      if (dist_a < dist_b) {\r\n        this.touch_list[this.touch_list.length-2] = touch;\r\n        distance = dist_b;\r\n      } else {\r\n        this.touch_list[this.touch_list.length-1] = touch;\r\n        distance = dist_a;\r\n      }\r\n      \r\n    }\r\n    let scale = distance / this.touch_zoom_distance;\r\n    this.touch_zoom_distance = distance;\r\n    this.camera.zoom(1.0-scale);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={800}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}\r\n        onTouchStart={ev => this.on_touch_start(ev)}\r\n        onTouchMove={ev => this.on_touch_move(ev)}\r\n        onTouchEnd={ev => this.on_touch_end(ev)}></canvas>\r\n    );\r\n  }\r\n}","export function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                app.set_size(action.value);\r\n                break;\r\n            case 'app.show_border':\r\n                app.show_border.value = action.value;\r\n                break;\r\n            case 'app.show_render':\r\n                app.show_render.value = action.value;\r\n                break;\r\n            default: \r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function stats_reducer(init_stats) {\r\n    const reducer = (stats=init_stats, action) => {\r\n        switch (action.type) {\r\n            case 'stats.update':\r\n                return action.value;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select_render_type':\r\n                manager.select_render_type(action.value);\r\n                break;\r\n            case 'shader.select_colouring':\r\n                manager.select_colouring(action.value);\r\n                break;\r\n            case 'shader.select_shading':\r\n                manager.select_shading(action.value);\r\n                break;\r\n            case 'shader.set_param':\r\n                manager.set_param(action.name, action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}\r\n\r\nexport function randomiser_reducer(randomiser_manager) {\r\n    const reducer = (manager=randomiser_manager, action) => {\r\n        switch (action.type) {\r\n            case 'randomiser.select':\r\n                manager.select(action.value);\r\n                break;\r\n            case 'randomiser.update':\r\n                manager.set_params(action.value);\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        return manager;\r\n    }\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Step</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function RenderAdjustableValue(adjustable, key, name, valueChanged) {\r\n  let type = adjustable.type;\r\n  switch (type) {\r\n    case 'slider':\r\n      return SliderView(adjustable, key, name, valueChanged);\r\n    case 'toggle':\r\n      return ToggleView(adjustable, key, name, valueChanged);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction SliderView(slider, key, name, valueChanged) {\r\n  let step = (slider.max-slider.min)/100.0;\r\n  return (\r\n    <div className='form-inline' key={key}>\r\n      <label>{name}: {slider.value.toFixed(2)}</label>\r\n      <input \r\n        className='form-control-range' type='range' \r\n        min={slider.min} max={slider.max} value={slider.value} step={step}\r\n        onChange={ev => valueChanged(Number(ev.target.value))}></input> \r\n    </div>\r\n );\r\n}\r\n\r\nfunction ToggleView(toggle, key, name, valueChanged) {\r\n  return (\r\n    <div className='form-check' key={key}>\r\n      <input \r\n        type='checkbox' className='form-check-input'\r\n        checked={toggle.value}\r\n        onChange={ev => valueChanged(ev.target.checked)}></input>\r\n      <label className='form-check-label'>{name}</label>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function ShaderMenu() {\r\n  const dispatch = useDispatch();\r\n\r\n  const render_types = useSelector(state => state.shader_manager.render_types);\r\n  const current_render_type = useSelector(state => state.shader_manager.current_render_type);\r\n  const colourings = useSelector(state => state.shader_manager.colourings);\r\n  const current_colouring = useSelector(state => state.shader_manager.current_colouring);\r\n  const shadings = useSelector(state => state.shader_manager.shadings);\r\n  const current_shading = useSelector(state => state.shader_manager.current_shading);\r\n\r\n  function select_render_type(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_render_type', value:index});\r\n  }\r\n\r\n  function select_colouring(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_colouring', value:index});\r\n  }\r\n\r\n  function select_shading(event) {\r\n    let index = event.target.value;\r\n    dispatch({type:'shader.select_shading', value:index});\r\n  }\r\n\r\n  const render_type_options = render_types.map((render_type, i) => {\r\n    return <option value={i} key={`render_type_${i}`}>{render_type.name}</option>\r\n  })\r\n\r\n  const colouring_options = colourings.map((name, i) => {\r\n    return <option value={i} key={`colouring_${i}`}>{name}</option>\r\n  })\r\n\r\n  const shading_options = shadings.map((name, i) => {\r\n    return <option value={i} key={`shading_${i}`}>{name}</option>\r\n  })\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className='card-header'>Shaders</div>\r\n      <div className=\"card-body\">\r\n        <form className='form-inline'>\r\n          <div className='form-group'>\r\n            <label className='mr-2'>Colouring </label>\r\n            <select className='custom-select custom-select-sm' value={current_colouring} onChange={select_colouring}>\r\n              {colouring_options}\r\n            </select>\r\n          </div>\r\n        </form>\r\n        <form className='form-inline'>\r\n          <div className='form-group'>\r\n            <label className='mr-2'>Shading </label>\r\n            <select className='custom-select custom-select-sm' value={current_shading} onChange={select_shading}>\r\n              {shading_options}\r\n            </select>\r\n          </div>\r\n        </form>\r\n        <form className='form-inline'>\r\n          <div className='form-group'>\r\n            <label className='mr-2'>Render Type </label>\r\n            <select className='custom-select custom-select-sm' value={current_render_type} onChange={select_render_type}>\r\n              {render_type_options}\r\n            </select>\r\n          </div>\r\n        </form>\r\n        <hr></hr>\r\n        <ShaderSettings></ShaderSettings>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ShaderSettings() {\r\n  const dispatch = useDispatch();\r\n  const shader_params = useSelector(state => state.shader_manager.params);\r\n\r\n  function set_param(name, value) {\r\n    let action = {type:'shader.set_param', name:name, value:value};\r\n    dispatch(action);\r\n  }\r\n\r\n  const params = Object\r\n    .entries(shader_params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        set_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>{params}</form>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const app_size = useSelector(state => state.app.size);\r\n  let [x, set_x] = useState(app_size[0]);\r\n  let [y, set_y] = useState(app_size[1]);\r\n  let [z, set_z] = useState(app_size[2]);\r\n\r\n  const max_size = 1000;\r\n  const min_size = 1;\r\n\r\n  function clamp(val) {\r\n    let clamped = Number(val);\r\n    clamped = Math.max(clamped, min_size);\r\n    clamped = Math.min(clamped, max_size);\r\n    return clamped;\r\n  }\r\n\r\n  function on_size_change(event) {\r\n    let X = clamp(x);\r\n    let Y = clamp(y);\r\n    let Z = clamp(z);\r\n    set_x(X);\r\n    set_y(Y);\r\n    set_z(Z);\r\n    let size = vec3.fromValues(X, Y, Z);\r\n    dispatch({type: 'app.set_size', value: size});\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <form className='form-group' onSubmit={(event) => on_size_change(event)}>\r\n        <input type=\"number\" value={x} max={max_size} min={min_size} onChange={ev => set_x(ev.target.value)}></input> \r\n        <input type=\"number\" value={y} max={max_size} min={min_size} onChange={ev => set_y(ev.target.value)}></input> \r\n        <input type=\"number\" value={z} max={max_size} min={min_size} onChange={ev => set_z(ev.target.value)}></input> \r\n        <button type=\"submit\" className='btn btn-primary'>Apply</button>\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function Statistics() {\r\n  const completed_blocks = useSelector(state => state.stats.data.completed_blocks);\r\n  const total_blocks = useSelector(state => state.stats.data.total_blocks);\r\n  const frame_time = useSelector(state => state.stats.data.frame_time);\r\n  const total_steps = useSelector(state => state.stats.data.total_steps);\r\n\r\n  let progress = 0;\r\n  if (total_blocks > 0) {\r\n    progress = completed_blocks/total_blocks * 100;\r\n  }\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Statistics</div>\r\n      <div className='card-body'>\r\n        <div>Total Steps: {total_steps}</div>\r\n        <div>Progress: {completed_blocks}/{total_blocks} ({progress.toFixed(2)}%)</div>\r\n        <div>Frame Time (ms): {frame_time.toFixed(2)}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function RandomiserMenu() {\r\n  const dispatch = useDispatch();\r\n  let selected_index = useSelector(state => state.randomiser.selected_index);\r\n  let entries = useSelector(state => state.randomiser.entries);\r\n\r\n  function select_randomiser(event) {\r\n    let index = event.target.value;\r\n    dispatch({type: 'randomiser.select', value: index});\r\n  }\r\n\r\n  const randomiser_options = entries.map((e, i) => {\r\n    return (<option value={i} key={i}>{e.name}</option>);\r\n  })\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-header'>Randomiser</div>\r\n      <div className='card-body'>\r\n        <form>\r\n          <div className='form-inline'>\r\n            <label className='mr-2'>Randomiser</label>\r\n            <select className='custom-select custom-select-sm' value={selected_index} onChange={select_randomiser}>\r\n              {randomiser_options}\r\n            </select>\r\n          </div>\r\n       </form>\r\n       <hr></hr>\r\n        <SeedCrystalEditor></SeedCrystalEditor>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SeedCrystalEditor() {\r\n  const dispatch = useDispatch();\r\n  let params = useSelector(state => state.randomiser.selected_randomiser.params);\r\n\r\n  function change_param(name, value) {\r\n    let new_params = {};\r\n    new_params[name] = Number(value);\r\n    dispatch({\r\n      type: 'randomiser.update', \r\n      value: new_params\r\n    });\r\n  }\r\n\r\n  let param_options = Object\r\n    .entries(params)\r\n    .map(([name, param], index) => {\r\n      return RenderAdjustableValue(param, index, name, value => {\r\n        change_param(name, value);\r\n      })\r\n    });\r\n\r\n  return (\r\n    <form>\r\n      {param_options}\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RenderAdjustableValue } from './AdjustableValueViews';\r\n\r\nexport function BorderControls() {\r\n  const dispatch = useDispatch();\r\n  const show_border = useSelector(state => state.app.show_border);\r\n  const show_render = useSelector(state => state.app.show_render);\r\n  // force redux to acknowledge when this is changed\r\n  const is_show_border = useSelector(state => state.app.show_border.value);\r\n  const is_show_render = useSelector(state => state.app.show_render.value);\r\n\r\n  return (\r\n    <div>\r\n      {RenderAdjustableValue(show_border, 0, 'Show Border', value => {\r\n        dispatch({type: 'app.show_border', value: value});\r\n      })}\r\n      {RenderAdjustableValue(show_render, 1, 'Show Render', value => {\r\n        dispatch({type: 'app.show_render', value: value});\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\nimport { SizeChanger } from './ui/SizeChanger';\r\nimport { Statistics } from './ui/Statistics';\r\nimport { RandomiserMenu } from './ui/Randomiser';\r\nimport { BorderControls } from './ui/BorderControls';\r\n\r\nexport const store = createStore(\r\n  () => {}, \r\n  compose(\r\n    applyMiddleware(thunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n  )\r\n);\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n  \r\n  function render_left_panel() {\r\n    return (\r\n      <div className='col-sm'>\r\n        <Controls></Controls>\r\n        <SizeChanger></SizeChanger>\r\n        <BorderControls></BorderControls>\r\n        <ShaderMenu></ShaderMenu>\r\n        <RandomiserMenu></RandomiserMenu>\r\n        <Statistics></Statistics>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function render_right_panel() {\r\n    return <RulesBrowser></RulesBrowser>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? render_left_panel() : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">{render_right_panel()}</div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}