{"version":3,"sources":["gl/Renderer.js","app/Camera.js","gl/VertexBuffer.js","gl/IndexBuffer.js","simulation/CellularAutomaton3D.js","gl/CubeData.js","gl/Texture3D.js","gl/Texture2D.js","app/SimulationWindow.js","gl/Shader.js","gl/Uniform.js","shaders/border.js","app/BoundingBox.js","app/Border.js","shaders/vertex_shader.js","app/ShaderManager.js","shaders/fragment_shader.js","simulation/Neighbours3D.js","simulation/Rule3D.js","simulation/Randomiser3D.js","app/RuleBrowser.js","app/App.js","ui/SimulationView.jsx","ui/reducers/app.js","ui/Controls.jsx","ui/RulesBrowser.jsx","ui/ShaderMenu.jsx","index.jsx"],"names":["Renderer","gl","this","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","bind","drawElements","TRIANGLES","count","UNSIGNED_INT","Camera","fov","aspect_ratio","view_position","vec3","fromValues","look_position","create","target","model_translation","model","mat4","view","projection","update","identity","translate","scale","lookAt","perspective","Math","PI","dx","dy","rotation","rotateY","xz_plane_direction","sub","rotate","transformMat4","delta","diff","add","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","layout","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","push","start","end","slice","FLOAT","Error","IndexBuffer","buffer","length","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CellularAutomaton3D","shape","forEach","n","xyz_to_i_coefficients","cells","Uint8Array","cells_buffer","neighbours","should_update","should_update_buffer","remove_queue","listeners","current_slice","slice_size","listener","fill","rule","x","y","z","i","xyz_to_i","dead_state","delete","on_location_update","complete","sliced_step","res","next","done","performance","now","cell_count","state","i_to_xyz","count_neighbours","next_state","get_next_state","e","tmp","pop","tmp_update","console","log","floor","cube","vertex_data","left","right","front","back","top","bottom","index_data","Uint32Array","Texture3D","texture","createTexture","bindTexture","TEXTURE_3D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","pixelStorei","UNPACK_ALIGNMENT","texImage3D","RG8","RG","UNSIGNED_BYTE","slot","activeTexture","TEXTURE0","Texture2D","TEXTURE_2D","texImage2D","RGBA8","RGBA","range","SimulationWindow","renderer","camera","shader_manager","rule_browser","total_cells","running","total_queued_steps","create_data","sim","listen_rerender","update_vertex_buffer","terrain_vbo_layout","push_attribute","terrain_vbo","add_vertex_buffer","state_colour_texture","create_states_texture","cell_data_width","cell_data","cell_data_texture","state_colours_data","total_states","hue","colorsys","hsv_to_rgb","r","g","b","entry","get_selected_entry","randomiser","randomise","seed_updates","step","stop","local","max_value","alive_state","items","min","texSubImage3D","drawElementsInstanced","Shader","vertex_shader_src","fragment_shader_src","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","name","uniform","location","getUniformLocation","warn","useProgram","apply","UniformMat4f","uniformMatrix4fv","UniformVec3f","uniform3f","UniformVec4f","uniform4f","Uniform","callback","BoundingBox","thickness","generate","triangle_count","push_data","v","shifted_index","map","idx","create_cube","centre","Border","adjusted_size","offset_vec","border","border_shader","add_uniform","vec4","draw","create_vertex_shader","main","body","xyz","radius","neighbour","ShaderManager","shaders","add_uniforms","current_shader","light_position","loc","uniform1f","uniform1i","MooreNeighbour","total_neighbours","xoff","yoff","zoff","pos_mod","is_neighbour","VonNeumanNeighbour","offsets","dim","m","off","Rule3D","remain_alive","become_alive","SeedCrystal","density","max","lower","upper","X","Y","Z","ceil","xlower","xupper","ylower","yupper","zlower","zupper","random","SeedCrystalAbsolute","RuleBrowser","entries","add_entry","RuleEntry","selected_entry","NeighbourRules","ca_string","description","rule_reader","RuleReader","neighbour_type","string","substrings","replace","split","Number","retrieve_rule","number_range","N","Array","numbers","assert_number","App","enable","DEPTH_TEST","BLEND","CULL_FACE","cullFace","BACK","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","set_size","requestAnimationFrame","loop","on_update","on_render","SimulationView","props","canvas_ref","React","createRef","rotating","mouse_start_pos","vec2","canvas","current","getContext","init_app","rules_browser","app","reducers","combineReducers","browser","action","value","select_entry","manager","select_shader","toggle","store","replaceReducer","run","width","clientWidth","height","clientHeight","ev","clientX","clientY","curr_pos","delta_zoom","deltaY","zoom","preventDefault","ref","onMouseDown","on_mouse_down","onMouseUp","onMouseMove","on_mouse_move","onWheel","on_wheel","Component","Controls","is_running","useSelector","dispatch","useDispatch","on_off","run_btn","className","onClick","RulesBrowser","rule_items","class_name","key","render_entry","ShaderMenu","createStore","Main","SizeChanger","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03bdc4f0.chunk.js","sourcesContent":["export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","import { mat4, vec3, vec2 } from 'gl-matrix';\r\n\r\nexport class Camera {\r\n  constructor() {\r\n    this.fov = 50;\r\n    this.aspect_ratio = 1;\r\n    this.view_position = vec3.fromValues(0, 0, 0);\r\n    this.look_position = vec3.create();\r\n    this.target = vec3.fromValues(0, 0, 0);\r\n    this.model_translation = vec3.create();\r\n\r\n    this.model = mat4.create();\r\n    this.view = mat4.create();\r\n    this.projection = mat4.create();\r\n\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n\r\n    mat4.identity(this.model);\r\n    mat4.translate(this.model, this.model, this.model_translation);\r\n    mat4.scale(this.model, this.model, [1, 1, 1]); \r\n\r\n    mat4.lookAt(this.view, this.view_position, this.target, [0, 1, 0]);\r\n\r\n    // mat4.perspectiveFromFieldOfView(this.projection, fov, 0.01, 1000);\r\n    mat4.perspective(this.projection, this.fov * Math.PI / 180, this.aspect_ratio, 0.01, 1000);\r\n  }\r\n\r\n  rotate(dx, dy) {\r\n    // vec3.rotateX(this.pos, this.pos, this.look_position, -dy);\r\n    // vec3.rotateY(this.pos, this.pos, this.look_position, dx);\r\n\r\n    let rotation = mat4.create();\r\n    mat4.rotateY(rotation, rotation, dx);\r\n\r\n    let xz_plane_direction = vec3.create();\r\n    vec3.sub(xz_plane_direction, this.look_position, this.view_position);\r\n    xz_plane_direction[1] = this.look_position[1];\r\n    vec3.rotateY(xz_plane_direction, xz_plane_direction, this.look_position, Math.PI/2.0);\r\n\r\n    mat4.rotate(rotation, rotation, -dy, xz_plane_direction);\r\n\r\n    // mat4.rotateX(rotation, rotation, -dy);\r\n    vec3.transformMat4(this.view_position, this.view_position, rotation);\r\n  }\r\n\r\n  zoom(delta) {\r\n    let diff = vec3.create();\r\n    vec3.sub(diff, this.view_position, this.look_position);\r\n    vec3.scale(diff, diff, 1.0+delta);\r\n\r\n    vec3.add(this.view_position, this.look_position, diff);\r\n  }\r\n\r\n\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","export class CellularAutomaton3D {\r\n    constructor(shape) {\r\n        this.shape = shape;\r\n        this.count = 1;\r\n        this.shape.forEach(n => this.count *= n); \r\n\r\n        this.xyz_to_i_coefficients = [this.shape[0], this.shape[1]*this.shape[0]];\r\n        this.cells = new Uint8Array(this.count);\r\n        this.cells_buffer = new Uint8Array(this.count);\r\n        this.neighbours = new Uint8Array(this.count);\r\n\r\n        this.should_update = new Set();\r\n        this.should_update_buffer = new Set();\r\n        this.remove_queue = [];\r\n\r\n        this.listeners = new Set();\r\n\r\n        this.current_slice = null;\r\n        this.slice_size = 10000;\r\n    }\r\n\r\n    listen_rerender(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    clear() {\r\n        this.cells.fill(0, 0, this.count);\r\n        this.cells_buffer.fill(0, 0, this.count);\r\n        this.neighbours.fill(0, 0, this.count);\r\n        this.should_update.clear();\r\n        this.should_update_buffer.clear();\r\n        this.remove_queue = [];\r\n    }\r\n\r\n    seed_updates(rule) {\r\n        for (let x = 0; x < this.shape[0]; x++) {\r\n            for (let y = 0; y < this.shape[1]; y++) {\r\n                for (let z = 0; z < this.shape[2]; z++) {\r\n                    let i = this.xyz_to_i(x, y, z);\r\n\r\n                    // let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n                    // this.neighbours[i] = neighbours;\r\n\r\n                    if (this.cells[i] === rule.dead_state) {\r\n                        this.should_update.delete(i);\r\n                    } else {\r\n                        rule.on_location_update(x, y, z, this.shape, this.should_update);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    step(rule, complete=false) {\r\n        if (this.current_slice === null) {\r\n            this.current_slice = this.sliced_step(rule);\r\n        }\r\n\r\n        // forcefully iterate through all slices\r\n        if (complete) {\r\n            for (let res of this.current_slice) {\r\n            }\r\n            this.current_slice = null;\r\n            return true;\r\n        }\r\n\r\n        // complete only one slice\r\n        let res = this.current_slice.next();\r\n        if (res.done) {\r\n            this.current_slice = null;\r\n        }\r\n        return res.done;\r\n    }\r\n\r\n    *sliced_step(rule) {\r\n        let start = performance.now();\r\n        let cell_count = 0;\r\n\r\n        for (let i of this.should_update) {\r\n            let state = this.cells[i];\r\n            let [x, y, z] = this.i_to_xyz(i);\r\n\r\n            let neighbours = rule.count_neighbours(x, y, z, this.shape, this.cells);\r\n            this.neighbours[i] = neighbours;\r\n\r\n            let next_state = rule.get_next_state(state, neighbours);\r\n            this.cells_buffer[i] = next_state; \r\n\r\n            if (next_state === state) {\r\n                this.remove_queue.push(i);\r\n            } else {\r\n                rule.on_location_update(x, y, z, this.shape, this.should_update_buffer);\r\n            }\r\n\r\n            cell_count += 1;\r\n            // slice size at 10000\r\n            if (cell_count % this.slice_size === 0) {\r\n                cell_count = 0;\r\n                let now = performance.now();\r\n                if (now-start >= 16.6) // aim for minimum of 60ms per update\r\n                    yield;\r\n            }\r\n        }\r\n\r\n        // swap buffers\r\n        let tmp = this.cells;\r\n        this.cells = this.cells_buffer;\r\n        this.cells_buffer = tmp;\r\n\r\n        while (this.remove_queue.length > 0) {\r\n            let i = this.remove_queue.pop();\r\n            this.should_update.delete(i);\r\n        }\r\n\r\n        let tmp_update = this.should_update;\r\n        this.should_update = this.should_update_buffer;\r\n        this.should_update_buffer = tmp_update;\r\n\r\n        let end = performance.now();\r\n        console.log(this.should_update.size, end-start);\r\n\r\n        // rerender with changes\r\n        for (let listener of this.listeners) {\r\n            listener(this);\r\n        }\r\n        return;\r\n    }\r\n\r\n    xyz_to_i(x, y, z) {\r\n        return x + y*this.xyz_to_i_coefficients[0] + z*this.xyz_to_i_coefficients[1];\r\n    }\r\n\r\n    i_to_xyz(i) {\r\n        let z = Math.floor(i / this.xyz_to_i_coefficients[1]);\r\n        i = i-z*this.xyz_to_i_coefficients[1];\r\n        let y = Math.floor(i / this.xyz_to_i_coefficients[0]);\r\n        let x = i-y*this.xyz_to_i_coefficients[0];\r\n        return [x, y, z];\r\n    }\r\n};\r\n\r\n","function vertex_data(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front, 0, 0, 1,\r\n    right, bottom, front, 0, 0, 1,\r\n    left, top, front, 0, 0, 1,\r\n    right, top, front, 0, 0, 1,\r\n\r\n    left, top, front, 0, 1, 0,\r\n    left, top, back, 0, 1, 0,\r\n    right, top, back, 0, 1, 0,\r\n    right, top, front, 0, 1, 0,\r\n\r\n    right, top, front, 1, 0, 0,\r\n    right, bottom, front, 1, 0, 0,\r\n    right, bottom, back, 1, 0, 0,\r\n    right, top, back, 1, 0, 0,\r\n\r\n    left, top, front, -1, 0, 0,\r\n    left, top, back, -1, 0, 0,\r\n    left, bottom, front, -1, 0, 0,\r\n    left, bottom, back, -1, 0, 0,\r\n\r\n    left, bottom, front, 0, -1, 0,\r\n    left, bottom, back, 0, -1, 0,\r\n    right, bottom, back, 0, -1, 0,\r\n    right, bottom, front, 0, -1, 0,\r\n\r\n    left, top, back, 0, 0, -1,\r\n    right, top, back, 0, 0, -1,\r\n    left, bottom, back, 0, 0, -1,\r\n    right, bottom, back, 0, 0, -1,\r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data = new Uint32Array([\r\n    0, 3, 2,\r\n    0, 1, 3,\r\n\r\n    4, 6, 5,\r\n    4, 7, 6,\r\n\r\n    8, 9, 11,\r\n    9, 10, 11,\r\n\r\n    13, 14, 12,\r\n    13, 15, 14,\r\n\r\n    16, 18, 19,\r\n    16, 17, 18,\r\n\r\n    20, 21, 22,\r\n    21, 23, 22,\r\n]);\r\n\r\nexport const cube = {\r\n    vertex_data: vertex_data,\r\n    index_data: index_data\r\n};\r\n\r\nfunction vertex_data_performance(left, right, front, back, top, bottom) {\r\n  return new Float32Array([\r\n    left, bottom, front,\r\n    right, bottom, front,\r\n    left, top, front,\r\n    right, top, front,\r\n    left, bottom, back, \r\n    right, bottom, back, \r\n    left, top, back, \r\n    right, top, back, \r\n  ]);\r\n}\r\n\r\n// wind triangles counter clockwise for culling\r\nconst index_data_performance = new Uint32Array([\r\n  0, 1, 2,\r\n  1, 3, 2,\r\n  2, 3, 6, \r\n  3, 7, 6,\r\n  1, 5, 3, \r\n  5, 7, 3,\r\n  0, 2, 6, \r\n  0, 6, 4, \r\n  4, 1, 0, \r\n  1, 4, 5, \r\n  5, 6, 7, \r\n  5, 4, 6,\r\n]);\r\n\r\nexport const cube_optimized = {\r\n    vertex_data: vertex_data_performance,\r\n    index_data: index_data_performance\r\n};","export class Texture3D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.R8, shape[0], shape[1], shape[2], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RG8, shape[0], shape[1], shape[2], 0, gl.RG, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA8, shape[0], shape[1], shape[2], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_3D, this.texture);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind(slot=0) {\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n}","import { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport { CellularAutomaton3D } from '../simulation/CellularAutomaton3D';\r\nimport { cube } from '../gl/CubeData';\r\n\r\nimport { Texture3D } from '../gl/Texture3D';\r\nimport { Texture2D } from '../gl/Texture2D';\r\n\r\nimport colorsys from 'colorsys';\r\n\r\n\r\nexport class SimulationWindow {\r\n  constructor(gl, size, renderer, camera, shader_manager, rule_browser) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n    this.size = size;\r\n\r\n    this.total_cells = size[0] * size[1] * size[2];\r\n\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n\r\n    this.shader_manager = shader_manager;\r\n    this.rule_browser = rule_browser;\r\n    this.create_data();\r\n    \r\n    this.sim = new CellularAutomaton3D(this.size);\r\n    this.sim.listen_rerender(sim => this.update_vertex_buffer(true));\r\n\r\n  }\r\n\r\n  create_data() {\r\n    let gl = this.gl;\r\n\r\n    let terrain_vbo_layout = new VertexBufferLayout(gl);\r\n    terrain_vbo_layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    terrain_vbo_layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    let vertex_data = cube.vertex_data(0, 1, 1, 0, 1, 0);\r\n    let index_data = cube.index_data;\r\n\r\n    let terrain_vbo = new VertexBufferObject(gl, vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, index_data);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(terrain_vbo, terrain_vbo_layout);\r\n\r\n    this.state_colour_texture = this.create_states_texture();\r\n\r\n    this.cell_data_width = 2;\r\n    this.cell_data = new Uint8Array(this.total_cells*this.cell_data_width);\r\n    this.cell_data_texture = new Texture3D(gl, this.cell_data, this.size);\r\n  }\r\n\r\n  create_states_texture() {\r\n    let gl = this.gl;\r\n\r\n    let total_states = 40;\r\n    let state_colours_data = new Uint8Array(4*total_states)\r\n    for (let i = 0; i < total_states-1; i++) {\r\n      let offset = (i+1)*4;\r\n      \r\n      const hue_range = 200;\r\n      let hue = hue_range*(1.0-i/total_states);\r\n      let saturation = 100;\r\n      let value = 80;\r\n      let {r, g, b} = colorsys.hsv_to_rgb(hue, saturation, value);\r\n      state_colours_data[offset+0] = r;\r\n      state_colours_data[offset+1] = g;\r\n      state_colours_data[offset+2] = b;\r\n      state_colours_data[offset+3] = 255;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      state_colours_data[i] = 0;\r\n    }\r\n\r\n    return new Texture2D(gl, state_colours_data, [total_states,1]);\r\n  }\r\n\r\n  clear() {\r\n    this.sim.clear();\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  randomise() {\r\n    let entry = this.rule_browser.get_selected_entry();\r\n    // this.clear();\r\n    entry.randomiser.randomise(this.sim);\r\n    this.sim.seed_updates(entry.rule);\r\n\r\n    this.update_vertex_buffer();\r\n  }\r\n\r\n  on_update() {\r\n    this.camera.update();\r\n    if (this.running) {\r\n      this.total_queued_steps = 1;\r\n    }\r\n\r\n    if (this.total_queued_steps > 0) {\r\n      let entry = this.rule_browser.get_selected_entry();\r\n      let rule = entry.rule;\r\n      let res = this.sim.step(rule);\r\n      if (res) {\r\n        this.total_queued_steps = 0;\r\n      } \r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.running = true;\r\n  }\r\n\r\n  stop() {\r\n    this.running = false;\r\n    this.total_queued_steps = 0;\r\n  }\r\n\r\n  toggle() {\r\n    if (this.running)\r\n      this.stop();\r\n    else\r\n      this.start();\r\n  }\r\n\r\n  step() {\r\n    this.total_queued_steps = 1;\r\n  }\r\n\r\n  update_vertex_buffer(local=false) {\r\n    let gl = this.gl;\r\n\r\n    let rule = this.rule_browser.get_selected_entry().rule;\r\n    let max_value = rule.alive_state;\r\n\r\n    let items = local ? this.sim.should_update : range(0, this.sim.count);\r\n\r\n    for (let i of items) {\r\n      let offset = i*this.cell_data_width;\r\n      let state = this.sim.cells[i];\r\n      let neighbours = this.sim.neighbours[i];\r\n      this.cell_data[offset+0] = Math.floor(state/max_value * 255);\r\n      this.cell_data[offset+1] = Math.floor(Math.min(neighbours, 26)/26 * 255);\r\n    }\r\n\r\n    this.cell_data_texture.bind();\r\n    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, this.size[0], this.size[1], this.size[2], gl.RG, gl.UNSIGNED_BYTE, this.cell_data, 0);\r\n  }\r\n\r\n  on_render() {\r\n    let gl = this.gl;\r\n    this.shader_manager.bind();\r\n    this.cell_data_texture.bind(0);\r\n    this.state_colour_texture.bind(1);\r\n    this.vao.bind();\r\n    this.index_buffer.bind();\r\n\r\n    gl.drawElementsInstanced(gl.TRIANGLES, this.index_buffer.count, gl.UNSIGNED_INT, this.index_data, this.total_cells); \r\n  }\r\n}\r\n\r\nfunction *range(start, end) {\r\n  for (let i = start; i < end; i++) {\r\n    yield i;\r\n  }\r\n}\r\n","export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    let gl = this.gl;\r\n\r\n    const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertex_shader, vertex_shader_src);\r\n    gl.compileShader(vertex_shader);\r\n    if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(vertex_shader));\r\n      throw new Error('Unable to compile vertex shader');\r\n    }\r\n\r\n    const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragment_shader, fragment_shader_src);\r\n    gl.compileShader(fragment_shader);\r\n    if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(fragment_shader));\r\n      throw new Error('Unable to compile fragment shader');\r\n    }\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertex_shader);\r\n    gl.attachShader(program, fragment_shader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(gl.getProgramInfoLog(program));\r\n      throw new Error('Unable to construct shader program');\r\n    }\r\n\r\n    this.vertex_shader = vertex_shader;\r\n    this.fragment_shader = fragment_shader;\r\n    this.program = program;\r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","const vertex = \r\n`\r\nprecision mediump float;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uOffset;\r\n\r\nvoid main() {\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(position + uOffset, 1);\r\n}`;\r\n\r\nconst frag = \r\n`\r\nprecision mediump float;\r\n\r\nuniform vec4 uColour;\r\n\r\nvoid main() {\r\n    gl_FragColor = uColour;\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","import { cube } from '../gl/CubeData';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class BoundingBox {\r\n    constructor(size, thickness) {\r\n        let [vertex_data, index_data] = this.generate(size, thickness);\r\n        this.size = size;\r\n        this.thickness = thickness;\r\n        this.vertex_data = new Float32Array(vertex_data);\r\n        this.index_data = new Uint32Array(index_data);\r\n    }\r\n\r\n    generate(size, thickness) {\r\n        let vertex_data = [];\r\n        let index_data = [];\r\n        let triangle_count = 0;\r\n        function push_data(data) {\r\n            let [v, i] = data;\r\n            vertex_data.push(...v);\r\n            let shifted_index = i.map(idx => idx+triangle_count);\r\n            index_data.push(...shifted_index);\r\n            triangle_count += 24;\r\n        }\r\n\r\n        // create corner pieces\r\n        let shape = vec3.fromValues(thickness, thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                for (let z of [0, size[2]]) {\r\n                    push_data(this.create_cube([x, y, z], shape));\r\n                }\r\n            }\r\n        }\r\n        // create x beams\r\n        shape = vec3.fromValues(size[0]-thickness, thickness, thickness);\r\n        for (let y of [0, size[1]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let x = size[0]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create y beams\r\n        shape = vec3.fromValues(thickness, size[1]-thickness, thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let z of [0, size[2]]) {\r\n                let y = size[1]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n        // create z beams\r\n        shape = vec3.fromValues(thickness, thickness, size[2]-thickness);\r\n        for (let x of [0, size[0]]) {\r\n            for (let y of [0, size[1]]) {\r\n                let z = size[2]/2;\r\n                push_data(this.create_cube([x, y, z], shape));\r\n            }\r\n        }\r\n\r\n        return [vertex_data, index_data];\r\n    }\r\n\r\n    create_cube(centre, shape) {\r\n        let left = centre[0] - shape[0]/2;\r\n        let right = centre[0] + shape[0]/2;\r\n        let top = centre[1] + shape[1]/2;\r\n        let bottom = centre[1] - shape[1]/2;\r\n        let front = centre[2] - shape[2]/2;\r\n        let back = centre[2] + shape[2]/2;\r\n        let vertex_data = cube.vertex_data(left, right, front, back, top, bottom);\r\n        let index_data = cube.index_data;\r\n        return [vertex_data, index_data];\r\n    }\r\n};","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\nimport { UniformMat4f, UniformVec3f, UniformVec4f } from '../gl/Uniform';\r\n\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nimport border_shader from '../shaders/border';\r\nimport { BoundingBox } from './BoundingBox';\r\n\r\nexport class Border {\r\n  constructor(gl, size, renderer, camera) {\r\n    this.gl = gl;\r\n    this.renderer = renderer;\r\n    this.camera = camera;\r\n\r\n    let thickness = 0.2;\r\n    let offset = 0.5;\r\n    let adjusted_size = vec3.create();\r\n    vec3.add(adjusted_size, size, vec3.fromValues(2*offset, 2*offset, 2*offset));\r\n    let offset_vec = vec3.fromValues(-offset, -offset, -offset);\r\n\r\n    this.border = new BoundingBox(adjusted_size, thickness);\r\n\r\n    this.shader = new Shader(gl, border_shader.vertex, border_shader.frag);\r\n    this.vbo = new VertexBufferObject(gl, this.border.vertex_data, gl.STATIC_DRAW);\r\n    this.index_buffer = new IndexBuffer(gl, this.border.index_data);\r\n\r\n    let layout = new VertexBufferLayout(gl);\r\n    layout.push_attribute(0, 3, gl.FLOAT, false);\r\n    layout.push_attribute(1, 3, gl.FLOAT, false);\r\n\r\n    this.vao = new VertexArrayObject(gl);\r\n    this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n    this.shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    this.shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    this.shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    // this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 1)));\r\n    this.shader.add_uniform(\"uColour\", new UniformVec4f(gl, vec4.fromValues(0, 0, 0, 0.8)));\r\n    this.shader.add_uniform(\"uOffset\", new UniformVec3f(gl, offset_vec));\r\n  }\r\n\r\n  on_render() {\r\n    this.renderer.draw(this.vao, this.index_buffer, this.shader);\r\n  }\r\n}","function create_vertex_shader(main, body='') {\r\nreturn (\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump sampler3D;\r\nprecision mediump sampler2D;\r\nprecision mediump int;\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\n\r\n\r\nuniform mat4 uModel;\r\nuniform mat4 uView;\r\nuniform mat4 uProjection;\r\nuniform vec3 uGridSize;\r\nuniform int uScalingEnabled;\r\n\r\nuniform sampler2D uStateColourTexture;\r\nuniform sampler3D uStateTexture;\r\n\r\nvec3 centre = vec3(0.5, 0.5, 0.5);\r\n\r\nout vec4 vColour;\r\nout vec3 vNormal;\r\nout vec3 vFragPos;\r\n\r\nvec3 calculate_position(float index) {\r\n    float remain = float(gl_InstanceID);\r\n    float z = floor(remain/(uGridSize.x*uGridSize.y));\r\n    remain = remain - z*uGridSize.x*uGridSize.y;\r\n    float y = floor(remain/uGridSize.x);\r\n    float x = remain-y*uGridSize.x; \r\n    return vec3(x, y, z);\r\n}\r\n\r\n${body}\r\n\r\n${main}\r\n`\r\n)};\r\n\r\nconst state_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst xyz_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vec3 cube_colour = normalize(new_position / (uGridSize * 2.0));\r\n\r\n    vColour = vec4(cube_colour, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst radius_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[0];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n\r\n    vec3 distance = new_position-uGridSize/2.0;\r\n    float normalised_distance = length(distance/ (uGridSize/2.0));\r\n    normalised_distance = clamp(normalised_distance, 0.0, 1.0);\r\n    vec4 distance_colour = texture(uStateColourTexture, vec2(normalised_distance, 0));\r\n\r\n    vColour = vec4(distance_colour.xyz, state_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float index = result[1];\r\n\r\n    float scale = max(index, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(index,0));\r\n    vColour = state_colour; \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nconst neighbour_and_alive_shading = create_vertex_shader(\r\n`void main() {\r\n    vec3 offset = calculate_position(float(gl_InstanceID));\r\n\r\n    vec3 state_lookup = offset / uGridSize;\r\n    vec4 result = texture(uStateTexture, state_lookup);\r\n    float state = result[0];\r\n    float neighbours = result[1];\r\n\r\n    float scale = max(neighbours, float(1-uScalingEnabled));\r\n    vec3 to_centre = centre-position;\r\n    vec3 new_position = position + to_centre*(1.0-scale) + offset;\r\n\r\n    vec4 state_colour =  texture(uStateColourTexture, vec2(state,0));\r\n    vec4 neighbour_colour = texture(uStateColourTexture, vec2(neighbours, 0)); \r\n    vColour = vec4(neighbour_colour.xyz, state_colour.a*neighbour_colour.a); \r\n    vNormal = normal;\r\n    vFragPos = vec3(uModel * vec4(new_position, 1));\r\n\r\n    mat4 MVP = uProjection * uView * uModel;\r\n    gl_Position = MVP * vec4(new_position, 1);\r\n}`);\r\n\r\nexport const vertex_shader_src = {\r\n    state: state_shading,\r\n    xyz: xyz_shading,\r\n    radius: radius_shading,\r\n    neighbour: neighbour_shading,\r\n    'neighbour and alive': neighbour_and_alive_shading,\r\n};","import { Shader } from '../gl/Shader';\r\nimport { UniformMat4f, UniformVec3f, Uniform } from '../gl/Uniform';\r\n\r\nimport { fragment_shader_src } from '../shaders/fragment_shader';\r\nimport { vertex_shader_src } from '../shaders/vertex_shader';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nexport class ShaderManager {\r\n  constructor(gl, camera) {\r\n    this.gl = gl;\r\n    this.size = vec3.create();\r\n    this.camera = camera;\r\n\r\n    this.create();\r\n  }\r\n\r\n  set_size(size) {\r\n    for (let i = 0; i < 3; i++)\r\n      this.size[i] = size[i];\r\n  }\r\n\r\n  create() {\r\n    let gl = this.gl;\r\n    this.shaders = [];\r\n    for (let name in vertex_shader_src) {\r\n      let vert_src = vertex_shader_src[name];\r\n      let frag_src = fragment_shader_src;\r\n      let shader = new Shader(gl, vert_src, frag_src); \r\n      this.add_uniforms(shader);\r\n\r\n      this.shaders.push({name:name, shader:shader});\r\n    }\r\n    this.current_shader = 0;\r\n  }\r\n\r\n  select_shader(index) {\r\n    this.current_shader = index;\r\n  }\r\n\r\n  bind() {\r\n    let shader_entry = this.shaders[this.current_shader];\r\n    let shader = shader_entry.shader;\r\n    shader.bind();\r\n  }\r\n\r\n  add_uniforms(shader) {\r\n    let gl = this.gl;\r\n\r\n    shader.add_uniform(\"uModel\", new UniformMat4f(gl, this.camera.model));\r\n    shader.add_uniform(\"uView\", new UniformMat4f(gl, this.camera.view));\r\n    shader.add_uniform(\"uProjection\", new UniformMat4f(gl, this.camera.projection));\r\n    shader.add_uniform(\"uGridSize\", new UniformVec3f(gl, this.size));\r\n    shader.add_uniform(\"uViewPosition\", new UniformVec3f(gl, this.camera.view_position));\r\n\r\n    // lighting\r\n    let light_position = vec3.create();\r\n    vec3.scale(light_position, this.size, 2.5);\r\n    shader.add_uniform('light.position', new UniformVec3f(gl, light_position));\r\n    shader.add_uniform('light.colour', new UniformVec3f(gl, vec3.fromValues(1,1,1)));\r\n    // // lighting params\r\n    shader.add_uniform(\"uAmbientStrength\", new Uniform(loc => gl.uniform1f(loc, 0.3)));\r\n    shader.add_uniform(\"uDiffuseStrength\", new Uniform(loc => gl.uniform1f(loc, 0.9)));\r\n    shader.add_uniform(\"uSpecularStrength\", new Uniform(loc => gl.uniform1f(loc, 0.5)));\r\n    shader.add_uniform(\"uSpecularPowerFactor\", new Uniform(loc => gl.uniform1f(loc, 4.0)));\r\n    // add texture id\r\n    shader.add_uniform(\"uStateTexture\", new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uStateColourTexture\", new Uniform(loc => gl.uniform1i(loc, 1)));\r\n    // post processing\r\n    shader.add_uniform(\"uScalingEnabled\", new Uniform(loc => gl.uniform1i(loc, 0)));\r\n    shader.add_uniform(\"uFogNear\", new Uniform(loc => gl.uniform1f(loc, 0)));\r\n    shader.add_uniform(\"uFogFar\", new Uniform(loc => gl.uniform1f(loc, 0)));\r\n  }\r\n}","export const fragment_shader_src =\r\n`#version 300 es\r\n\r\nprecision mediump float;\r\nprecision mediump int;\r\n\r\nin vec4 vColour;\r\nin vec3 vFragPos;\r\nin vec3 vNormal;\r\n\r\nout vec4 fragColour;\r\n\r\nstruct Light {\r\n    vec3 position;\r\n    vec3 colour;\r\n};\r\n\r\nuniform Light light;\r\n\r\nuniform float uAmbientStrength;\r\nuniform float uDiffuseStrength;\r\nuniform float uSpecularStrength;\r\n\r\nuniform vec3 uViewPosition;\r\nuniform float uSpecularPowerFactor;\r\nfloat uSpecularScattering = 0.1;\r\n\r\nvec3 uSkyTop =  vec3( 0.1, 0.2, 0.8 ) * 0.5;\r\nvec3 uSkyBottom = vec3( 0.5, 0.8, 1.0 ) * 1.5;\r\nvec3 uSunColour = vec3(1.0, 1.2, 1.4);\r\n\r\n\r\nfloat uFloorHeight = 0.0;\r\nfloat uAmbientOcclusionStrength = 0.8;\r\nfloat uAmbientOcclusionRange = 100.0;\r\n\r\nfloat uSunStrength = 1.0;\r\n\r\nvec4 uFogColour = vec4(1,1,1,1);\r\nuniform float uFogNear;\r\nuniform float uFogFar;\r\nfloat uFogRange = 1000.0;\r\n\r\nvec3 get_sun_direction() {\r\n    return normalize(vec3(20.0, 40.3, -10.4));\r\n}\r\n\r\nvec3 get_sun_lighting(const vec3 normal) {\r\n    vec3 light_direction = -get_sun_direction();\r\n    float angle = max(dot(normal, -light_direction), 0.0);\r\n    return uSunColour * uSunStrength * angle;\r\n}\r\n\r\nvec3 get_sky_lighting(const vec3 normal) {\r\n    float sky_blend = normal.y * 0.5 + 0.5;\r\n  \treturn mix(uSkyBottom, uSkyTop, sky_blend);\r\n}\r\n\r\nvec3 get_sky_colour(vec3 view_direction) {\r\n    return mix(uSkyBottom, uSkyTop, max(view_direction.y, 0.0));\r\n}\r\n\r\nvec4 apply_ambient_occlusion(const vec4 colour, const vec3 position) {\r\n    float height = (position.y - uFloorHeight) / uAmbientOcclusionRange;\r\n    height = abs(height);\r\n    float occlusion = mix(1.0, 1.0-uAmbientOcclusionStrength, clamp(0.0, 1.0, height));\r\n    return vec4(colour.xyz * occlusion, colour.a);\r\n}\r\n\r\nvec4 apply_fog(const vec4 colour, float distance) {\r\n    float norm_distance = distance / uFogRange;\r\n    float fog_strength = clamp(norm_distance, uFogNear, uFogFar);\r\n    return mix(colour, uFogColour, fog_strength);\r\n}\r\n\r\nvoid main() {\r\n    if (vColour.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n    vec3 normal = normalize(vNormal);\r\n\r\n    vec3 ambient = uAmbientStrength * light.colour;\r\n\r\n    vec3 light_direction = normalize(light.position - vFragPos);\r\n    vec3 view_direction = normalize(uViewPosition - vFragPos);\r\n    vec3 reflect_direction = reflect(-light_direction, normal);\r\n\r\n\r\n    // float diff = dot(view_direction, reflect_direction);\r\n    float diff = dot(light_direction, normal);\r\n    diff = max(diff, 0.0);\r\n    vec3 diffuse = diff * uDiffuseStrength * light.colour;\r\n\r\n    float spec = dot(view_direction, reflect_direction);\r\n    spec = clamp(spec + uSpecularScattering, 0.0, 1.0);\r\n    spec = pow(spec, uSpecularPowerFactor);\r\n    vec3 specular = uSpecularStrength * spec * light.colour;\r\n\r\n    vec3 sky_lighting = get_sky_lighting(normal);\r\n    vec3 sun_lighting = get_sun_lighting(normal);\r\n\r\n    // vec3 total_lighting = ambient + diffuse + specular;\r\n    vec3 total_lighting = specular + sky_lighting + sun_lighting;\r\n\r\n    vec4 result = vec4(total_lighting, 1) * vColour; \r\n    // result = apply_ambient_occlusion(result, vFragPos);\r\n\r\n    float distance = length(uViewPosition-vFragPos);\r\n    result = apply_fog(result, distance);\r\n\r\n    fragColour = result;\r\n}`;","export class MooreNeighbour {\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    if (xoff === 0 && yoff === 0 && zoff === 0)\r\n                        continue;\r\n\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    const state = cells[i]; \r\n                    if (rule.is_neighbour(state)) \r\n                        total_neighbours += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return total_neighbours;\r\n\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        for (let xoff = -1; xoff <= 1; xoff++) {\r\n            for (let yoff = -1; yoff <= 1; yoff++) {\r\n                for (let zoff = -1; zoff <= 1; zoff++) {\r\n                    const xn = pos_mod(x+xoff, shape[0]);\r\n                    const yn = pos_mod(y+yoff, shape[1]);\r\n                    const zn = pos_mod(z+zoff, shape[2]); \r\n\r\n                    const i = xyz_to_i(xn, yn, zn, shape);\r\n                    buffer.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class VonNeumanNeighbour {\r\n    constructor() {\r\n        this.offsets = [];\r\n        for (let dim = 0; dim < 3; dim++) {\r\n            let n = [0, 0, 0];\r\n            let m = [0, 0, 0];\r\n            n[dim] = 1;\r\n            m[dim] = -1;\r\n            this.offsets.push(n);\r\n            this.offsets.push(m); \r\n        }\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells, rule) {\r\n        let total_neighbours = 0;\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            const i = xyz_to_i(xn, yn, zn, shape);\r\n\r\n            const state = cells[i]; \r\n            if (rule.is_neighbour(state)) \r\n                total_neighbours += 1;\r\n        }\r\n\r\n        return total_neighbours;\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        let i = xyz_to_i(x, y, z, shape);\r\n        buffer.add(i);\r\n\r\n        for (let off of this.offsets) {\r\n            const xn = pos_mod(x+off[0], shape[0]);\r\n            const yn = pos_mod(y+off[1], shape[1]);\r\n            const zn = pos_mod(z+off[2], shape[2]); \r\n\r\n            i = xyz_to_i(xn, yn, zn, shape);\r\n            buffer.add(i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction xyz_to_i(x, y, z, shape) {\r\n    const Y = shape[0];\r\n    const Z = shape[0]*shape[1];\r\n    return x + y*Y + z*Z;\r\n}\r\n\r\nfunction pos_mod(n, m) {\r\n    return (((n % m) + m) % m);\r\n}","import { MooreNeighbour } from \"./Neighbours3D\";\r\n\r\nexport class Rule3D {\r\n    constructor(remain_alive, become_alive, total_states, neighbours) {\r\n        this.remain_alive = remain_alive;\r\n        this.become_alive = become_alive;\r\n        this.total_states = total_states;\r\n        this.alive_state = this.total_states-1;\r\n        this.dead_state = 0;\r\n        \r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n    count_neighbours(x, y, z, shape, cells) {\r\n        return this.neighbours.count_neighbours(x, y, z, shape, cells, this);\r\n    }\r\n\r\n    on_location_update(x, y, z, shape, buffer) {\r\n        this.neighbours.on_location_update(x, y, z, shape, buffer);\r\n    }\r\n\r\n    get_next_state(state, neighbours) {\r\n        // refractory\r\n        if (state > this.dead_state && state < this.alive_state) {\r\n            return state-1;\r\n        }\r\n        // alive to dead\r\n        if (state === this.total_states-1) {\r\n            if (!this.remain_alive(neighbours)) {\r\n                return state-1;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        // dead to alive\r\n        if (state === this.dead_state && this.become_alive(neighbours)) {\r\n            return this.alive_state;\r\n        }\r\n        // remain dead\r\n        return state;\r\n    }\r\n\r\n    is_neighbour(state) {\r\n        return (state === this.alive_state);\r\n    }\r\n}","export class SeedCrystal {\r\n    constructor(density=0.2, radius=0.1) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let [lower, upper] = [Math.max(0.5-this.radius, 0.0), Math.min(0.5+this.radius, 1.0)];\r\n\r\n        let X = sim.shape[0]-1;\r\n        let Y = sim.shape[1]-1;\r\n        let Z = sim.shape[2]-1;\r\n\r\n        let [xlower, xupper] = [Math.floor(X*lower), Math.ceil(X*upper)];\r\n        let [ylower, yupper] = [Math.floor(Y*lower), Math.ceil(Y*upper)];\r\n        let [zlower, zupper] = [Math.floor(Z*lower), Math.ceil(Z*upper)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class SeedCrystalAbsolute {\r\n    constructor(density=0.2, radius=3) {\r\n        this.radius = radius;\r\n        this.density = density;\r\n        this.alive_state = 0;\r\n        this.dead_state = 0;\r\n    }\r\n\r\n    randomise(sim) {\r\n        let X = Math.floor(sim.shape[0]/2);\r\n        let Y = Math.floor(sim.shape[1]/2);\r\n        let Z = Math.floor(sim.shape[2]/2);\r\n\r\n        let [xlower, xupper] = [Math.max(X-this.radius, 0), Math.min(X+this.radius, sim.shape[0]-1)];\r\n        let [ylower, yupper] = [Math.max(Y-this.radius, 0), Math.min(Y+this.radius, sim.shape[1]-1)];\r\n        let [zlower, zupper] = [Math.max(Z-this.radius, 0), Math.min(Z+this.radius, sim.shape[2]-1)];\r\n\r\n\r\n        for (let x = xlower; x <= xupper; x++) {\r\n            for (let y = ylower; y <= yupper; y++) {\r\n                for (let z = zlower; z <= zupper; z++) {\r\n                    let i = sim.xyz_to_i(x, y, z);\r\n                    if (Math.random() < this.density) {\r\n                        sim.cells[i] = this.alive_state;\r\n                    } else {\r\n                        sim.cells[i] = this.dead_state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rule3D } from \"../simulation/Rule3D\";\r\nimport { SeedCrystal, SeedCrystalAbsolute } from \"../simulation/Randomiser3D\";\r\nimport { MooreNeighbour, VonNeumanNeighbour } from \"../simulation/Neighbours3D\";\r\n\r\nexport class RuleBrowser {\r\n  constructor() {\r\n    this.entries = [];\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '445', \r\n        '4/4/5/M', \r\n        new SeedCrystal(0.05, 0.5)\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        '678 678', \r\n        '6-8/6-8/3/M',\r\n        new SeedCrystal(0.3)\r\n      ));\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Amoeba', \r\n        '9-26/5-7,12-13,15/5/M',\r\n        new SeedCrystalAbsolute(0.3, 5),\r\n      ));\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 1', \r\n        '2,6,9/4,6,8-9/10/M',\r\n        // '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Builder 2', \r\n        // '2,6,9/4,6,8-9/10/M',\r\n        '6,9/4,6,8-9/10/M',\r\n        new SeedCrystalAbsolute(0.35, 7) \r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Clouds 1', \r\n        '13-26/13-14,17-19/2/M',\r\n        new SeedCrystal(0.5, 0.5)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Spiky Growth', \r\n        '0-3,7-9,11-13,18,21-22,24-26/4,13,17,20-24,24/4/M',\r\n        new SeedCrystalAbsolute(0.8, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Crystal Growth 1',\r\n        '0-6/1,3/2/VN',\r\n        new SeedCrystalAbsolute(1.0, 1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Pyroclastic',\r\n        '4-7/6-8/10/M',\r\n        new SeedCrystal(0.1, 0.1)\r\n      )\r\n    );\r\n\r\n    this.add_entry(\r\n      new RuleEntry(\r\n        'Slow Decay',\r\n        // '1,4,8,11,13-26/13-26/5/M',\r\n        '8,11,13-26/13-26/5/M',\r\n        new SeedCrystal(0.45, 1.0)\r\n      )\r\n    );\r\n\r\n    this.selected_entry = 0;\r\n  }\r\n\r\n  get_selected_entry() {\r\n    return this.entries[this.selected_entry];\r\n  }\r\n\r\n  select_entry(idx) {\r\n    this.selected_entry = idx;\r\n  }\r\n\r\n  add_entry(entry) {\r\n    let randomiser = entry.randomiser;\r\n    let rule = entry.rule;\r\n    randomiser.alive_state = rule.alive_state;\r\n    randomiser.dead_state = rule.dead_state;\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nconst NeighbourRules = {\r\n  'M': MooreNeighbour,\r\n  'VN': VonNeumanNeighbour\r\n};\r\n\r\nclass RuleEntry {\r\n  constructor(name, ca_string, randomiser) {\r\n    this.name = name;\r\n    this.description = ca_string;\r\n    this.rule_reader = new RuleReader(ca_string);\r\n    this.rule = new Rule3D(\r\n      n => this.rule_reader.remain_alive[n],\r\n      n => this.rule_reader.become_alive[n],\r\n      this.rule_reader.total_states,\r\n      this.rule_reader.neighbour_type\r\n    );\r\n    this.randomiser = randomiser;\r\n  }\r\n}\r\n\r\nclass RuleReader {\r\n  constructor(string) {\r\n    this.generate(string);\r\n  }\r\n\r\n  generate(string) {\r\n    string = string.replace(' ', '');\r\n    let substrings = string.split('/');\r\n    if (substrings.length !== 4) {\r\n      throw new Error(`Invalid string rule: ${string}`);\r\n    }\r\n    let [remain_alive, become_alive, total_states, neighbour_type] = substrings;\r\n\r\n\r\n    if (!(neighbour_type in NeighbourRules)) {\r\n      throw new Error(`Invalid neighbourhood rule: ${neighbour_type}`);\r\n    }\r\n\r\n    this.total_states = Number(total_states);\r\n    this.remain_alive = this.retrieve_rule(remain_alive);\r\n    this.become_alive = this.retrieve_rule(become_alive);\r\n    this.neighbour_type = new NeighbourRules[neighbour_type]();\r\n  }\r\n\r\n  retrieve_rule(number_range) {\r\n    let N = new Array(27); \r\n    N.fill(false, 0, -1);\r\n\r\n    let numbers = number_range.split(',');\r\n    for (let number of numbers) {\r\n      let range = number.split('-').map(Number);\r\n      if (range.length === 1) {\r\n        let n = range[0];\r\n        this.assert_number(n);\r\n\r\n        N[n] = true;\r\n      } else if (range.length === 2) {\r\n        let [start, end] = range;\r\n        if (end < start) {\r\n          throw new Error(`Invalid range: ${start}-${end}. Must be ordered.`);\r\n        }\r\n        for (let n = start; n <= end; n++) {\r\n          this.assert_number(n);\r\n          N[n] = true;\r\n        }\r\n      } else {\r\n        throw new Error(`Too many numbers in range: ${number_range}. Must be 1 or 2`);\r\n      }\r\n    }\r\n\r\n\r\n    return N;\r\n  }\r\n\r\n  // 3**3 - 1 = 26 possible neighbours, 27 possible values 0-26\r\n  assert_number(n) {\r\n    if (n < 0 || n > 26) {\r\n      throw new Error(`Invalid number: ${n}. Must be between 0 to 26`);\r\n    }\r\n  }\r\n\r\n\r\n}","import { Renderer } from '../gl/Renderer';\r\nimport { Camera } from './Camera';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport { SimulationWindow } from './SimulationWindow';\r\nimport { Border } from './Border';\r\nimport { ShaderManager } from './ShaderManager';\r\nimport { RuleBrowser } from './RuleBrowser';\r\n\r\nexport class App {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n\r\n    this.renderer = new Renderer(gl); \r\n    this.camera = new Camera();\r\n\r\n    this.shader_manager = new ShaderManager(gl, this.camera);\r\n\r\n    this.rule_browser = new RuleBrowser();\r\n\r\n    let x = 30;\r\n    this.set_size(vec3.fromValues(x, x, x));\r\n  }\r\n\r\n  set_size(size) {\r\n    let gl = this.gl;\r\n\r\n    this.size = size;\r\n    this.shader_manager.set_size(this.size);\r\n    this.sim = new SimulationWindow(gl, this.size, this.renderer, this.camera, this.shader_manager, this.rule_browser);\r\n    this.border = new Border(gl, this.size, this.renderer, this.camera);\r\n\r\n    this.camera.model_translation = vec3.create();\r\n    vec3.scale(this.camera.model_translation, this.size, -0.5);\r\n    this.camera.view_position[2] = -this.size[2] * 2.5;\r\n  }\r\n\r\n  run() {\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  loop() {\r\n    this.on_update();\r\n    this.on_render();\r\n    requestAnimationFrame(this.loop.bind(this));\r\n  }\r\n\r\n  on_update() {\r\n    this.sim.on_update();\r\n  }\r\n    \r\n  on_render() {\r\n    this.renderer.clear();\r\n    this.border.on_render();\r\n    this.sim.on_render();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { App } from '../app/App';\r\n\r\nimport { rules_reducer, app_reducer, shader_reducer } from './reducers/app';\r\nimport { combineReducers } from 'redux';\r\nimport { store } from '../index';\r\n\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport class SimulationView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas_ref = React.createRef();\r\n    this.rotating = false;\r\n    this.mouse_start_pos = vec2.create(); \r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.canvas_ref.current;\r\n    const gl = canvas.getContext('webgl2');\r\n    if (!gl) {\r\n      throw new Error('WebGL not supported');\r\n    }\r\n\r\n    let app = new App(gl);\r\n    let reducers = combineReducers({\r\n      rule_browser: rules_reducer(app.rule_browser),\r\n      shader_manager: shader_reducer(app.shader_manager),\r\n      app: app_reducer(app),\r\n    });\r\n\r\n    store.replaceReducer(reducers);\r\n\r\n    app.run();\r\n    this.camera = app.camera;\r\n\r\n    let width = canvas.clientWidth;\r\n    let height = canvas.clientHeight;\r\n\r\n    this.camera.aspect_ratio = width/height;\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.rotating = true;\r\n    this.mouse_start_pos[0] = ev.clientX;\r\n    this.mouse_start_pos[1] = ev.clientY;\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n    if (!this.rotating || !this.mouse_start_pos) return;\r\n    let factor = 5/1000;\r\n    let curr_pos = vec2.fromValues(ev.clientX, ev.clientY);\r\n    let delta = vec2.create();\r\n    vec2.sub(delta, this.mouse_start_pos, curr_pos);\r\n    vec2.scale(delta, delta, factor);\r\n\r\n    this.camera.rotate(delta[0], delta[1]);\r\n    \r\n    this.mouse_start_pos = curr_pos;\r\n  }\r\n\r\n  on_wheel(ev) {\r\n    let delta_zoom = ev.deltaY * 0.001;\r\n    this.camera.zoom(delta_zoom);\r\n    // ev.stopPropagation();\r\n    ev.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas \r\n        width={800}\r\n        height={550}\r\n        ref={this.canvas_ref} \r\n        onMouseDown={ev => this.on_mouse_down(ev)}\r\n        onMouseUp={ev => this.rotating = false}\r\n        onMouseMove={ev => this.on_mouse_move(ev)}\r\n        onWheel={ev => this.on_wheel(ev)}></canvas>\r\n    );\r\n  }\r\n}","import { vec3 } from \"gl-matrix\";\r\n\r\nexport function app_reducer(init_app) {\r\n    const reducer = (app=init_app, action) => {\r\n        switch (action.type) {\r\n            case 'step': app.sim.step(); break;\r\n            case 'stop': app.sim.stop(); break;\r\n            case 'start': app.sim.start(); break;\r\n            case 'toggle': app.sim.toggle(); break;\r\n            case 'clear': app.sim.clear(); break;\r\n            case 'randomise': app.sim.randomise(); break;\r\n            case 'app.set_size':\r\n                let x = Number(action.value);\r\n                app.set_size(vec3.fromValues(x, x, x));\r\n                break;\r\n            }\r\n\r\n        return app;\r\n    }\r\n\r\n    return reducer;\r\n} \r\n\r\nexport function rules_reducer(rules_browser) {\r\n    const reducer = (browser=rules_browser, action) => {\r\n        switch (action.type) {\r\n            case 'rule.select':\r\n                let index = action.value;\r\n                browser.select_entry(index);\r\n                break;\r\n        }\r\n\r\n        return browser;\r\n    } \r\n\r\n    return reducer;\r\n}\r\n\r\nexport function shader_reducer(shader_manager) {\r\n    const reducer = (manager=shader_manager, action) => {\r\n        switch (action.type) {\r\n            case 'shader.select':\r\n                let index = action.value;\r\n                manager.select_shader(index);\r\n                break;\r\n        }\r\n\r\n        return manager;\r\n    }\r\n\r\n    return reducer;\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Controls () {\r\n  const is_running = useSelector(state => state.app.sim.running);\r\n  const dispatch = useDispatch();\r\n\r\n  const on_off = is_running ? 'Pause': 'Run';\r\n  const run_btn = is_running ? 'danger' : 'success';\r\n\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <button className=\"btn btn-secondary\" onClick={() => dispatch({type: 'step'})}>Tick</button>\r\n      <button className=\"btn btn-primary\" onClick={() => dispatch({type: 'randomise'})}>Randomise</button>\r\n      <button className=\"btn btn-warning\" onClick={() => dispatch({type: 'clear'})}>Clear</button>\r\n      <button className={\"btn btn-\"+run_btn} onClick={() => dispatch({type: 'toggle'})}>{on_off}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function RulesBrowser() {\r\n  const browser = useSelector(state => state.rule_browser);\r\n  const selected_entry = useSelector(state => state.rule_browser.selected_entry);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = index === selected_entry;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'rule.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n        <div>Rule: {entry.description}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const rule_items = browser.entries.map((e, i) => render_entry(e, i));\r\n\r\n  return (\r\n    <ul className=\"list-group\">{rule_items}</ul>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function ShaderMenu() {\r\n  const shader_manager = useSelector(state => state.shader_manager);\r\n  const current_shader = useSelector(state => state.shader_manager.current_shader);\r\n  const dispatch = useDispatch();\r\n\r\n  function render_entry(entry, index) {\r\n    let selected = current_shader === index;\r\n    let class_name = selected ? 'active' : '';\r\n    return (\r\n      <li className={\"list-group-item \"+class_name} key={index} onClick={() => dispatch({type:'shader.select', value:index})}>\r\n        <div>Name: {entry.name}</div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  const entries = shader_manager.shaders.map((e, i) => render_entry(e, i));\r\n  return (\r\n    <ul className='list-group'>{entries}</ul>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport { createStore } from 'redux';\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { SimulationView } from './ui/SimulationView';\r\nimport { Controls } from './ui/Controls';\r\nimport { RulesBrowser } from './ui/RulesBrowser';\r\nimport { ShaderMenu } from './ui/ShaderMenu';\r\n\r\nconst redux_debugging = false;\r\nexport const store = createStore(() => {}, redux_debugging && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nfunction Main() {\r\n  const state = useSelector(state => state);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        {state ? <div className=\"col-sm\">\r\n          <div>\r\n            <Controls></Controls>\r\n            </div>\r\n            {state ? \r\n              <SizeChanger></SizeChanger> :\r\n              <div></div>}\r\n            <div>\r\n            <ShaderMenu></ShaderMenu>\r\n          </div>\r\n        </div> : <div></div>}\r\n        <div className=\"col-sm\">\r\n          <SimulationView></SimulationView>\r\n        </div>\r\n        {state ? <div className=\"col-sm\">\r\n          <RulesBrowser></RulesBrowser>\r\n        </div> : <div></div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction SizeChanger() {\r\n  const dispatch = useDispatch();\r\n  const size = useSelector(state => state.app.size);\r\n\r\n  function on_size_change(ev) {\r\n    const value = ev.target.value;\r\n    let size = Number(value);\r\n    size = Math.min(size, 120);\r\n    size = Math.max(size, 20); \r\n    dispatch({type: 'app.set_size', value: size});\r\n  }\r\n\r\n  return (\r\n    <input type=\"number\" value={size[0]} onChange={on_size_change} max={120} min={20}></input> \r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Main></Main>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}